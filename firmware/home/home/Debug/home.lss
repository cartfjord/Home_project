
home.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000158  00800100  00003970  00003a04  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00003970  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000001cc  00800258  00800258  00003b5c  2**0
                  ALLOC
  3 .comment      00000060  00000000  00000000  00003b5c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00003bbc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000009b0  00000000  00000000  00003bfc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000129bc  00000000  00000000  000045ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000035de  00000000  00000000  00016f68  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000511e  00000000  00000000  0001a546  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00001f78  00000000  00000000  0001f664  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000046a9  00000000  00000000  000215dc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000098b1  00000000  00000000  00025c85  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000930  00000000  00000000  0002f536  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__ctors_end>
       4:	0c 94 b5 0f 	jmp	0x1f6a	; 0x1f6a <__vector_1>
       8:	0c 94 dc 0f 	jmp	0x1fb8	; 0x1fb8 <__vector_2>
       c:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
      10:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
      14:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
      18:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
      1c:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
      20:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
      24:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
      28:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
      2c:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
      30:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
      34:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
      38:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
      3c:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
      40:	0c 94 03 10 	jmp	0x2006	; 0x2006 <__vector_16>
      44:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
      48:	0c 94 9b 0d 	jmp	0x1b36	; 0x1b36 <__vector_18>
      4c:	0c 94 cd 0d 	jmp	0x1b9a	; 0x1b9a <__vector_19>
      50:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
      54:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
      58:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
      5c:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
      60:	0c 94 db 19 	jmp	0x33b6	; 0x33b6 <__vector_24>
      64:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
      68:	c9 08       	sbc	r12, r9
      6a:	a9 08       	sbc	r10, r9
      6c:	c9 08       	sbc	r12, r9
      6e:	b2 08       	sbc	r11, r2
      70:	c9 08       	sbc	r12, r9
      72:	b9 08       	sbc	r11, r9
      74:	be 08       	sbc	r11, r14
      76:	c3 08       	sbc	r12, r3

00000078 <__trampolines_end>:
      78:	00 00       	nop
      7a:	00 08       	sbc	r0, r0
      7c:	00 02       	muls	r16, r16
      7e:	01 00       	.word	0x0001	; ????
      80:	00 03       	mulsu	r16, r16
      82:	04 07       	cpc	r16, r20
	...

0000008c <digital_pin_to_bit_mask_PGM>:
      8c:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 01 02     ..... @...... ..
      9c:	04 08 10 20                                         ... 

000000a0 <digital_pin_to_port_PGM>:
      a0:	04 04 04 04 04 04 04 04 02 02 02 02 02 02 03 03     ................
      b0:	03 03 03 03                                         ....

000000b4 <port_to_output_PGM>:
      b4:	00 00 00 00 25 00 28 00 2b 00                       ....%.(.+.

000000be <port_to_mode_PGM>:
      be:	00 00 00 00 24 00 27 00 2a 00                       ....$.'.*.

000000c8 <__ctors_start>:
      c8:	3b 08       	sbc	r3, r11
      ca:	fd 0d       	add	r31, r13
      cc:	e6 12       	cpse	r14, r22
      ce:	01 18       	sub	r0, r1

000000d0 <__ctors_end>:
      d0:	11 24       	eor	r1, r1
      d2:	1f be       	out	0x3f, r1	; 63
      d4:	cf ef       	ldi	r28, 0xFF	; 255
      d6:	d8 e0       	ldi	r29, 0x08	; 8
      d8:	de bf       	out	0x3e, r29	; 62
      da:	cd bf       	out	0x3d, r28	; 61

000000dc <__do_copy_data>:
      dc:	12 e0       	ldi	r17, 0x02	; 2
      de:	a0 e0       	ldi	r26, 0x00	; 0
      e0:	b1 e0       	ldi	r27, 0x01	; 1
      e2:	e0 e7       	ldi	r30, 0x70	; 112
      e4:	f9 e3       	ldi	r31, 0x39	; 57
      e6:	02 c0       	rjmp	.+4      	; 0xec <__do_copy_data+0x10>
      e8:	05 90       	lpm	r0, Z+
      ea:	0d 92       	st	X+, r0
      ec:	a8 35       	cpi	r26, 0x58	; 88
      ee:	b1 07       	cpc	r27, r17
      f0:	d9 f7       	brne	.-10     	; 0xe8 <__do_copy_data+0xc>

000000f2 <__do_clear_bss>:
      f2:	24 e0       	ldi	r18, 0x04	; 4
      f4:	a8 e5       	ldi	r26, 0x58	; 88
      f6:	b2 e0       	ldi	r27, 0x02	; 2
      f8:	01 c0       	rjmp	.+2      	; 0xfc <.do_clear_bss_start>

000000fa <.do_clear_bss_loop>:
      fa:	1d 92       	st	X+, r1

000000fc <.do_clear_bss_start>:
      fc:	a4 32       	cpi	r26, 0x24	; 36
      fe:	b2 07       	cpc	r27, r18
     100:	e1 f7       	brne	.-8      	; 0xfa <.do_clear_bss_loop>

00000102 <__do_global_ctors>:
     102:	10 e0       	ldi	r17, 0x00	; 0
     104:	c8 e6       	ldi	r28, 0x68	; 104
     106:	d0 e0       	ldi	r29, 0x00	; 0
     108:	04 c0       	rjmp	.+8      	; 0x112 <__do_global_ctors+0x10>
     10a:	21 97       	sbiw	r28, 0x01	; 1
     10c:	fe 01       	movw	r30, r28
     10e:	0e 94 5e 1b 	call	0x36bc	; 0x36bc <__tablejump2__>
     112:	c4 36       	cpi	r28, 0x64	; 100
     114:	d1 07       	cpc	r29, r17
     116:	c9 f7       	brne	.-14     	; 0x10a <__do_global_ctors+0x8>
     118:	0e 94 2b 0e 	call	0x1c56	; 0x1c56 <main>
     11c:	0c 94 b6 1c 	jmp	0x396c	; 0x396c <_exit>

00000120 <__bad_interrupt>:
     120:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000124 <_ZN15Adafruit_Sensor15enableAutoRangeEb>:
        Serial.print('-');
        Serial.print(internal_tm.Month, DEC);
        Serial.print('-');
        Serial.print(internal_tm.Day, DEC);
        Serial.print("] ");
}
     124:	08 95       	ret

00000126 <_ZN16Adafruit_TSL2591D1Ev>:
     126:	08 95       	ret

00000128 <_ZN16Adafruit_TSL25919getSensorEP8sensor_t>:
     128:	0f 93       	push	r16
     12a:	1f 93       	push	r17
     12c:	cf 93       	push	r28
     12e:	df 93       	push	r29
     130:	8c 01       	movw	r16, r24
     132:	eb 01       	movw	r28, r22
     134:	88 e2       	ldi	r24, 0x28	; 40
     136:	fb 01       	movw	r30, r22
     138:	11 92       	st	Z+, r1
     13a:	8a 95       	dec	r24
     13c:	e9 f7       	brne	.-6      	; 0x138 <_ZN16Adafruit_TSL25919getSensorEP8sensor_t+0x10>
     13e:	4b e0       	ldi	r20, 0x0B	; 11
     140:	50 e0       	ldi	r21, 0x00	; 0
     142:	6a e0       	ldi	r22, 0x0A	; 10
     144:	71 e0       	ldi	r23, 0x01	; 1
     146:	ce 01       	movw	r24, r28
     148:	0e 94 a7 1c 	call	0x394e	; 0x394e <strncpy>
     14c:	1b 86       	std	Y+11, r1	; 0x0b
     14e:	81 e0       	ldi	r24, 0x01	; 1
     150:	90 e0       	ldi	r25, 0x00	; 0
     152:	a0 e0       	ldi	r26, 0x00	; 0
     154:	b0 e0       	ldi	r27, 0x00	; 0
     156:	8c 87       	std	Y+12, r24	; 0x0c
     158:	9d 87       	std	Y+13, r25	; 0x0d
     15a:	ae 87       	std	Y+14, r26	; 0x0e
     15c:	bf 87       	std	Y+15, r27	; 0x0f
     15e:	f8 01       	movw	r30, r16
     160:	85 81       	ldd	r24, Z+5	; 0x05
     162:	96 81       	ldd	r25, Z+6	; 0x06
     164:	a7 81       	ldd	r26, Z+7	; 0x07
     166:	b0 85       	ldd	r27, Z+8	; 0x08
     168:	88 8b       	std	Y+16, r24	; 0x10
     16a:	99 8b       	std	Y+17, r25	; 0x11
     16c:	aa 8b       	std	Y+18, r26	; 0x12
     16e:	bb 8b       	std	Y+19, r27	; 0x13
     170:	85 e0       	ldi	r24, 0x05	; 5
     172:	90 e0       	ldi	r25, 0x00	; 0
     174:	a0 e0       	ldi	r26, 0x00	; 0
     176:	b0 e0       	ldi	r27, 0x00	; 0
     178:	8c 8b       	std	Y+20, r24	; 0x14
     17a:	9d 8b       	std	Y+21, r25	; 0x15
     17c:	ae 8b       	std	Y+22, r26	; 0x16
     17e:	bf 8b       	std	Y+23, r27	; 0x17
     180:	1c a2       	std	Y+36, r1	; 0x24
     182:	1d a2       	std	Y+37, r1	; 0x25
     184:	1e a2       	std	Y+38, r1	; 0x26
     186:	1f a2       	std	Y+39, r1	; 0x27
     188:	80 e0       	ldi	r24, 0x00	; 0
     18a:	90 ee       	ldi	r25, 0xE0	; 224
     18c:	ab ea       	ldi	r26, 0xAB	; 171
     18e:	b7 e4       	ldi	r27, 0x47	; 71
     190:	88 8f       	std	Y+24, r24	; 0x18
     192:	99 8f       	std	Y+25, r25	; 0x19
     194:	aa 8f       	std	Y+26, r26	; 0x1a
     196:	bb 8f       	std	Y+27, r27	; 0x1b
     198:	1c 8e       	std	Y+28, r1	; 0x1c
     19a:	1d 8e       	std	Y+29, r1	; 0x1d
     19c:	1e 8e       	std	Y+30, r1	; 0x1e
     19e:	1f 8e       	std	Y+31, r1	; 0x1f
     1a0:	80 e0       	ldi	r24, 0x00	; 0
     1a2:	90 e0       	ldi	r25, 0x00	; 0
     1a4:	a0 e8       	ldi	r26, 0x80	; 128
     1a6:	bf e3       	ldi	r27, 0x3F	; 63
     1a8:	88 a3       	std	Y+32, r24	; 0x20
     1aa:	99 a3       	std	Y+33, r25	; 0x21
     1ac:	aa a3       	std	Y+34, r26	; 0x22
     1ae:	bb a3       	std	Y+35, r27	; 0x23
     1b0:	df 91       	pop	r29
     1b2:	cf 91       	pop	r28
     1b4:	1f 91       	pop	r17
     1b6:	0f 91       	pop	r16
     1b8:	08 95       	ret

000001ba <_Z6resumev>:
     1ba:	62 e1       	ldi	r22, 0x12	; 18
     1bc:	71 e0       	ldi	r23, 0x01	; 1
     1be:	89 eb       	ldi	r24, 0xB9	; 185
     1c0:	92 e0       	ldi	r25, 0x02	; 2
     1c2:	0c 94 88 0e 	jmp	0x1d10	; 0x1d10 <_ZN5Print7printlnEPKc>

000001c6 <_Z13alarm_triggerv>:
     1c6:	80 e0       	ldi	r24, 0x00	; 0
     1c8:	0e 94 a3 0f 	call	0x1f46	; 0x1f46 <detachInterrupt>
     1cc:	6d e1       	ldi	r22, 0x1D	; 29
     1ce:	71 e0       	ldi	r23, 0x01	; 1
     1d0:	89 eb       	ldi	r24, 0xB9	; 185
     1d2:	92 e0       	ldi	r25, 0x02	; 2
     1d4:	0c 94 88 0e 	jmp	0x1d10	; 0x1d10 <_ZN5Print7printlnEPKc>

000001d8 <_ZN16Adafruit_TSL2591D0Ev>:
     1d8:	0c 94 3a 0e 	jmp	0x1c74	; 0x1c74 <_ZdlPv>

000001dc <ass_i2c_delay_half>:
     1dc:	97 e0       	ldi	r25, 0x07	; 7

000001de <_Lidelay>:
     1de:	9a 95       	dec	r25
     1e0:	f1 f7       	brne	.-4      	; 0x1de <_Lidelay>
     1e2:	08 95       	ret
     1e4:	08 95       	ret

000001e6 <ass_i2c_wait_scl_high>:
     1e6:	30 9b       	sbis	0x06, 0	; 6
     1e8:	fe cf       	rjmp	.-4      	; 0x1e6 <ass_i2c_wait_scl_high>
     1ea:	a8 94       	cln
     1ec:	08 95       	ret
     1ee:	08 95       	ret

000001f0 <_Z8i2c_initv>:
     1f0:	39 98       	cbi	0x07, 1	; 7
     1f2:	38 98       	cbi	0x07, 0	; 7
     1f4:	41 98       	cbi	0x08, 1	; 8
     1f6:	40 98       	cbi	0x08, 0	; 8
     1f8:	88 27       	eor	r24, r24
     1fa:	99 27       	eor	r25, r25
     1fc:	31 9b       	sbis	0x06, 1	; 6
     1fe:	08 95       	ret
     200:	30 9b       	sbis	0x06, 0	; 6
     202:	08 95       	ret
     204:	81 e0       	ldi	r24, 0x01	; 1
     206:	08 95       	ret
     208:	81 e0       	ldi	r24, 0x01	; 1
     20a:	08 95       	ret

0000020c <_Z9i2c_starth>:
     20c:	30 9b       	sbis	0x06, 0	; 6
     20e:	eb df       	rcall	.-42     	; 0x1e6 <ass_i2c_wait_scl_high>
     210:	39 9a       	sbi	0x07, 1	; 7
     212:	e4 df       	rcall	.-56     	; 0x1dc <ass_i2c_delay_half>
     214:	1b d0       	rcall	.+54     	; 0x24c <ass_i2c_write>
     216:	08 95       	ret
     218:	81 e0       	ldi	r24, 0x01	; 1
     21a:	08 95       	ret

0000021c <_Z13i2c_rep_starth>:
     21c:	38 9a       	sbi	0x07, 0	; 7
     21e:	de df       	rcall	.-68     	; 0x1dc <ass_i2c_delay_half>
     220:	39 98       	cbi	0x07, 1	; 7
     222:	dc df       	rcall	.-72     	; 0x1dc <ass_i2c_delay_half>
     224:	38 98       	cbi	0x07, 0	; 7
     226:	da df       	rcall	.-76     	; 0x1dc <ass_i2c_delay_half>
     228:	30 9b       	sbis	0x06, 0	; 6
     22a:	dd df       	rcall	.-70     	; 0x1e6 <ass_i2c_wait_scl_high>
     22c:	39 9a       	sbi	0x07, 1	; 7
     22e:	d6 df       	rcall	.-84     	; 0x1dc <ass_i2c_delay_half>
     230:	0d d0       	rcall	.+26     	; 0x24c <ass_i2c_write>
     232:	08 95       	ret
     234:	81 e0       	ldi	r24, 0x01	; 1
     236:	08 95       	ret

00000238 <ass_i2c_stop>:
     238:	38 9a       	sbi	0x07, 0	; 7
     23a:	39 9a       	sbi	0x07, 1	; 7
     23c:	cf df       	rcall	.-98     	; 0x1dc <ass_i2c_delay_half>
     23e:	38 98       	cbi	0x07, 0	; 7
     240:	cd df       	rcall	.-102    	; 0x1dc <ass_i2c_delay_half>
     242:	30 9b       	sbis	0x06, 0	; 6
     244:	d0 df       	rcall	.-96     	; 0x1e6 <ass_i2c_wait_scl_high>
     246:	39 98       	cbi	0x07, 1	; 7
     248:	c9 df       	rcall	.-110    	; 0x1dc <ass_i2c_delay_half>
     24a:	08 95       	ret

0000024c <ass_i2c_write>:
     24c:	08 94       	sec
     24e:	88 1f       	adc	r24, r24
     250:	01 c0       	rjmp	.+2      	; 0x254 <_Li2c_write_first>

00000252 <_Li2c_write_bit>:
     252:	88 0f       	add	r24, r24

00000254 <_Li2c_write_first>:
     254:	b9 f0       	breq	.+46     	; 0x284 <_Li2c_get_ack>
     256:	38 9a       	sbi	0x07, 0	; 7
     258:	00 00       	nop
     25a:	00 00       	nop
     25c:	00 00       	nop
     25e:	18 f4       	brcc	.+6      	; 0x266 <_Li2c_write_low>
     260:	00 00       	nop
     262:	39 98       	cbi	0x07, 1	; 7
     264:	02 c0       	rjmp	.+4      	; 0x26a <_Li2c_write_high>

00000266 <_Li2c_write_low>:
     266:	39 9a       	sbi	0x07, 1	; 7
     268:	00 c0       	rjmp	.+0      	; 0x26a <_Li2c_write_high>

0000026a <_Li2c_write_high>:
     26a:	b8 df       	rcall	.-144    	; 0x1dc <ass_i2c_delay_half>
     26c:	38 98       	cbi	0x07, 0	; 7
     26e:	a8 94       	cln
     270:	00 00       	nop
     272:	00 00       	nop
     274:	00 00       	nop
     276:	30 9b       	sbis	0x06, 0	; 6
     278:	b6 df       	rcall	.-148    	; 0x1e6 <ass_i2c_wait_scl_high>
     27a:	12 f4       	brpl	.+4      	; 0x280 <_Ldelay_scl_high>

0000027c <_Li2c_write_return_false>:
     27c:	88 27       	eor	r24, r24
     27e:	12 c0       	rjmp	.+36     	; 0x2a4 <_Li2c_write_return>

00000280 <_Ldelay_scl_high>:
     280:	ad df       	rcall	.-166    	; 0x1dc <ass_i2c_delay_half>
     282:	e7 cf       	rjmp	.-50     	; 0x252 <_Li2c_write_bit>

00000284 <_Li2c_get_ack>:
     284:	38 9a       	sbi	0x07, 0	; 7
     286:	00 00       	nop
     288:	00 00       	nop
     28a:	39 98       	cbi	0x07, 1	; 7
     28c:	a7 df       	rcall	.-178    	; 0x1dc <ass_i2c_delay_half>
     28e:	99 27       	eor	r25, r25
     290:	88 27       	eor	r24, r24
     292:	38 98       	cbi	0x07, 0	; 7

00000294 <_Li2c_ack_wait>:
     294:	a8 94       	cln
     296:	00 00       	nop
     298:	30 9b       	sbis	0x06, 0	; 6
     29a:	a5 df       	rcall	.-182    	; 0x1e6 <ass_i2c_wait_scl_high>
     29c:	7a f3       	brmi	.-34     	; 0x27c <_Li2c_write_return_false>
     29e:	31 9b       	sbis	0x06, 1	; 6
     2a0:	81 e0       	ldi	r24, 0x01	; 1
     2a2:	9c df       	rcall	.-200    	; 0x1dc <ass_i2c_delay_half>

000002a4 <_Li2c_write_return>:
     2a4:	00 00       	nop
     2a6:	00 00       	nop
     2a8:	38 9a       	sbi	0x07, 0	; 7
     2aa:	08 95       	ret
     2ac:	81 e0       	ldi	r24, 0x01	; 1
     2ae:	08 95       	ret

000002b0 <_Z8i2c_readb>:
     2b0:	71 e0       	ldi	r23, 0x01	; 1

000002b2 <_Li2c_read_bit>:
     2b2:	38 9a       	sbi	0x07, 0	; 7
     2b4:	39 98       	cbi	0x07, 1	; 7
     2b6:	00 00       	nop
     2b8:	00 00       	nop
     2ba:	00 00       	nop
     2bc:	8f df       	rcall	.-226    	; 0x1dc <ass_i2c_delay_half>
     2be:	38 98       	cbi	0x07, 0	; 7
     2c0:	8d df       	rcall	.-230    	; 0x1dc <ass_i2c_delay_half>
     2c2:	a8 94       	cln
     2c4:	00 00       	nop
     2c6:	00 00       	nop
     2c8:	00 00       	nop
     2ca:	30 9b       	sbis	0x06, 0	; 6
     2cc:	8c df       	rcall	.-232    	; 0x1e6 <ass_i2c_wait_scl_high>
     2ce:	b2 f0       	brmi	.+44     	; 0x2fc <_Li2c_read_return>
     2d0:	88 94       	clc
     2d2:	31 99       	sbic	0x06, 1	; 6
     2d4:	08 94       	sec
     2d6:	77 1f       	adc	r23, r23
     2d8:	60 f7       	brcc	.-40     	; 0x2b2 <_Li2c_read_bit>

000002da <_Li2c_put_ack>:
     2da:	38 9a       	sbi	0x07, 0	; 7
     2dc:	80 30       	cpi	r24, 0x00	; 0
     2de:	11 f0       	breq	.+4      	; 0x2e4 <_Li2c_put_ack_low>
     2e0:	39 98       	cbi	0x07, 1	; 7
     2e2:	01 c0       	rjmp	.+2      	; 0x2e6 <_Li2c_put_ack_high>

000002e4 <_Li2c_put_ack_low>:
     2e4:	39 9a       	sbi	0x07, 1	; 7

000002e6 <_Li2c_put_ack_high>:
     2e6:	00 00       	nop
     2e8:	00 00       	nop
     2ea:	00 00       	nop
     2ec:	77 df       	rcall	.-274    	; 0x1dc <ass_i2c_delay_half>
     2ee:	38 98       	cbi	0x07, 0	; 7
     2f0:	a8 94       	cln
     2f2:	00 00       	nop
     2f4:	00 00       	nop
     2f6:	30 9b       	sbis	0x06, 0	; 6
     2f8:	76 df       	rcall	.-276    	; 0x1e6 <ass_i2c_wait_scl_high>
     2fa:	70 df       	rcall	.-288    	; 0x1dc <ass_i2c_delay_half>

000002fc <_Li2c_read_return>:
     2fc:	00 00       	nop
     2fe:	00 00       	nop
     300:	38 9a       	sbi	0x07, 0	; 7
     302:	87 2f       	mov	r24, r23
     304:	99 27       	eor	r25, r25
     306:	08 95       	ret
     308:	80 e2       	ldi	r24, 0x20	; 32
     30a:	08 95       	ret

0000030c <_ZN16Adafruit_TSL259112calculateLuxEjj>:
     30c:	4f 92       	push	r4
     30e:	5f 92       	push	r5
     310:	6f 92       	push	r6
     312:	7f 92       	push	r7
     314:	8f 92       	push	r8
     316:	9f 92       	push	r9
     318:	af 92       	push	r10
     31a:	bf 92       	push	r11
     31c:	cf 92       	push	r12
     31e:	df 92       	push	r13
     320:	ef 92       	push	r14
     322:	ff 92       	push	r15
     324:	0f 93       	push	r16
     326:	1f 93       	push	r17
     328:	cf 93       	push	r28
     32a:	df 93       	push	r29
     32c:	dc 01       	movw	r26, r24
     32e:	8b 01       	movw	r16, r22
     330:	ea 01       	movw	r28, r20
     332:	6f 3f       	cpi	r22, 0xFF	; 255
     334:	7f 4f       	sbci	r23, 0xFF	; 255
     336:	09 f4       	brne	.+2      	; 0x33a <_ZN16Adafruit_TSL259112calculateLuxEjj+0x2e>
     338:	96 c0       	rjmp	.+300    	; 0x466 <__FUSE_REGION_LENGTH__+0x66>
     33a:	4f 3f       	cpi	r20, 0xFF	; 255
     33c:	5f 4f       	sbci	r21, 0xFF	; 255
     33e:	09 f4       	brne	.+2      	; 0x342 <_ZN16Adafruit_TSL259112calculateLuxEjj+0x36>
     340:	92 c0       	rjmp	.+292    	; 0x466 <__FUSE_REGION_LENGTH__+0x66>
     342:	13 96       	adiw	r26, 0x03	; 3
     344:	ec 91       	ld	r30, X
     346:	13 97       	sbiw	r26, 0x03	; 3
     348:	e1 50       	subi	r30, 0x01	; 1
     34a:	e5 30       	cpi	r30, 0x05	; 5
     34c:	58 f4       	brcc	.+22     	; 0x364 <_ZN16Adafruit_TSL259112calculateLuxEjj+0x58>
     34e:	84 e0       	ldi	r24, 0x04	; 4
     350:	e8 9f       	mul	r30, r24
     352:	f0 01       	movw	r30, r0
     354:	11 24       	eor	r1, r1
     356:	e5 52       	subi	r30, 0x25	; 37
     358:	fe 4f       	sbci	r31, 0xFE	; 254
     35a:	60 81       	ld	r22, Z
     35c:	71 81       	ldd	r23, Z+1	; 0x01
     35e:	82 81       	ldd	r24, Z+2	; 0x02
     360:	93 81       	ldd	r25, Z+3	; 0x03
     362:	04 c0       	rjmp	.+8      	; 0x36c <_ZN16Adafruit_TSL259112calculateLuxEjj+0x60>
     364:	60 e0       	ldi	r22, 0x00	; 0
     366:	70 e0       	ldi	r23, 0x00	; 0
     368:	88 ec       	ldi	r24, 0xC8	; 200
     36a:	92 e4       	ldi	r25, 0x42	; 66
     36c:	14 96       	adiw	r26, 0x04	; 4
     36e:	2c 91       	ld	r18, X
     370:	20 31       	cpi	r18, 0x10	; 16
     372:	69 f0       	breq	.+26     	; 0x38e <_ZN16Adafruit_TSL259112calculateLuxEjj+0x82>
     374:	18 f4       	brcc	.+6      	; 0x37c <_ZN16Adafruit_TSL259112calculateLuxEjj+0x70>
     376:	22 23       	and	r18, r18
     378:	c9 f0       	breq	.+50     	; 0x3ac <_ZN16Adafruit_TSL259112calculateLuxEjj+0xa0>
     37a:	13 c0       	rjmp	.+38     	; 0x3a2 <_ZN16Adafruit_TSL259112calculateLuxEjj+0x96>
     37c:	20 32       	cpi	r18, 0x20	; 32
     37e:	61 f0       	breq	.+24     	; 0x398 <_ZN16Adafruit_TSL259112calculateLuxEjj+0x8c>
     380:	20 33       	cpi	r18, 0x30	; 48
     382:	79 f4       	brne	.+30     	; 0x3a2 <_ZN16Adafruit_TSL259112calculateLuxEjj+0x96>
     384:	20 e0       	ldi	r18, 0x00	; 0
     386:	30 e5       	ldi	r19, 0x50	; 80
     388:	45 ef       	ldi	r20, 0xF5	; 245
     38a:	55 e4       	ldi	r21, 0x45	; 69
     38c:	13 c0       	rjmp	.+38     	; 0x3b4 <_ZN16Adafruit_TSL259112calculateLuxEjj+0xa8>
     38e:	20 e0       	ldi	r18, 0x00	; 0
     390:	30 e0       	ldi	r19, 0x00	; 0
     392:	48 ec       	ldi	r20, 0xC8	; 200
     394:	51 e4       	ldi	r21, 0x41	; 65
     396:	0e c0       	rjmp	.+28     	; 0x3b4 <_ZN16Adafruit_TSL259112calculateLuxEjj+0xa8>
     398:	20 e0       	ldi	r18, 0x00	; 0
     39a:	30 e8       	ldi	r19, 0x80	; 128
     39c:	44 ed       	ldi	r20, 0xD4	; 212
     39e:	53 e4       	ldi	r21, 0x43	; 67
     3a0:	09 c0       	rjmp	.+18     	; 0x3b4 <_ZN16Adafruit_TSL259112calculateLuxEjj+0xa8>
     3a2:	20 e0       	ldi	r18, 0x00	; 0
     3a4:	30 e0       	ldi	r19, 0x00	; 0
     3a6:	40 e8       	ldi	r20, 0x80	; 128
     3a8:	5f e3       	ldi	r21, 0x3F	; 63
     3aa:	04 c0       	rjmp	.+8      	; 0x3b4 <_ZN16Adafruit_TSL259112calculateLuxEjj+0xa8>
     3ac:	2a e0       	ldi	r18, 0x0A	; 10
     3ae:	37 ed       	ldi	r19, 0xD7	; 215
     3b0:	43 e8       	ldi	r20, 0x83	; 131
     3b2:	5f e3       	ldi	r21, 0x3F	; 63
     3b4:	0e 94 08 0c 	call	0x1810	; 0x1810 <__mulsf3>
     3b8:	20 e0       	ldi	r18, 0x00	; 0
     3ba:	30 ec       	ldi	r19, 0xC0	; 192
     3bc:	47 e3       	ldi	r20, 0x37	; 55
     3be:	54 e4       	ldi	r21, 0x44	; 68
     3c0:	0e 94 b0 0a 	call	0x1560	; 0x1560 <__divsf3>
     3c4:	6b 01       	movw	r12, r22
     3c6:	7c 01       	movw	r14, r24
     3c8:	b8 01       	movw	r22, r16
     3ca:	80 e0       	ldi	r24, 0x00	; 0
     3cc:	90 e0       	ldi	r25, 0x00	; 0
     3ce:	0e 94 51 0b 	call	0x16a2	; 0x16a2 <__floatunsisf>
     3d2:	2b 01       	movw	r4, r22
     3d4:	3c 01       	movw	r6, r24
     3d6:	be 01       	movw	r22, r28
     3d8:	80 e0       	ldi	r24, 0x00	; 0
     3da:	90 e0       	ldi	r25, 0x00	; 0
     3dc:	0e 94 51 0b 	call	0x16a2	; 0x16a2 <__floatunsisf>
     3e0:	4b 01       	movw	r8, r22
     3e2:	5c 01       	movw	r10, r24
     3e4:	25 e8       	ldi	r18, 0x85	; 133
     3e6:	3b ee       	ldi	r19, 0xEB	; 235
     3e8:	41 ed       	ldi	r20, 0xD1	; 209
     3ea:	5f e3       	ldi	r21, 0x3F	; 63
     3ec:	0e 94 08 0c 	call	0x1810	; 0x1810 <__mulsf3>
     3f0:	9b 01       	movw	r18, r22
     3f2:	ac 01       	movw	r20, r24
     3f4:	c3 01       	movw	r24, r6
     3f6:	b2 01       	movw	r22, r4
     3f8:	0e 94 3e 0a 	call	0x147c	; 0x147c <__subsf3>
     3fc:	a7 01       	movw	r20, r14
     3fe:	96 01       	movw	r18, r12
     400:	0e 94 b0 0a 	call	0x1560	; 0x1560 <__divsf3>
     404:	16 2f       	mov	r17, r22
     406:	d7 2f       	mov	r29, r23
     408:	c8 2f       	mov	r28, r24
     40a:	09 2f       	mov	r16, r25
     40c:	2d e3       	ldi	r18, 0x3D	; 61
     40e:	3a e0       	ldi	r19, 0x0A	; 10
     410:	47 e1       	ldi	r20, 0x17	; 23
     412:	5f e3       	ldi	r21, 0x3F	; 63
     414:	c3 01       	movw	r24, r6
     416:	b2 01       	movw	r22, r4
     418:	0e 94 08 0c 	call	0x1810	; 0x1810 <__mulsf3>
     41c:	2b 01       	movw	r4, r22
     41e:	3c 01       	movw	r6, r24
     420:	26 ef       	ldi	r18, 0xF6	; 246
     422:	38 e2       	ldi	r19, 0x28	; 40
     424:	4c e5       	ldi	r20, 0x5C	; 92
     426:	5f e3       	ldi	r21, 0x3F	; 63
     428:	c5 01       	movw	r24, r10
     42a:	b4 01       	movw	r22, r8
     42c:	0e 94 08 0c 	call	0x1810	; 0x1810 <__mulsf3>
     430:	9b 01       	movw	r18, r22
     432:	ac 01       	movw	r20, r24
     434:	c3 01       	movw	r24, r6
     436:	b2 01       	movw	r22, r4
     438:	0e 94 3e 0a 	call	0x147c	; 0x147c <__subsf3>
     43c:	a7 01       	movw	r20, r14
     43e:	96 01       	movw	r18, r12
     440:	0e 94 b0 0a 	call	0x1560	; 0x1560 <__divsf3>
     444:	6b 01       	movw	r12, r22
     446:	7c 01       	movw	r14, r24
     448:	9b 01       	movw	r18, r22
     44a:	ac 01       	movw	r20, r24
     44c:	61 2f       	mov	r22, r17
     44e:	7d 2f       	mov	r23, r29
     450:	8c 2f       	mov	r24, r28
     452:	90 2f       	mov	r25, r16
     454:	0e 94 03 0c 	call	0x1806	; 0x1806 <__gesf2>
     458:	18 16       	cp	r1, r24
     45a:	4c f0       	brlt	.+18     	; 0x46e <__FUSE_REGION_LENGTH__+0x6e>
     45c:	1c 2d       	mov	r17, r12
     45e:	dd 2d       	mov	r29, r13
     460:	ce 2d       	mov	r28, r14
     462:	0f 2d       	mov	r16, r15
     464:	04 c0       	rjmp	.+8      	; 0x46e <__FUSE_REGION_LENGTH__+0x6e>
     466:	10 e0       	ldi	r17, 0x00	; 0
     468:	d0 e0       	ldi	r29, 0x00	; 0
     46a:	c0 e0       	ldi	r28, 0x00	; 0
     46c:	00 e0       	ldi	r16, 0x00	; 0
     46e:	61 2f       	mov	r22, r17
     470:	7d 2f       	mov	r23, r29
     472:	8c 2f       	mov	r24, r28
     474:	90 2f       	mov	r25, r16
     476:	df 91       	pop	r29
     478:	cf 91       	pop	r28
     47a:	1f 91       	pop	r17
     47c:	0f 91       	pop	r16
     47e:	ff 90       	pop	r15
     480:	ef 90       	pop	r14
     482:	df 90       	pop	r13
     484:	cf 90       	pop	r12
     486:	bf 90       	pop	r11
     488:	af 90       	pop	r10
     48a:	9f 90       	pop	r9
     48c:	8f 90       	pop	r8
     48e:	7f 90       	pop	r7
     490:	6f 90       	pop	r6
     492:	5f 90       	pop	r5
     494:	4f 90       	pop	r4
     496:	08 95       	ret

00000498 <_ZN16Adafruit_TSL25915read8Eh>:
     498:	cf 93       	push	r28
     49a:	c6 2f       	mov	r28, r22
     49c:	82 e5       	ldi	r24, 0x52	; 82
     49e:	0e 94 06 01 	call	0x20c	; 0x20c <_Z9i2c_starth>
     4a2:	8c 2f       	mov	r24, r28
     4a4:	80 6a       	ori	r24, 0xA0	; 160
     4a6:	0e 94 26 01 	call	0x24c	; 0x24c <ass_i2c_write>
     4aa:	83 e5       	ldi	r24, 0x53	; 83
     4ac:	0e 94 0e 01 	call	0x21c	; 0x21c <_Z13i2c_rep_starth>
     4b0:	81 e0       	ldi	r24, 0x01	; 1
     4b2:	0e 94 58 01 	call	0x2b0	; 0x2b0 <_Z8i2c_readb>
     4b6:	c8 2f       	mov	r28, r24
     4b8:	0e 94 1c 01 	call	0x238	; 0x238 <ass_i2c_stop>
     4bc:	8c 2f       	mov	r24, r28
     4be:	cf 91       	pop	r28
     4c0:	08 95       	ret

000004c2 <_ZN16Adafruit_TSL25916read16Eh>:
     4c2:	1f 93       	push	r17
     4c4:	cf 93       	push	r28
     4c6:	df 93       	push	r29
     4c8:	c6 2f       	mov	r28, r22
     4ca:	82 e5       	ldi	r24, 0x52	; 82
     4cc:	0e 94 06 01 	call	0x20c	; 0x20c <_Z9i2c_starth>
     4d0:	8c 2f       	mov	r24, r28
     4d2:	0e 94 26 01 	call	0x24c	; 0x24c <ass_i2c_write>
     4d6:	83 e5       	ldi	r24, 0x53	; 83
     4d8:	0e 94 0e 01 	call	0x21c	; 0x21c <_Z13i2c_rep_starth>
     4dc:	80 e0       	ldi	r24, 0x00	; 0
     4de:	0e 94 58 01 	call	0x2b0	; 0x2b0 <_Z8i2c_readb>
     4e2:	18 2f       	mov	r17, r24
     4e4:	81 e0       	ldi	r24, 0x01	; 1
     4e6:	0e 94 58 01 	call	0x2b0	; 0x2b0 <_Z8i2c_readb>
     4ea:	c8 2f       	mov	r28, r24
     4ec:	d0 e0       	ldi	r29, 0x00	; 0
     4ee:	0e 94 1c 01 	call	0x238	; 0x238 <ass_i2c_stop>
     4f2:	9c 2f       	mov	r25, r28
     4f4:	88 27       	eor	r24, r24
     4f6:	81 2b       	or	r24, r17
     4f8:	df 91       	pop	r29
     4fa:	cf 91       	pop	r28
     4fc:	1f 91       	pop	r17
     4fe:	08 95       	ret

00000500 <_ZN16Adafruit_TSL25916write8Ehh>:
     500:	cf 93       	push	r28
     502:	df 93       	push	r29
     504:	d6 2f       	mov	r29, r22
     506:	c4 2f       	mov	r28, r20
     508:	82 e5       	ldi	r24, 0x52	; 82
     50a:	0e 94 06 01 	call	0x20c	; 0x20c <_Z9i2c_starth>
     50e:	8d 2f       	mov	r24, r29
     510:	0e 94 26 01 	call	0x24c	; 0x24c <ass_i2c_write>
     514:	8c 2f       	mov	r24, r28
     516:	0e 94 26 01 	call	0x24c	; 0x24c <ass_i2c_write>
     51a:	df 91       	pop	r29
     51c:	cf 91       	pop	r28
     51e:	0c 94 1c 01 	jmp	0x238	; 0x238 <ass_i2c_stop>

00000522 <_ZN16Adafruit_TSL25917setGainE13tsl2591Gain_t>:
     522:	1f 93       	push	r17
     524:	cf 93       	push	r28
     526:	df 93       	push	r29
     528:	ec 01       	movw	r28, r24
     52a:	16 2f       	mov	r17, r22
     52c:	89 85       	ldd	r24, Y+9	; 0x09
     52e:	88 23       	and	r24, r24
     530:	81 f0       	breq	.+32     	; 0x552 <_ZN16Adafruit_TSL25917setGainE13tsl2591Gain_t+0x30>
     532:	ce 01       	movw	r24, r28
     534:	0e 94 d0 02 	call	0x5a0	; 0x5a0 <_ZN16Adafruit_TSL25916enableEv>
     538:	1c 83       	std	Y+4, r17	; 0x04
     53a:	4b 81       	ldd	r20, Y+3	; 0x03
     53c:	41 2b       	or	r20, r17
     53e:	61 ea       	ldi	r22, 0xA1	; 161
     540:	ce 01       	movw	r24, r28
     542:	0e 94 80 02 	call	0x500	; 0x500 <_ZN16Adafruit_TSL25916write8Ehh>
     546:	ce 01       	movw	r24, r28
     548:	df 91       	pop	r29
     54a:	cf 91       	pop	r28
     54c:	1f 91       	pop	r17
     54e:	0c 94 e5 02 	jmp	0x5ca	; 0x5ca <_ZN16Adafruit_TSL25917disableEv>
     552:	ce 01       	movw	r24, r28
     554:	0e 94 b2 02 	call	0x564	; 0x564 <_ZN16Adafruit_TSL25915beginEv>
     558:	81 11       	cpse	r24, r1
     55a:	eb cf       	rjmp	.-42     	; 0x532 <_ZN16Adafruit_TSL25917setGainE13tsl2591Gain_t+0x10>
     55c:	df 91       	pop	r29
     55e:	cf 91       	pop	r28
     560:	1f 91       	pop	r17
     562:	08 95       	ret

00000564 <_ZN16Adafruit_TSL25915beginEv>:
     564:	cf 93       	push	r28
     566:	df 93       	push	r29
     568:	ec 01       	movw	r28, r24
     56a:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <_Z8i2c_initv>
     56e:	62 e1       	ldi	r22, 0x12	; 18
     570:	ce 01       	movw	r24, r28
     572:	0e 94 4c 02 	call	0x498	; 0x498 <_ZN16Adafruit_TSL25915read8Eh>
     576:	80 35       	cpi	r24, 0x50	; 80
     578:	79 f4       	brne	.+30     	; 0x598 <_ZN16Adafruit_TSL25915beginEv+0x34>
     57a:	81 e0       	ldi	r24, 0x01	; 1
     57c:	89 87       	std	Y+9, r24	; 0x09
     57e:	6b 81       	ldd	r22, Y+3	; 0x03
     580:	ce 01       	movw	r24, r28
     582:	0e 94 fa 02 	call	0x5f4	; 0x5f4 <_ZN16Adafruit_TSL25919setTimingE24tsl2591IntegrationTime_t>
     586:	6c 81       	ldd	r22, Y+4	; 0x04
     588:	ce 01       	movw	r24, r28
     58a:	0e 94 91 02 	call	0x522	; 0x522 <_ZN16Adafruit_TSL25917setGainE13tsl2591Gain_t>
     58e:	ce 01       	movw	r24, r28
     590:	0e 94 e5 02 	call	0x5ca	; 0x5ca <_ZN16Adafruit_TSL25917disableEv>
     594:	81 e0       	ldi	r24, 0x01	; 1
     596:	01 c0       	rjmp	.+2      	; 0x59a <_ZN16Adafruit_TSL25915beginEv+0x36>
     598:	80 e0       	ldi	r24, 0x00	; 0
     59a:	df 91       	pop	r29
     59c:	cf 91       	pop	r28
     59e:	08 95       	ret

000005a0 <_ZN16Adafruit_TSL25916enableEv>:
     5a0:	cf 93       	push	r28
     5a2:	df 93       	push	r29
     5a4:	ec 01       	movw	r28, r24
     5a6:	89 85       	ldd	r24, Y+9	; 0x09
     5a8:	88 23       	and	r24, r24
     5aa:	39 f0       	breq	.+14     	; 0x5ba <_ZN16Adafruit_TSL25916enableEv+0x1a>
     5ac:	43 e1       	ldi	r20, 0x13	; 19
     5ae:	60 ea       	ldi	r22, 0xA0	; 160
     5b0:	ce 01       	movw	r24, r28
     5b2:	df 91       	pop	r29
     5b4:	cf 91       	pop	r28
     5b6:	0c 94 80 02 	jmp	0x500	; 0x500 <_ZN16Adafruit_TSL25916write8Ehh>
     5ba:	ce 01       	movw	r24, r28
     5bc:	0e 94 b2 02 	call	0x564	; 0x564 <_ZN16Adafruit_TSL25915beginEv>
     5c0:	81 11       	cpse	r24, r1
     5c2:	f4 cf       	rjmp	.-24     	; 0x5ac <_ZN16Adafruit_TSL25916enableEv+0xc>
     5c4:	df 91       	pop	r29
     5c6:	cf 91       	pop	r28
     5c8:	08 95       	ret

000005ca <_ZN16Adafruit_TSL25917disableEv>:
     5ca:	cf 93       	push	r28
     5cc:	df 93       	push	r29
     5ce:	ec 01       	movw	r28, r24
     5d0:	89 85       	ldd	r24, Y+9	; 0x09
     5d2:	88 23       	and	r24, r24
     5d4:	39 f0       	breq	.+14     	; 0x5e4 <_ZN16Adafruit_TSL25917disableEv+0x1a>
     5d6:	40 e0       	ldi	r20, 0x00	; 0
     5d8:	60 ea       	ldi	r22, 0xA0	; 160
     5da:	ce 01       	movw	r24, r28
     5dc:	df 91       	pop	r29
     5de:	cf 91       	pop	r28
     5e0:	0c 94 80 02 	jmp	0x500	; 0x500 <_ZN16Adafruit_TSL25916write8Ehh>
     5e4:	ce 01       	movw	r24, r28
     5e6:	0e 94 b2 02 	call	0x564	; 0x564 <_ZN16Adafruit_TSL25915beginEv>
     5ea:	81 11       	cpse	r24, r1
     5ec:	f4 cf       	rjmp	.-24     	; 0x5d6 <_ZN16Adafruit_TSL25917disableEv+0xc>
     5ee:	df 91       	pop	r29
     5f0:	cf 91       	pop	r28
     5f2:	08 95       	ret

000005f4 <_ZN16Adafruit_TSL25919setTimingE24tsl2591IntegrationTime_t>:
     5f4:	1f 93       	push	r17
     5f6:	cf 93       	push	r28
     5f8:	df 93       	push	r29
     5fa:	ec 01       	movw	r28, r24
     5fc:	16 2f       	mov	r17, r22
     5fe:	89 85       	ldd	r24, Y+9	; 0x09
     600:	88 23       	and	r24, r24
     602:	81 f0       	breq	.+32     	; 0x624 <_ZN16Adafruit_TSL25919setTimingE24tsl2591IntegrationTime_t+0x30>
     604:	ce 01       	movw	r24, r28
     606:	0e 94 d0 02 	call	0x5a0	; 0x5a0 <_ZN16Adafruit_TSL25916enableEv>
     60a:	1b 83       	std	Y+3, r17	; 0x03
     60c:	4c 81       	ldd	r20, Y+4	; 0x04
     60e:	41 2b       	or	r20, r17
     610:	61 ea       	ldi	r22, 0xA1	; 161
     612:	ce 01       	movw	r24, r28
     614:	0e 94 80 02 	call	0x500	; 0x500 <_ZN16Adafruit_TSL25916write8Ehh>
     618:	ce 01       	movw	r24, r28
     61a:	df 91       	pop	r29
     61c:	cf 91       	pop	r28
     61e:	1f 91       	pop	r17
     620:	0c 94 e5 02 	jmp	0x5ca	; 0x5ca <_ZN16Adafruit_TSL25917disableEv>
     624:	ce 01       	movw	r24, r28
     626:	0e 94 b2 02 	call	0x564	; 0x564 <_ZN16Adafruit_TSL25915beginEv>
     62a:	81 11       	cpse	r24, r1
     62c:	eb cf       	rjmp	.-42     	; 0x604 <_ZN16Adafruit_TSL25919setTimingE24tsl2591IntegrationTime_t+0x10>
     62e:	df 91       	pop	r29
     630:	cf 91       	pop	r28
     632:	1f 91       	pop	r17
     634:	08 95       	ret

00000636 <_ZN16Adafruit_TSL259117getFullLuminosityEv>:
     636:	8f 92       	push	r8
     638:	9f 92       	push	r9
     63a:	af 92       	push	r10
     63c:	bf 92       	push	r11
     63e:	cf 92       	push	r12
     640:	df 92       	push	r13
     642:	ef 92       	push	r14
     644:	ff 92       	push	r15
     646:	cf 93       	push	r28
     648:	df 93       	push	r29
     64a:	ec 01       	movw	r28, r24
     64c:	89 85       	ldd	r24, Y+9	; 0x09
     64e:	88 23       	and	r24, r24
     650:	29 f0       	breq	.+10     	; 0x65c <_ZN16Adafruit_TSL259117getFullLuminosityEv+0x26>
     652:	ce 01       	movw	r24, r28
     654:	0e 94 d0 02 	call	0x5a0	; 0x5a0 <_ZN16Adafruit_TSL25916enableEv>
     658:	f1 2c       	mov	r15, r1
     65a:	09 c0       	rjmp	.+18     	; 0x66e <_ZN16Adafruit_TSL259117getFullLuminosityEv+0x38>
     65c:	ce 01       	movw	r24, r28
     65e:	0e 94 b2 02 	call	0x564	; 0x564 <_ZN16Adafruit_TSL25915beginEv>
     662:	81 11       	cpse	r24, r1
     664:	f6 cf       	rjmp	.-20     	; 0x652 <_ZN16Adafruit_TSL259117getFullLuminosityEv+0x1c>
     666:	60 e0       	ldi	r22, 0x00	; 0
     668:	70 e0       	ldi	r23, 0x00	; 0
     66a:	90 e0       	ldi	r25, 0x00	; 0
     66c:	25 c0       	rjmp	.+74     	; 0x6b8 <_ZN16Adafruit_TSL259117getFullLuminosityEv+0x82>
     66e:	8b 81       	ldd	r24, Y+3	; 0x03
     670:	8f 15       	cp	r24, r15
     672:	40 f0       	brcs	.+16     	; 0x684 <_ZN16Adafruit_TSL259117getFullLuminosityEv+0x4e>
     674:	68 e7       	ldi	r22, 0x78	; 120
     676:	70 e0       	ldi	r23, 0x00	; 0
     678:	80 e0       	ldi	r24, 0x00	; 0
     67a:	90 e0       	ldi	r25, 0x00	; 0
     67c:	0e 94 7e 10 	call	0x20fc	; 0x20fc <delay>
     680:	f3 94       	inc	r15
     682:	f5 cf       	rjmp	.-22     	; 0x66e <_ZN16Adafruit_TSL259117getFullLuminosityEv+0x38>
     684:	66 eb       	ldi	r22, 0xB6	; 182
     686:	ce 01       	movw	r24, r28
     688:	0e 94 61 02 	call	0x4c2	; 0x4c2 <_ZN16Adafruit_TSL25916read16Eh>
     68c:	6c 01       	movw	r12, r24
     68e:	e1 2c       	mov	r14, r1
     690:	f1 2c       	mov	r15, r1
     692:	56 01       	movw	r10, r12
     694:	99 24       	eor	r9, r9
     696:	88 24       	eor	r8, r8
     698:	64 eb       	ldi	r22, 0xB4	; 180
     69a:	ce 01       	movw	r24, r28
     69c:	0e 94 61 02 	call	0x4c2	; 0x4c2 <_ZN16Adafruit_TSL25916read16Eh>
     6a0:	6c 01       	movw	r12, r24
     6a2:	e1 2c       	mov	r14, r1
     6a4:	f1 2c       	mov	r15, r1
     6a6:	c8 28       	or	r12, r8
     6a8:	d9 28       	or	r13, r9
     6aa:	ea 28       	or	r14, r10
     6ac:	fb 28       	or	r15, r11
     6ae:	ce 01       	movw	r24, r28
     6b0:	0e 94 e5 02 	call	0x5ca	; 0x5ca <_ZN16Adafruit_TSL25917disableEv>
     6b4:	b6 01       	movw	r22, r12
     6b6:	c7 01       	movw	r24, r14
     6b8:	df 91       	pop	r29
     6ba:	cf 91       	pop	r28
     6bc:	ff 90       	pop	r15
     6be:	ef 90       	pop	r14
     6c0:	df 90       	pop	r13
     6c2:	cf 90       	pop	r12
     6c4:	bf 90       	pop	r11
     6c6:	af 90       	pop	r10
     6c8:	9f 90       	pop	r9
     6ca:	8f 90       	pop	r8
     6cc:	08 95       	ret

000006ce <_ZN16Adafruit_TSL25918getEventEP15sensors_event_t>:
     6ce:	cf 92       	push	r12
     6d0:	df 92       	push	r13
     6d2:	ef 92       	push	r14
     6d4:	ff 92       	push	r15
     6d6:	0f 93       	push	r16
     6d8:	1f 93       	push	r17
     6da:	cf 93       	push	r28
     6dc:	df 93       	push	r29
     6de:	8c 01       	movw	r16, r24
     6e0:	eb 01       	movw	r28, r22
     6e2:	0e 94 1b 03 	call	0x636	; 0x636 <_ZN16Adafruit_TSL259117getFullLuminosityEv>
     6e6:	c8 01       	movw	r24, r16
     6e8:	0e 94 1b 03 	call	0x636	; 0x636 <_ZN16Adafruit_TSL259117getFullLuminosityEv>
     6ec:	6b 01       	movw	r12, r22
     6ee:	7c 01       	movw	r14, r24
     6f0:	84 e2       	ldi	r24, 0x24	; 36
     6f2:	fe 01       	movw	r30, r28
     6f4:	11 92       	st	Z+, r1
     6f6:	8a 95       	dec	r24
     6f8:	e9 f7       	brne	.-6      	; 0x6f4 <_ZN16Adafruit_TSL25918getEventEP15sensors_event_t+0x26>
     6fa:	84 e2       	ldi	r24, 0x24	; 36
     6fc:	90 e0       	ldi	r25, 0x00	; 0
     6fe:	a0 e0       	ldi	r26, 0x00	; 0
     700:	b0 e0       	ldi	r27, 0x00	; 0
     702:	88 83       	st	Y, r24
     704:	99 83       	std	Y+1, r25	; 0x01
     706:	aa 83       	std	Y+2, r26	; 0x02
     708:	bb 83       	std	Y+3, r27	; 0x03
     70a:	f8 01       	movw	r30, r16
     70c:	85 81       	ldd	r24, Z+5	; 0x05
     70e:	96 81       	ldd	r25, Z+6	; 0x06
     710:	a7 81       	ldd	r26, Z+7	; 0x07
     712:	b0 85       	ldd	r27, Z+8	; 0x08
     714:	8c 83       	std	Y+4, r24	; 0x04
     716:	9d 83       	std	Y+5, r25	; 0x05
     718:	ae 83       	std	Y+6, r26	; 0x06
     71a:	bf 83       	std	Y+7, r27	; 0x07
     71c:	85 e0       	ldi	r24, 0x05	; 5
     71e:	90 e0       	ldi	r25, 0x00	; 0
     720:	a0 e0       	ldi	r26, 0x00	; 0
     722:	b0 e0       	ldi	r27, 0x00	; 0
     724:	88 87       	std	Y+8, r24	; 0x08
     726:	99 87       	std	Y+9, r25	; 0x09
     728:	aa 87       	std	Y+10, r26	; 0x0a
     72a:	bb 87       	std	Y+11, r27	; 0x0b
     72c:	0e 94 4d 10 	call	0x209a	; 0x209a <millis>
     730:	68 8b       	std	Y+16, r22	; 0x10
     732:	79 8b       	std	Y+17, r23	; 0x11
     734:	8a 8b       	std	Y+18, r24	; 0x12
     736:	9b 8b       	std	Y+19, r25	; 0x13
     738:	a7 01       	movw	r20, r14
     73a:	66 27       	eor	r22, r22
     73c:	77 27       	eor	r23, r23
     73e:	b6 01       	movw	r22, r12
     740:	c8 01       	movw	r24, r16
     742:	0e 94 86 01 	call	0x30c	; 0x30c <_ZN16Adafruit_TSL259112calculateLuxEjj>
     746:	6c 8b       	std	Y+20, r22	; 0x14
     748:	7d 8b       	std	Y+21, r23	; 0x15
     74a:	8e 8b       	std	Y+22, r24	; 0x16
     74c:	9f 8b       	std	Y+23, r25	; 0x17
     74e:	df 91       	pop	r29
     750:	cf 91       	pop	r28
     752:	1f 91       	pop	r17
     754:	0f 91       	pop	r16
     756:	ff 90       	pop	r15
     758:	ef 90       	pop	r14
     75a:	df 90       	pop	r13
     75c:	cf 90       	pop	r12
     75e:	08 95       	ret

00000760 <_Z15read_memory_ptrv>:
     760:	60 e0       	ldi	r22, 0x00	; 0
     762:	70 e0       	ldi	r23, 0x00	; 0
     764:	81 e7       	ldi	r24, 0x71	; 113
     766:	92 e0       	ldi	r25, 0x02	; 2
     768:	0e 94 e5 18 	call	0x31ca	; 0x31ca <_ZN10I2C_eeprom8readByteEj>
     76c:	90 e0       	ldi	r25, 0x00	; 0
     76e:	90 93 5f 02 	sts	0x025F, r25	; 0x80025f <mem_ptr+0x1>
     772:	80 93 5e 02 	sts	0x025E, r24	; 0x80025e <mem_ptr>
     776:	08 95       	ret

00000778 <_Z17update_memory_ptrv>:
     778:	40 91 5e 02 	lds	r20, 0x025E	; 0x80025e <mem_ptr>
     77c:	60 e0       	ldi	r22, 0x00	; 0
     77e:	70 e0       	ldi	r23, 0x00	; 0
     780:	81 e7       	ldi	r24, 0x71	; 113
     782:	92 e0       	ldi	r25, 0x02	; 2
     784:	0c 94 9a 18 	jmp	0x3134	; 0x3134 <_ZN10I2C_eeprom9writeByteEjh>

00000788 <_Z14store_intervalv>:
     788:	40 91 61 02 	lds	r20, 0x0261	; 0x800261 <interval>
     78c:	61 e0       	ldi	r22, 0x01	; 1
     78e:	70 e0       	ldi	r23, 0x00	; 0
     790:	81 e7       	ldi	r24, 0x71	; 113
     792:	92 e0       	ldi	r25, 0x02	; 2
     794:	0c 94 9a 18 	jmp	0x3134	; 0x3134 <_ZN10I2C_eeprom9writeByteEjh>

00000798 <_Z9set_alarmv>:
     798:	e3 e6       	ldi	r30, 0x63	; 99
     79a:	f2 e0       	ldi	r31, 0x02	; 2
     79c:	8a e0       	ldi	r24, 0x0A	; 10
     79e:	80 83       	st	Z, r24
     7a0:	11 82       	std	Z+1, r1	; 0x01
     7a2:	12 82       	std	Z+2, r1	; 0x02
     7a4:	81 e0       	ldi	r24, 0x01	; 1
     7a6:	84 83       	std	Z+4, r24	; 0x04
     7a8:	85 83       	std	Z+5, r24	; 0x05
     7aa:	8f e2       	ldi	r24, 0x2F	; 47
     7ac:	86 83       	std	Z+6, r24	; 0x06
     7ae:	cf 01       	movw	r24, r30
     7b0:	0e 94 0b 16 	call	0x2c16	; 0x2c16 <_Z8makeTimeR12tmElements_t>
     7b4:	9b 01       	movw	r18, r22
     7b6:	ac 01       	movw	r20, r24
     7b8:	60 e0       	ldi	r22, 0x00	; 0
     7ba:	8f e5       	ldi	r24, 0x5F	; 95
     7bc:	93 e0       	ldi	r25, 0x03	; 3
     7be:	0e 94 2d 14 	call	0x285a	; 0x285a <_ZN11MCP79412RTC8setAlarmEhm>
     7c2:	40 e0       	ldi	r20, 0x00	; 0
     7c4:	60 e0       	ldi	r22, 0x00	; 0
     7c6:	8f e5       	ldi	r24, 0x5F	; 95
     7c8:	93 e0       	ldi	r25, 0x03	; 3
     7ca:	0c 94 ca 14 	jmp	0x2994	; 0x2994 <_ZN11MCP79412RTC11enableAlarmEhh>

000007ce <_Z10store_datav>:
     7ce:	0f 93       	push	r16
     7d0:	1f 93       	push	r17
     7d2:	cf 93       	push	r28
     7d4:	df 93       	push	r29
     7d6:	ca e5       	ldi	r28, 0x5A	; 90
     7d8:	d2 e0       	ldi	r29, 0x02	; 2
     7da:	0e e5       	ldi	r16, 0x5E	; 94
     7dc:	12 e0       	ldi	r17, 0x02	; 2
     7de:	49 91       	ld	r20, Y+
     7e0:	60 91 5e 02 	lds	r22, 0x025E	; 0x80025e <mem_ptr>
     7e4:	70 91 5f 02 	lds	r23, 0x025F	; 0x80025f <mem_ptr+0x1>
     7e8:	81 e7       	ldi	r24, 0x71	; 113
     7ea:	92 e0       	ldi	r25, 0x02	; 2
     7ec:	0e 94 9a 18 	call	0x3134	; 0x3134 <_ZN10I2C_eeprom9writeByteEjh>
     7f0:	60 91 5e 02 	lds	r22, 0x025E	; 0x80025e <mem_ptr>
     7f4:	70 91 5f 02 	lds	r23, 0x025F	; 0x80025f <mem_ptr+0x1>
     7f8:	6f 5f       	subi	r22, 0xFF	; 255
     7fa:	7f 4f       	sbci	r23, 0xFF	; 255
     7fc:	70 93 5f 02 	sts	0x025F, r23	; 0x80025f <mem_ptr+0x1>
     800:	60 93 5e 02 	sts	0x025E, r22	; 0x80025e <mem_ptr>
     804:	0c 17       	cp	r16, r28
     806:	1d 07       	cpc	r17, r29
     808:	51 f7       	brne	.-44     	; 0x7de <_Z10store_datav+0x10>
     80a:	80 91 8a 02 	lds	r24, 0x028A	; 0x80028a <tcs+0x8>
     80e:	90 91 8b 02 	lds	r25, 0x028B	; 0x80028b <tcs+0x9>
     812:	48 2f       	mov	r20, r24
     814:	80 93 58 02 	sts	0x0258, r24	; 0x800258 <__data_end>
     818:	90 93 59 02 	sts	0x0259, r25	; 0x800259 <__data_end+0x1>
     81c:	81 e7       	ldi	r24, 0x71	; 113
     81e:	92 e0       	ldi	r25, 0x02	; 2
     820:	0e 94 9a 18 	call	0x3134	; 0x3134 <_ZN10I2C_eeprom9writeByteEjh>
     824:	60 91 5e 02 	lds	r22, 0x025E	; 0x80025e <mem_ptr>
     828:	70 91 5f 02 	lds	r23, 0x025F	; 0x80025f <mem_ptr+0x1>
     82c:	6f 5f       	subi	r22, 0xFF	; 255
     82e:	7f 4f       	sbci	r23, 0xFF	; 255
     830:	70 93 5f 02 	sts	0x025F, r23	; 0x80025f <mem_ptr+0x1>
     834:	60 93 5e 02 	sts	0x025E, r22	; 0x80025e <mem_ptr>
     838:	40 91 59 02 	lds	r20, 0x0259	; 0x800259 <__data_end+0x1>
     83c:	81 e7       	ldi	r24, 0x71	; 113
     83e:	92 e0       	ldi	r25, 0x02	; 2
     840:	0e 94 9a 18 	call	0x3134	; 0x3134 <_ZN10I2C_eeprom9writeByteEjh>
     844:	60 91 5e 02 	lds	r22, 0x025E	; 0x80025e <mem_ptr>
     848:	70 91 5f 02 	lds	r23, 0x025F	; 0x80025f <mem_ptr+0x1>
     84c:	6f 5f       	subi	r22, 0xFF	; 255
     84e:	7f 4f       	sbci	r23, 0xFF	; 255
     850:	70 93 5f 02 	sts	0x025F, r23	; 0x80025f <mem_ptr+0x1>
     854:	60 93 5e 02 	sts	0x025E, r22	; 0x80025e <mem_ptr>
     858:	80 91 8c 02 	lds	r24, 0x028C	; 0x80028c <tcs+0xa>
     85c:	90 91 8d 02 	lds	r25, 0x028D	; 0x80028d <tcs+0xb>
     860:	48 2f       	mov	r20, r24
     862:	80 93 58 02 	sts	0x0258, r24	; 0x800258 <__data_end>
     866:	90 93 59 02 	sts	0x0259, r25	; 0x800259 <__data_end+0x1>
     86a:	81 e7       	ldi	r24, 0x71	; 113
     86c:	92 e0       	ldi	r25, 0x02	; 2
     86e:	0e 94 9a 18 	call	0x3134	; 0x3134 <_ZN10I2C_eeprom9writeByteEjh>
     872:	60 91 5e 02 	lds	r22, 0x025E	; 0x80025e <mem_ptr>
     876:	70 91 5f 02 	lds	r23, 0x025F	; 0x80025f <mem_ptr+0x1>
     87a:	6f 5f       	subi	r22, 0xFF	; 255
     87c:	7f 4f       	sbci	r23, 0xFF	; 255
     87e:	70 93 5f 02 	sts	0x025F, r23	; 0x80025f <mem_ptr+0x1>
     882:	60 93 5e 02 	sts	0x025E, r22	; 0x80025e <mem_ptr>
     886:	40 91 59 02 	lds	r20, 0x0259	; 0x800259 <__data_end+0x1>
     88a:	81 e7       	ldi	r24, 0x71	; 113
     88c:	92 e0       	ldi	r25, 0x02	; 2
     88e:	0e 94 9a 18 	call	0x3134	; 0x3134 <_ZN10I2C_eeprom9writeByteEjh>
     892:	60 91 5e 02 	lds	r22, 0x025E	; 0x80025e <mem_ptr>
     896:	70 91 5f 02 	lds	r23, 0x025F	; 0x80025f <mem_ptr+0x1>
     89a:	6f 5f       	subi	r22, 0xFF	; 255
     89c:	7f 4f       	sbci	r23, 0xFF	; 255
     89e:	70 93 5f 02 	sts	0x025F, r23	; 0x80025f <mem_ptr+0x1>
     8a2:	60 93 5e 02 	sts	0x025E, r22	; 0x80025e <mem_ptr>
     8a6:	80 91 8e 02 	lds	r24, 0x028E	; 0x80028e <tcs+0xc>
     8aa:	90 91 8f 02 	lds	r25, 0x028F	; 0x80028f <tcs+0xd>
     8ae:	48 2f       	mov	r20, r24
     8b0:	80 93 58 02 	sts	0x0258, r24	; 0x800258 <__data_end>
     8b4:	90 93 59 02 	sts	0x0259, r25	; 0x800259 <__data_end+0x1>
     8b8:	81 e7       	ldi	r24, 0x71	; 113
     8ba:	92 e0       	ldi	r25, 0x02	; 2
     8bc:	0e 94 9a 18 	call	0x3134	; 0x3134 <_ZN10I2C_eeprom9writeByteEjh>
     8c0:	60 91 5e 02 	lds	r22, 0x025E	; 0x80025e <mem_ptr>
     8c4:	70 91 5f 02 	lds	r23, 0x025F	; 0x80025f <mem_ptr+0x1>
     8c8:	6f 5f       	subi	r22, 0xFF	; 255
     8ca:	7f 4f       	sbci	r23, 0xFF	; 255
     8cc:	70 93 5f 02 	sts	0x025F, r23	; 0x80025f <mem_ptr+0x1>
     8d0:	60 93 5e 02 	sts	0x025E, r22	; 0x80025e <mem_ptr>
     8d4:	40 91 59 02 	lds	r20, 0x0259	; 0x800259 <__data_end+0x1>
     8d8:	81 e7       	ldi	r24, 0x71	; 113
     8da:	92 e0       	ldi	r25, 0x02	; 2
     8dc:	0e 94 9a 18 	call	0x3134	; 0x3134 <_ZN10I2C_eeprom9writeByteEjh>
     8e0:	60 91 5e 02 	lds	r22, 0x025E	; 0x80025e <mem_ptr>
     8e4:	70 91 5f 02 	lds	r23, 0x025F	; 0x80025f <mem_ptr+0x1>
     8e8:	6f 5f       	subi	r22, 0xFF	; 255
     8ea:	7f 4f       	sbci	r23, 0xFF	; 255
     8ec:	70 93 5f 02 	sts	0x025F, r23	; 0x80025f <mem_ptr+0x1>
     8f0:	60 93 5e 02 	sts	0x025E, r22	; 0x80025e <mem_ptr>
     8f4:	80 91 90 02 	lds	r24, 0x0290	; 0x800290 <tcs+0xe>
     8f8:	90 91 91 02 	lds	r25, 0x0291	; 0x800291 <tcs+0xf>
     8fc:	48 2f       	mov	r20, r24
     8fe:	80 93 58 02 	sts	0x0258, r24	; 0x800258 <__data_end>
     902:	90 93 59 02 	sts	0x0259, r25	; 0x800259 <__data_end+0x1>
     906:	81 e7       	ldi	r24, 0x71	; 113
     908:	92 e0       	ldi	r25, 0x02	; 2
     90a:	0e 94 9a 18 	call	0x3134	; 0x3134 <_ZN10I2C_eeprom9writeByteEjh>
     90e:	60 91 5e 02 	lds	r22, 0x025E	; 0x80025e <mem_ptr>
     912:	70 91 5f 02 	lds	r23, 0x025F	; 0x80025f <mem_ptr+0x1>
     916:	6f 5f       	subi	r22, 0xFF	; 255
     918:	7f 4f       	sbci	r23, 0xFF	; 255
     91a:	70 93 5f 02 	sts	0x025F, r23	; 0x80025f <mem_ptr+0x1>
     91e:	60 93 5e 02 	sts	0x025E, r22	; 0x80025e <mem_ptr>
     922:	40 91 59 02 	lds	r20, 0x0259	; 0x800259 <__data_end+0x1>
     926:	81 e7       	ldi	r24, 0x71	; 113
     928:	92 e0       	ldi	r25, 0x02	; 2
     92a:	0e 94 9a 18 	call	0x3134	; 0x3134 <_ZN10I2C_eeprom9writeByteEjh>
     92e:	60 91 5e 02 	lds	r22, 0x025E	; 0x80025e <mem_ptr>
     932:	70 91 5f 02 	lds	r23, 0x025F	; 0x80025f <mem_ptr+0x1>
     936:	6f 5f       	subi	r22, 0xFF	; 255
     938:	7f 4f       	sbci	r23, 0xFF	; 255
     93a:	70 93 5f 02 	sts	0x025F, r23	; 0x80025f <mem_ptr+0x1>
     93e:	60 93 5e 02 	sts	0x025E, r22	; 0x80025e <mem_ptr>
     942:	80 91 84 02 	lds	r24, 0x0284	; 0x800284 <tcs+0x2>
     946:	90 91 85 02 	lds	r25, 0x0285	; 0x800285 <tcs+0x3>
     94a:	48 2f       	mov	r20, r24
     94c:	80 93 58 02 	sts	0x0258, r24	; 0x800258 <__data_end>
     950:	90 93 59 02 	sts	0x0259, r25	; 0x800259 <__data_end+0x1>
     954:	81 e7       	ldi	r24, 0x71	; 113
     956:	92 e0       	ldi	r25, 0x02	; 2
     958:	0e 94 9a 18 	call	0x3134	; 0x3134 <_ZN10I2C_eeprom9writeByteEjh>
     95c:	60 91 5e 02 	lds	r22, 0x025E	; 0x80025e <mem_ptr>
     960:	70 91 5f 02 	lds	r23, 0x025F	; 0x80025f <mem_ptr+0x1>
     964:	6f 5f       	subi	r22, 0xFF	; 255
     966:	7f 4f       	sbci	r23, 0xFF	; 255
     968:	70 93 5f 02 	sts	0x025F, r23	; 0x80025f <mem_ptr+0x1>
     96c:	60 93 5e 02 	sts	0x025E, r22	; 0x80025e <mem_ptr>
     970:	40 91 59 02 	lds	r20, 0x0259	; 0x800259 <__data_end+0x1>
     974:	81 e7       	ldi	r24, 0x71	; 113
     976:	92 e0       	ldi	r25, 0x02	; 2
     978:	0e 94 9a 18 	call	0x3134	; 0x3134 <_ZN10I2C_eeprom9writeByteEjh>
     97c:	60 91 5e 02 	lds	r22, 0x025E	; 0x80025e <mem_ptr>
     980:	70 91 5f 02 	lds	r23, 0x025F	; 0x80025f <mem_ptr+0x1>
     984:	6f 5f       	subi	r22, 0xFF	; 255
     986:	7f 4f       	sbci	r23, 0xFF	; 255
     988:	70 93 5f 02 	sts	0x025F, r23	; 0x80025f <mem_ptr+0x1>
     98c:	60 93 5e 02 	sts	0x025E, r22	; 0x80025e <mem_ptr>
     990:	80 91 86 02 	lds	r24, 0x0286	; 0x800286 <tcs+0x4>
     994:	90 91 87 02 	lds	r25, 0x0287	; 0x800287 <tcs+0x5>
     998:	48 2f       	mov	r20, r24
     99a:	80 93 58 02 	sts	0x0258, r24	; 0x800258 <__data_end>
     99e:	90 93 59 02 	sts	0x0259, r25	; 0x800259 <__data_end+0x1>
     9a2:	81 e7       	ldi	r24, 0x71	; 113
     9a4:	92 e0       	ldi	r25, 0x02	; 2
     9a6:	0e 94 9a 18 	call	0x3134	; 0x3134 <_ZN10I2C_eeprom9writeByteEjh>
     9aa:	60 91 5e 02 	lds	r22, 0x025E	; 0x80025e <mem_ptr>
     9ae:	70 91 5f 02 	lds	r23, 0x025F	; 0x80025f <mem_ptr+0x1>
     9b2:	6f 5f       	subi	r22, 0xFF	; 255
     9b4:	7f 4f       	sbci	r23, 0xFF	; 255
     9b6:	70 93 5f 02 	sts	0x025F, r23	; 0x80025f <mem_ptr+0x1>
     9ba:	60 93 5e 02 	sts	0x025E, r22	; 0x80025e <mem_ptr>
     9be:	40 91 59 02 	lds	r20, 0x0259	; 0x800259 <__data_end+0x1>
     9c2:	81 e7       	ldi	r24, 0x71	; 113
     9c4:	92 e0       	ldi	r25, 0x02	; 2
     9c6:	0e 94 9a 18 	call	0x3134	; 0x3134 <_ZN10I2C_eeprom9writeByteEjh>
     9ca:	80 91 5e 02 	lds	r24, 0x025E	; 0x80025e <mem_ptr>
     9ce:	90 91 5f 02 	lds	r25, 0x025F	; 0x80025f <mem_ptr+0x1>
     9d2:	01 96       	adiw	r24, 0x01	; 1
     9d4:	90 93 5f 02 	sts	0x025F, r25	; 0x80025f <mem_ptr+0x1>
     9d8:	80 93 5e 02 	sts	0x025E, r24	; 0x80025e <mem_ptr>
     9dc:	df 91       	pop	r29
     9de:	cf 91       	pop	r28
     9e0:	1f 91       	pop	r17
     9e2:	0f 91       	pop	r16
     9e4:	08 95       	ret

000009e6 <_Z8read_luxv>:
     9e6:	cf 92       	push	r12
     9e8:	df 92       	push	r13
     9ea:	ef 92       	push	r14
     9ec:	ff 92       	push	r15
     9ee:	0f 93       	push	r16
     9f0:	1f 93       	push	r17
     9f2:	cf 93       	push	r28
     9f4:	df 93       	push	r29
     9f6:	cd b7       	in	r28, 0x3d	; 61
     9f8:	de b7       	in	r29, 0x3e	; 62
     9fa:	a4 97       	sbiw	r28, 0x24	; 36
     9fc:	0f b6       	in	r0, 0x3f	; 63
     9fe:	f8 94       	cli
     a00:	de bf       	out	0x3e, r29	; 62
     a02:	0f be       	out	0x3f, r0	; 63
     a04:	cd bf       	out	0x3d, r28	; 61
     a06:	be 01       	movw	r22, r28
     a08:	6f 5f       	subi	r22, 0xFF	; 255
     a0a:	7f 4f       	sbci	r23, 0xFF	; 255
     a0c:	88 e7       	ldi	r24, 0x78	; 120
     a0e:	92 e0       	ldi	r25, 0x02	; 2
     a10:	0e 94 67 03 	call	0x6ce	; 0x6ce <_ZN16Adafruit_TSL25918getEventEP15sensors_event_t>
     a14:	cd 88       	ldd	r12, Y+21	; 0x15
     a16:	de 88       	ldd	r13, Y+22	; 0x16
     a18:	ef 88       	ldd	r14, Y+23	; 0x17
     a1a:	f8 8c       	ldd	r15, Y+24	; 0x18
     a1c:	01 e0       	ldi	r16, 0x01	; 1
     a1e:	20 e0       	ldi	r18, 0x00	; 0
     a20:	30 e0       	ldi	r19, 0x00	; 0
     a22:	a9 01       	movw	r20, r18
     a24:	c7 01       	movw	r24, r14
     a26:	b6 01       	movw	r22, r12
     a28:	0e 94 ab 0a 	call	0x1556	; 0x1556 <__cmpsf2>
     a2c:	81 11       	cpse	r24, r1
     a2e:	00 e0       	ldi	r16, 0x00	; 0
     a30:	11 e0       	ldi	r17, 0x01	; 1
     a32:	2b ef       	ldi	r18, 0xFB	; 251
     a34:	3f ef       	ldi	r19, 0xFF	; 255
     a36:	4f e7       	ldi	r20, 0x7F	; 127
     a38:	5f e4       	ldi	r21, 0x4F	; 79
     a3a:	c7 01       	movw	r24, r14
     a3c:	b6 01       	movw	r22, r12
     a3e:	0e 94 03 0c 	call	0x1806	; 0x1806 <__gesf2>
     a42:	18 16       	cp	r1, r24
     a44:	0c f0       	brlt	.+2      	; 0xa48 <_Z8read_luxv+0x62>
     a46:	10 e0       	ldi	r17, 0x00	; 0
     a48:	10 2b       	or	r17, r16
     a4a:	51 f4       	brne	.+20     	; 0xa60 <_Z8read_luxv+0x7a>
     a4c:	2b ef       	ldi	r18, 0xFB	; 251
     a4e:	3f ef       	ldi	r19, 0xFF	; 255
     a50:	4f e7       	ldi	r20, 0x7F	; 127
     a52:	5f ec       	ldi	r21, 0xCF	; 207
     a54:	c7 01       	movw	r24, r14
     a56:	b6 01       	movw	r22, r12
     a58:	0e 94 ab 0a 	call	0x1556	; 0x1556 <__cmpsf2>
     a5c:	87 ff       	sbrs	r24, 7
     a5e:	0f c0       	rjmp	.+30     	; 0xa7e <_Z8read_luxv+0x98>
     a60:	80 e1       	ldi	r24, 0x10	; 16
     a62:	97 e2       	ldi	r25, 0x27	; 39
     a64:	a0 e0       	ldi	r26, 0x00	; 0
     a66:	b0 e0       	ldi	r27, 0x00	; 0
     a68:	80 93 5a 02 	sts	0x025A, r24	; 0x80025a <lux>
     a6c:	90 93 5b 02 	sts	0x025B, r25	; 0x80025b <lux+0x1>
     a70:	a0 93 5c 02 	sts	0x025C, r26	; 0x80025c <lux+0x2>
     a74:	b0 93 5d 02 	sts	0x025D, r27	; 0x80025d <lux+0x3>
     a78:	0e 94 f3 04 	call	0x9e6	; 0x9e6 <_Z8read_luxv>
     a7c:	10 c0       	rjmp	.+32     	; 0xa9e <_Z8read_luxv+0xb8>
     a7e:	c7 01       	movw	r24, r14
     a80:	b6 01       	movw	r22, r12
     a82:	0e 94 22 0b 	call	0x1644	; 0x1644 <__fixunssfsi>
     a86:	60 93 5a 02 	sts	0x025A, r22	; 0x80025a <lux>
     a8a:	70 93 5b 02 	sts	0x025B, r23	; 0x80025b <lux+0x1>
     a8e:	80 93 5c 02 	sts	0x025C, r24	; 0x80025c <lux+0x2>
     a92:	90 93 5d 02 	sts	0x025D, r25	; 0x80025d <lux+0x3>
     a96:	88 e7       	ldi	r24, 0x78	; 120
     a98:	92 e0       	ldi	r25, 0x02	; 2
     a9a:	0e 94 e5 02 	call	0x5ca	; 0x5ca <_ZN16Adafruit_TSL25917disableEv>
     a9e:	a4 96       	adiw	r28, 0x24	; 36
     aa0:	0f b6       	in	r0, 0x3f	; 63
     aa2:	f8 94       	cli
     aa4:	de bf       	out	0x3e, r29	; 62
     aa6:	0f be       	out	0x3f, r0	; 63
     aa8:	cd bf       	out	0x3d, r28	; 61
     aaa:	df 91       	pop	r29
     aac:	cf 91       	pop	r28
     aae:	1f 91       	pop	r17
     ab0:	0f 91       	pop	r16
     ab2:	ff 90       	pop	r15
     ab4:	ef 90       	pop	r14
     ab6:	df 90       	pop	r13
     ab8:	cf 90       	pop	r12
     aba:	08 95       	ret

00000abc <_Z10read_colorv>:
     abc:	82 e8       	ldi	r24, 0x82	; 130
     abe:	92 e0       	ldi	r25, 0x02	; 2
     ac0:	0e 94 2a 0a 	call	0x1454	; 0x1454 <_ZN8tcs347256enableEv>
     ac4:	82 e8       	ldi	r24, 0x82	; 130
     ac6:	92 e0       	ldi	r25, 0x02	; 2
     ac8:	0e 94 3b 09 	call	0x1276	; 0x1276 <_ZN8tcs347255beginEv>
     acc:	82 e8       	ldi	r24, 0x82	; 130
     ace:	92 e0       	ldi	r25, 0x02	; 2
     ad0:	0c 94 71 09 	jmp	0x12e2	; 0x12e2 <_ZN8tcs347257getDataEv>

00000ad4 <_Z10print_timev>:
     ad4:	cf 93       	push	r28
     ad6:	df 93       	push	r29
     ad8:	6d e2       	ldi	r22, 0x2D	; 45
     ada:	71 e0       	ldi	r23, 0x01	; 1
     adc:	89 eb       	ldi	r24, 0xB9	; 185
     ade:	92 e0       	ldi	r25, 0x02	; 2
     ae0:	0e 94 88 0e 	call	0x1d10	; 0x1d10 <_ZN5Print7printlnEPKc>
     ae4:	8a e6       	ldi	r24, 0x6A	; 106
     ae6:	92 e0       	ldi	r25, 0x02	; 2
     ae8:	0e 94 a4 13 	call	0x2748	; 0x2748 <_ZN11MCP79412RTC4readER12tmElements_t>
     aec:	6f e2       	ldi	r22, 0x2F	; 47
     aee:	71 e0       	ldi	r23, 0x01	; 1
     af0:	89 eb       	ldi	r24, 0xB9	; 185
     af2:	92 e0       	ldi	r25, 0x02	; 2
     af4:	0e 94 7b 0e 	call	0x1cf6	; 0x1cf6 <_ZN5Print5printEPKc>
     af8:	ca e6       	ldi	r28, 0x6A	; 106
     afa:	d2 e0       	ldi	r29, 0x02	; 2
     afc:	4a e0       	ldi	r20, 0x0A	; 10
     afe:	50 e0       	ldi	r21, 0x00	; 0
     b00:	6a 81       	ldd	r22, Y+2	; 0x02
     b02:	89 eb       	ldi	r24, 0xB9	; 185
     b04:	92 e0       	ldi	r25, 0x02	; 2
     b06:	0e 94 f0 0e 	call	0x1de0	; 0x1de0 <_ZN5Print5printEhi>
     b0a:	6a e3       	ldi	r22, 0x3A	; 58
     b0c:	89 eb       	ldi	r24, 0xB9	; 185
     b0e:	92 e0       	ldi	r25, 0x02	; 2
     b10:	0e 94 7d 0e 	call	0x1cfa	; 0x1cfa <_ZN5Print5printEc>
     b14:	4a e0       	ldi	r20, 0x0A	; 10
     b16:	50 e0       	ldi	r21, 0x00	; 0
     b18:	69 81       	ldd	r22, Y+1	; 0x01
     b1a:	89 eb       	ldi	r24, 0xB9	; 185
     b1c:	92 e0       	ldi	r25, 0x02	; 2
     b1e:	0e 94 f0 0e 	call	0x1de0	; 0x1de0 <_ZN5Print5printEhi>
     b22:	6a e3       	ldi	r22, 0x3A	; 58
     b24:	89 eb       	ldi	r24, 0xB9	; 185
     b26:	92 e0       	ldi	r25, 0x02	; 2
     b28:	0e 94 7d 0e 	call	0x1cfa	; 0x1cfa <_ZN5Print5printEc>
     b2c:	4a e0       	ldi	r20, 0x0A	; 10
     b2e:	50 e0       	ldi	r21, 0x00	; 0
     b30:	68 81       	ld	r22, Y
     b32:	89 eb       	ldi	r24, 0xB9	; 185
     b34:	92 e0       	ldi	r25, 0x02	; 2
     b36:	0e 94 f0 0e 	call	0x1de0	; 0x1de0 <_ZN5Print5printEhi>
     b3a:	60 e2       	ldi	r22, 0x20	; 32
     b3c:	89 eb       	ldi	r24, 0xB9	; 185
     b3e:	92 e0       	ldi	r25, 0x02	; 2
     b40:	0e 94 7d 0e 	call	0x1cfa	; 0x1cfa <_ZN5Print5printEc>
     b44:	6e 81       	ldd	r22, Y+6	; 0x06
     b46:	70 e0       	ldi	r23, 0x00	; 0
     b48:	6e 54       	subi	r22, 0x4E	; 78
     b4a:	78 4f       	sbci	r23, 0xF8	; 248
     b4c:	4a e0       	ldi	r20, 0x0A	; 10
     b4e:	50 e0       	ldi	r21, 0x00	; 0
     b50:	89 eb       	ldi	r24, 0xB9	; 185
     b52:	92 e0       	ldi	r25, 0x02	; 2
     b54:	0e 94 7b 0f 	call	0x1ef6	; 0x1ef6 <_ZN5Print5printEii>
     b58:	6d e2       	ldi	r22, 0x2D	; 45
     b5a:	89 eb       	ldi	r24, 0xB9	; 185
     b5c:	92 e0       	ldi	r25, 0x02	; 2
     b5e:	0e 94 7d 0e 	call	0x1cfa	; 0x1cfa <_ZN5Print5printEc>
     b62:	4a e0       	ldi	r20, 0x0A	; 10
     b64:	50 e0       	ldi	r21, 0x00	; 0
     b66:	6d 81       	ldd	r22, Y+5	; 0x05
     b68:	89 eb       	ldi	r24, 0xB9	; 185
     b6a:	92 e0       	ldi	r25, 0x02	; 2
     b6c:	0e 94 f0 0e 	call	0x1de0	; 0x1de0 <_ZN5Print5printEhi>
     b70:	6d e2       	ldi	r22, 0x2D	; 45
     b72:	89 eb       	ldi	r24, 0xB9	; 185
     b74:	92 e0       	ldi	r25, 0x02	; 2
     b76:	0e 94 7d 0e 	call	0x1cfa	; 0x1cfa <_ZN5Print5printEc>
     b7a:	4a e0       	ldi	r20, 0x0A	; 10
     b7c:	50 e0       	ldi	r21, 0x00	; 0
     b7e:	6c 81       	ldd	r22, Y+4	; 0x04
     b80:	89 eb       	ldi	r24, 0xB9	; 185
     b82:	92 e0       	ldi	r25, 0x02	; 2
     b84:	0e 94 f0 0e 	call	0x1de0	; 0x1de0 <_ZN5Print5printEhi>
     b88:	61 e3       	ldi	r22, 0x31	; 49
     b8a:	71 e0       	ldi	r23, 0x01	; 1
     b8c:	89 eb       	ldi	r24, 0xB9	; 185
     b8e:	92 e0       	ldi	r25, 0x02	; 2
     b90:	df 91       	pop	r29
     b92:	cf 91       	pop	r28
     b94:	0c 94 7b 0e 	jmp	0x1cf6	; 0x1cf6 <_ZN5Print5printEPKc>

00000b98 <_Z12clear_memoryv>:
     b98:	87 e0       	ldi	r24, 0x07	; 7
     b9a:	90 e0       	ldi	r25, 0x00	; 0
     b9c:	90 93 5f 02 	sts	0x025F, r25	; 0x80025f <mem_ptr+0x1>
     ba0:	80 93 5e 02 	sts	0x025E, r24	; 0x80025e <mem_ptr>
     ba4:	0e 94 bc 03 	call	0x778	; 0x778 <_Z17update_memory_ptrv>
     ba8:	0e 94 6a 05 	call	0xad4	; 0xad4 <_Z10print_timev>
     bac:	64 e3       	ldi	r22, 0x34	; 52
     bae:	71 e0       	ldi	r23, 0x01	; 1
     bb0:	89 eb       	ldi	r24, 0xB9	; 185
     bb2:	92 e0       	ldi	r25, 0x02	; 2
     bb4:	0c 94 88 0e 	jmp	0x1d10	; 0x1d10 <_ZN5Print7printlnEPKc>

00000bb8 <_Z5sleepv>:
     bb8:	cf 93       	push	r28
     bba:	df 93       	push	r29
     bbc:	0e 94 6a 05 	call	0xad4	; 0xad4 <_Z10print_timev>
     bc0:	65 e4       	ldi	r22, 0x45	; 69
     bc2:	71 e0       	ldi	r23, 0x01	; 1
     bc4:	89 eb       	ldi	r24, 0xB9	; 185
     bc6:	92 e0       	ldi	r25, 0x02	; 2
     bc8:	0e 94 88 0e 	call	0x1d10	; 0x1d10 <_ZN5Print7printlnEPKc>
     bcc:	40 e0       	ldi	r20, 0x00	; 0
     bce:	50 e0       	ldi	r21, 0x00	; 0
     bd0:	6d ed       	ldi	r22, 0xDD	; 221
     bd2:	70 e0       	ldi	r23, 0x00	; 0
     bd4:	81 e0       	ldi	r24, 0x01	; 1
     bd6:	0e 94 83 0f 	call	0x1f06	; 0x1f06 <attachInterrupt>
     bda:	ca e7       	ldi	r28, 0x7A	; 122
     bdc:	d0 e0       	ldi	r29, 0x00	; 0
     bde:	88 81       	ld	r24, Y
     be0:	80 93 60 02 	sts	0x0260, r24	; 0x800260 <old_ADCSRA>
     be4:	64 e6       	ldi	r22, 0x64	; 100
     be6:	70 e0       	ldi	r23, 0x00	; 0
     be8:	80 e0       	ldi	r24, 0x00	; 0
     bea:	90 e0       	ldi	r25, 0x00	; 0
     bec:	0e 94 7e 10 	call	0x20fc	; 0x20fc <delay>
     bf0:	83 b7       	in	r24, 0x33	; 51
     bf2:	81 7f       	andi	r24, 0xF1	; 241
     bf4:	84 60       	ori	r24, 0x04	; 4
     bf6:	83 bf       	out	0x33, r24	; 51
     bf8:	83 b7       	in	r24, 0x33	; 51
     bfa:	81 60       	ori	r24, 0x01	; 1
     bfc:	83 bf       	out	0x33, r24	; 51
     bfe:	78 94       	sei
     c00:	83 b7       	in	r24, 0x33	; 51
     c02:	81 60       	ori	r24, 0x01	; 1
     c04:	83 bf       	out	0x33, r24	; 51
     c06:	88 95       	sleep
     c08:	83 b7       	in	r24, 0x33	; 51
     c0a:	8e 7f       	andi	r24, 0xFE	; 254
     c0c:	83 bf       	out	0x33, r24	; 51
     c0e:	83 b7       	in	r24, 0x33	; 51
     c10:	8e 7f       	andi	r24, 0xFE	; 254
     c12:	83 bf       	out	0x33, r24	; 51
     c14:	80 91 60 02 	lds	r24, 0x0260	; 0x800260 <old_ADCSRA>
     c18:	88 83       	st	Y, r24
     c1a:	df 91       	pop	r29
     c1c:	cf 91       	pop	r28
     c1e:	08 95       	ret

00000c20 <_Z12cycled_sleepv>:
     c20:	cf 93       	push	r28
     c22:	df 93       	push	r29
     c24:	0e 94 6a 05 	call	0xad4	; 0xad4 <_Z10print_timev>
     c28:	66 e5       	ldi	r22, 0x56	; 86
     c2a:	71 e0       	ldi	r23, 0x01	; 1
     c2c:	89 eb       	ldi	r24, 0xB9	; 185
     c2e:	92 e0       	ldi	r25, 0x02	; 2
     c30:	0e 94 88 0e 	call	0x1d10	; 0x1d10 <_ZN5Print7printlnEPKc>
     c34:	0e 94 cc 03 	call	0x798	; 0x798 <_Z9set_alarmv>
     c38:	40 e0       	ldi	r20, 0x00	; 0
     c3a:	50 e0       	ldi	r21, 0x00	; 0
     c3c:	6d ed       	ldi	r22, 0xDD	; 221
     c3e:	70 e0       	ldi	r23, 0x00	; 0
     c40:	81 e0       	ldi	r24, 0x01	; 1
     c42:	0e 94 83 0f 	call	0x1f06	; 0x1f06 <attachInterrupt>
     c46:	40 e0       	ldi	r20, 0x00	; 0
     c48:	50 e0       	ldi	r21, 0x00	; 0
     c4a:	63 ee       	ldi	r22, 0xE3	; 227
     c4c:	70 e0       	ldi	r23, 0x00	; 0
     c4e:	80 e0       	ldi	r24, 0x00	; 0
     c50:	0e 94 83 0f 	call	0x1f06	; 0x1f06 <attachInterrupt>
     c54:	ca e7       	ldi	r28, 0x7A	; 122
     c56:	d0 e0       	ldi	r29, 0x00	; 0
     c58:	88 81       	ld	r24, Y
     c5a:	80 93 60 02 	sts	0x0260, r24	; 0x800260 <old_ADCSRA>
     c5e:	64 e6       	ldi	r22, 0x64	; 100
     c60:	70 e0       	ldi	r23, 0x00	; 0
     c62:	80 e0       	ldi	r24, 0x00	; 0
     c64:	90 e0       	ldi	r25, 0x00	; 0
     c66:	0e 94 7e 10 	call	0x20fc	; 0x20fc <delay>
     c6a:	83 b7       	in	r24, 0x33	; 51
     c6c:	81 7f       	andi	r24, 0xF1	; 241
     c6e:	84 60       	ori	r24, 0x04	; 4
     c70:	83 bf       	out	0x33, r24	; 51
     c72:	83 b7       	in	r24, 0x33	; 51
     c74:	81 60       	ori	r24, 0x01	; 1
     c76:	83 bf       	out	0x33, r24	; 51
     c78:	78 94       	sei
     c7a:	83 b7       	in	r24, 0x33	; 51
     c7c:	81 60       	ori	r24, 0x01	; 1
     c7e:	83 bf       	out	0x33, r24	; 51
     c80:	88 95       	sleep
     c82:	83 b7       	in	r24, 0x33	; 51
     c84:	8e 7f       	andi	r24, 0xFE	; 254
     c86:	83 bf       	out	0x33, r24	; 51
     c88:	83 b7       	in	r24, 0x33	; 51
     c8a:	8e 7f       	andi	r24, 0xFE	; 254
     c8c:	83 bf       	out	0x33, r24	; 51
     c8e:	80 91 60 02 	lds	r24, 0x0260	; 0x800260 <old_ADCSRA>
     c92:	88 83       	st	Y, r24
     c94:	df 91       	pop	r29
     c96:	cf 91       	pop	r28
     c98:	08 95       	ret

00000c9a <setup>:
     c9a:	60 e0       	ldi	r22, 0x00	; 0
     c9c:	82 e0       	ldi	r24, 0x02	; 2
     c9e:	0e 94 1e 11 	call	0x223c	; 0x223c <pinMode>
     ca2:	60 e0       	ldi	r22, 0x00	; 0
     ca4:	83 e0       	ldi	r24, 0x03	; 3
     ca6:	0e 94 1e 11 	call	0x223c	; 0x223c <pinMode>
     caa:	60 e0       	ldi	r22, 0x00	; 0
     cac:	80 e0       	ldi	r24, 0x00	; 0
     cae:	0e 94 1e 11 	call	0x223c	; 0x223c <pinMode>
     cb2:	60 e0       	ldi	r22, 0x00	; 0
     cb4:	81 e0       	ldi	r24, 0x01	; 1
     cb6:	0e 94 1e 11 	call	0x223c	; 0x223c <pinMode>
     cba:	80 e6       	ldi	r24, 0x60	; 96
     cbc:	93 e0       	ldi	r25, 0x03	; 3
     cbe:	0e 94 6b 17 	call	0x2ed6	; 0x2ed6 <_ZN7TwoWire5beginEv>
     cc2:	81 e7       	ldi	r24, 0x71	; 113
     cc4:	92 e0       	ldi	r25, 0x02	; 2
     cc6:	0e 94 19 18 	call	0x3032	; 0x3032 <_ZN10I2C_eeprom5beginEv>
     cca:	0e 94 b0 03 	call	0x760	; 0x760 <_Z15read_memory_ptrv>
     cce:	88 e7       	ldi	r24, 0x78	; 120
     cd0:	92 e0       	ldi	r25, 0x02	; 2
     cd2:	0e 94 e5 02 	call	0x5ca	; 0x5ca <_ZN16Adafruit_TSL25917disableEv>
     cd6:	26 e0       	ldi	r18, 0x06	; 6
     cd8:	40 e0       	ldi	r20, 0x00	; 0
     cda:	51 ee       	ldi	r21, 0xE1	; 225
     cdc:	60 e0       	ldi	r22, 0x00	; 0
     cde:	70 e0       	ldi	r23, 0x00	; 0
     ce0:	89 eb       	ldi	r24, 0xB9	; 185
     ce2:	92 e0       	ldi	r25, 0x02	; 2
     ce4:	0e 94 3b 0d 	call	0x1a76	; 0x1a76 <_ZN14HardwareSerial5beginEmh>
     ce8:	ea e6       	ldi	r30, 0x6A	; 106
     cea:	f2 e0       	ldi	r31, 0x02	; 2
     cec:	12 82       	std	Z+2, r1	; 0x02
     cee:	11 82       	std	Z+1, r1	; 0x01
     cf0:	10 82       	st	Z, r1
     cf2:	81 e0       	ldi	r24, 0x01	; 1
     cf4:	84 83       	std	Z+4, r24	; 0x04
     cf6:	85 83       	std	Z+5, r24	; 0x05
     cf8:	8f e2       	ldi	r24, 0x2F	; 47
     cfa:	86 83       	std	Z+6, r24	; 0x06
     cfc:	cf 01       	movw	r24, r30
     cfe:	0e 94 ea 12 	call	0x25d4	; 0x25d4 <_ZN11MCP79412RTC5writeER12tmElements_t>
     d02:	0e 94 cc 03 	call	0x798	; 0x798 <_Z9set_alarmv>
     d06:	0e 94 6a 05 	call	0xad4	; 0xad4 <_Z10print_timev>
     d0a:	6e e6       	ldi	r22, 0x6E	; 110
     d0c:	71 e0       	ldi	r23, 0x01	; 1
     d0e:	89 eb       	ldi	r24, 0xB9	; 185
     d10:	92 e0       	ldi	r25, 0x02	; 2
     d12:	0e 94 7b 0e 	call	0x1cf6	; 0x1cf6 <_ZN5Print5printEPKc>
     d16:	0c 94 10 06 	jmp	0xc20	; 0xc20 <_Z12cycled_sleepv>

00000d1a <_Z6samplev>:
     d1a:	cf 93       	push	r28
     d1c:	df 93       	push	r29
     d1e:	0e 94 6a 05 	call	0xad4	; 0xad4 <_Z10print_timev>
     d22:	61 e8       	ldi	r22, 0x81	; 129
     d24:	71 e0       	ldi	r23, 0x01	; 1
     d26:	89 eb       	ldi	r24, 0xB9	; 185
     d28:	92 e0       	ldi	r25, 0x02	; 2
     d2a:	0e 94 88 0e 	call	0x1d10	; 0x1d10 <_ZN5Print7printlnEPKc>
     d2e:	0e 94 f3 04 	call	0x9e6	; 0x9e6 <_Z8read_luxv>
     d32:	0e 94 5e 05 	call	0xabc	; 0xabc <_Z10read_colorv>
     d36:	6d e2       	ldi	r22, 0x2D	; 45
     d38:	72 e0       	ldi	r23, 0x02	; 2
     d3a:	89 eb       	ldi	r24, 0xB9	; 185
     d3c:	92 e0       	ldi	r25, 0x02	; 2
     d3e:	0e 94 88 0e 	call	0x1d10	; 0x1d10 <_ZN5Print7printlnEPKc>
     d42:	6c e8       	ldi	r22, 0x8C	; 140
     d44:	71 e0       	ldi	r23, 0x01	; 1
     d46:	89 eb       	ldi	r24, 0xB9	; 185
     d48:	92 e0       	ldi	r25, 0x02	; 2
     d4a:	0e 94 7b 0e 	call	0x1cf6	; 0x1cf6 <_ZN5Print5printEPKc>
     d4e:	40 91 5a 02 	lds	r20, 0x025A	; 0x80025a <lux>
     d52:	50 91 5b 02 	lds	r21, 0x025B	; 0x80025b <lux+0x1>
     d56:	60 91 5c 02 	lds	r22, 0x025C	; 0x80025c <lux+0x2>
     d5a:	70 91 5d 02 	lds	r23, 0x025D	; 0x80025d <lux+0x3>
     d5e:	2a e0       	ldi	r18, 0x0A	; 10
     d60:	30 e0       	ldi	r19, 0x00	; 0
     d62:	89 eb       	ldi	r24, 0xB9	; 185
     d64:	92 e0       	ldi	r25, 0x02	; 2
     d66:	0e 94 21 0f 	call	0x1e42	; 0x1e42 <_ZN5Print7printlnEmi>
     d6a:	6d e2       	ldi	r22, 0x2D	; 45
     d6c:	72 e0       	ldi	r23, 0x02	; 2
     d6e:	89 eb       	ldi	r24, 0xB9	; 185
     d70:	92 e0       	ldi	r25, 0x02	; 2
     d72:	0e 94 88 0e 	call	0x1d10	; 0x1d10 <_ZN5Print7printlnEPKc>
     d76:	62 e9       	ldi	r22, 0x92	; 146
     d78:	71 e0       	ldi	r23, 0x01	; 1
     d7a:	89 eb       	ldi	r24, 0xB9	; 185
     d7c:	92 e0       	ldi	r25, 0x02	; 2
     d7e:	0e 94 7b 0e 	call	0x1cf6	; 0x1cf6 <_ZN5Print5printEPKc>
     d82:	c2 e8       	ldi	r28, 0x82	; 130
     d84:	d2 e0       	ldi	r29, 0x02	; 2
     d86:	68 85       	ldd	r22, Y+8	; 0x08
     d88:	79 85       	ldd	r23, Y+9	; 0x09
     d8a:	4a e0       	ldi	r20, 0x0A	; 10
     d8c:	50 e0       	ldi	r21, 0x00	; 0
     d8e:	89 eb       	ldi	r24, 0xB9	; 185
     d90:	92 e0       	ldi	r25, 0x02	; 2
     d92:	0e 94 0f 0f 	call	0x1e1e	; 0x1e1e <_ZN5Print7printlnEji>
     d96:	68 e9       	ldi	r22, 0x98	; 152
     d98:	71 e0       	ldi	r23, 0x01	; 1
     d9a:	89 eb       	ldi	r24, 0xB9	; 185
     d9c:	92 e0       	ldi	r25, 0x02	; 2
     d9e:	0e 94 7b 0e 	call	0x1cf6	; 0x1cf6 <_ZN5Print5printEPKc>
     da2:	6a 85       	ldd	r22, Y+10	; 0x0a
     da4:	7b 85       	ldd	r23, Y+11	; 0x0b
     da6:	4a e0       	ldi	r20, 0x0A	; 10
     da8:	50 e0       	ldi	r21, 0x00	; 0
     daa:	89 eb       	ldi	r24, 0xB9	; 185
     dac:	92 e0       	ldi	r25, 0x02	; 2
     dae:	0e 94 0f 0f 	call	0x1e1e	; 0x1e1e <_ZN5Print7printlnEji>
     db2:	6e e9       	ldi	r22, 0x9E	; 158
     db4:	71 e0       	ldi	r23, 0x01	; 1
     db6:	89 eb       	ldi	r24, 0xB9	; 185
     db8:	92 e0       	ldi	r25, 0x02	; 2
     dba:	0e 94 7b 0e 	call	0x1cf6	; 0x1cf6 <_ZN5Print5printEPKc>
     dbe:	6c 85       	ldd	r22, Y+12	; 0x0c
     dc0:	7d 85       	ldd	r23, Y+13	; 0x0d
     dc2:	4a e0       	ldi	r20, 0x0A	; 10
     dc4:	50 e0       	ldi	r21, 0x00	; 0
     dc6:	89 eb       	ldi	r24, 0xB9	; 185
     dc8:	92 e0       	ldi	r25, 0x02	; 2
     dca:	0e 94 0f 0f 	call	0x1e1e	; 0x1e1e <_ZN5Print7printlnEji>
     dce:	65 ea       	ldi	r22, 0xA5	; 165
     dd0:	71 e0       	ldi	r23, 0x01	; 1
     dd2:	89 eb       	ldi	r24, 0xB9	; 185
     dd4:	92 e0       	ldi	r25, 0x02	; 2
     dd6:	0e 94 7b 0e 	call	0x1cf6	; 0x1cf6 <_ZN5Print5printEPKc>
     dda:	6e 85       	ldd	r22, Y+14	; 0x0e
     ddc:	7f 85       	ldd	r23, Y+15	; 0x0f
     dde:	4a e0       	ldi	r20, 0x0A	; 10
     de0:	50 e0       	ldi	r21, 0x00	; 0
     de2:	89 eb       	ldi	r24, 0xB9	; 185
     de4:	92 e0       	ldi	r25, 0x02	; 2
     de6:	0e 94 0f 0f 	call	0x1e1e	; 0x1e1e <_ZN5Print7printlnEji>
     dea:	6d ea       	ldi	r22, 0xAD	; 173
     dec:	71 e0       	ldi	r23, 0x01	; 1
     dee:	89 eb       	ldi	r24, 0xB9	; 185
     df0:	92 e0       	ldi	r25, 0x02	; 2
     df2:	0e 94 7b 0e 	call	0x1cf6	; 0x1cf6 <_ZN5Print5printEPKc>
     df6:	6a 81       	ldd	r22, Y+2	; 0x02
     df8:	7b 81       	ldd	r23, Y+3	; 0x03
     dfa:	4a e0       	ldi	r20, 0x0A	; 10
     dfc:	50 e0       	ldi	r21, 0x00	; 0
     dfe:	89 eb       	ldi	r24, 0xB9	; 185
     e00:	92 e0       	ldi	r25, 0x02	; 2
     e02:	0e 94 0f 0f 	call	0x1e1e	; 0x1e1e <_ZN5Print7printlnEji>
     e06:	64 eb       	ldi	r22, 0xB4	; 180
     e08:	71 e0       	ldi	r23, 0x01	; 1
     e0a:	89 eb       	ldi	r24, 0xB9	; 185
     e0c:	92 e0       	ldi	r25, 0x02	; 2
     e0e:	0e 94 7b 0e 	call	0x1cf6	; 0x1cf6 <_ZN5Print5printEPKc>
     e12:	6c 81       	ldd	r22, Y+4	; 0x04
     e14:	7d 81       	ldd	r23, Y+5	; 0x05
     e16:	4a e0       	ldi	r20, 0x0A	; 10
     e18:	50 e0       	ldi	r21, 0x00	; 0
     e1a:	89 eb       	ldi	r24, 0xB9	; 185
     e1c:	92 e0       	ldi	r25, 0x02	; 2
     e1e:	df 91       	pop	r29
     e20:	cf 91       	pop	r28
     e22:	0c 94 0f 0f 	jmp	0x1e1e	; 0x1e1e <_ZN5Print7printlnEji>

00000e26 <_Z11dump_memoryv>:
     e26:	cf 92       	push	r12
     e28:	df 92       	push	r13
     e2a:	ef 92       	push	r14
     e2c:	ff 92       	push	r15
     e2e:	0f 93       	push	r16
     e30:	1f 93       	push	r17
     e32:	cf 93       	push	r28
     e34:	df 93       	push	r29
     e36:	0e 94 6a 05 	call	0xad4	; 0xad4 <_Z10print_timev>
     e3a:	6b eb       	ldi	r22, 0xBB	; 187
     e3c:	71 e0       	ldi	r23, 0x01	; 1
     e3e:	89 eb       	ldi	r24, 0xB9	; 185
     e40:	92 e0       	ldi	r25, 0x02	; 2
     e42:	0e 94 88 0e 	call	0x1d10	; 0x1d10 <_ZN5Print7printlnEPKc>
     e46:	6d e2       	ldi	r22, 0x2D	; 45
     e48:	72 e0       	ldi	r23, 0x02	; 2
     e4a:	89 eb       	ldi	r24, 0xB9	; 185
     e4c:	92 e0       	ldi	r25, 0x02	; 2
     e4e:	0e 94 88 0e 	call	0x1d10	; 0x1d10 <_ZN5Print7printlnEPKc>
     e52:	c7 e0       	ldi	r28, 0x07	; 7
     e54:	d0 e0       	ldi	r29, 0x00	; 0
     e56:	8e e5       	ldi	r24, 0x5E	; 94
     e58:	e8 2e       	mov	r14, r24
     e5a:	82 e0       	ldi	r24, 0x02	; 2
     e5c:	f8 2e       	mov	r15, r24
     e5e:	80 91 5e 02 	lds	r24, 0x025E	; 0x80025e <mem_ptr>
     e62:	90 91 5f 02 	lds	r25, 0x025F	; 0x80025f <mem_ptr+0x1>
     e66:	c8 17       	cp	r28, r24
     e68:	d9 07       	cpc	r29, r25
     e6a:	08 f0       	brcs	.+2      	; 0xe6e <_Z11dump_memoryv+0x48>
     e6c:	fb c0       	rjmp	.+502    	; 0x1064 <_Z11dump_memoryv+0x23e>
     e6e:	0a e5       	ldi	r16, 0x5A	; 90
     e70:	12 e0       	ldi	r17, 0x02	; 2
     e72:	ce 01       	movw	r24, r28
     e74:	8a 55       	subi	r24, 0x5A	; 90
     e76:	92 40       	sbci	r25, 0x02	; 2
     e78:	6c 01       	movw	r12, r24
     e7a:	b6 01       	movw	r22, r12
     e7c:	60 0f       	add	r22, r16
     e7e:	71 1f       	adc	r23, r17
     e80:	81 e7       	ldi	r24, 0x71	; 113
     e82:	92 e0       	ldi	r25, 0x02	; 2
     e84:	0e 94 e5 18 	call	0x31ca	; 0x31ca <_ZN10I2C_eeprom8readByteEj>
     e88:	f8 01       	movw	r30, r16
     e8a:	81 93       	st	Z+, r24
     e8c:	8f 01       	movw	r16, r30
     e8e:	ee 16       	cp	r14, r30
     e90:	ff 06       	cpc	r15, r31
     e92:	99 f7       	brne	.-26     	; 0xe7a <_Z11dump_memoryv+0x54>
     e94:	40 91 5a 02 	lds	r20, 0x025A	; 0x80025a <lux>
     e98:	50 91 5b 02 	lds	r21, 0x025B	; 0x80025b <lux+0x1>
     e9c:	60 91 5c 02 	lds	r22, 0x025C	; 0x80025c <lux+0x2>
     ea0:	70 91 5d 02 	lds	r23, 0x025D	; 0x80025d <lux+0x3>
     ea4:	2a e0       	ldi	r18, 0x0A	; 10
     ea6:	30 e0       	ldi	r19, 0x00	; 0
     ea8:	89 eb       	ldi	r24, 0xB9	; 185
     eaa:	92 e0       	ldi	r25, 0x02	; 2
     eac:	0e 94 e3 0e 	call	0x1dc6	; 0x1dc6 <_ZN5Print5printEmi>
     eb0:	6d e2       	ldi	r22, 0x2D	; 45
     eb2:	71 e0       	ldi	r23, 0x01	; 1
     eb4:	89 eb       	ldi	r24, 0xB9	; 185
     eb6:	92 e0       	ldi	r25, 0x02	; 2
     eb8:	0e 94 7b 0e 	call	0x1cf6	; 0x1cf6 <_ZN5Print5printEPKc>
     ebc:	be 01       	movw	r22, r28
     ebe:	6c 5f       	subi	r22, 0xFC	; 252
     ec0:	7f 4f       	sbci	r23, 0xFF	; 255
     ec2:	81 e7       	ldi	r24, 0x71	; 113
     ec4:	92 e0       	ldi	r25, 0x02	; 2
     ec6:	0e 94 e5 18 	call	0x31ca	; 0x31ca <_ZN10I2C_eeprom8readByteEj>
     eca:	80 93 58 02 	sts	0x0258, r24	; 0x800258 <__data_end>
     ece:	be 01       	movw	r22, r28
     ed0:	6b 5f       	subi	r22, 0xFB	; 251
     ed2:	7f 4f       	sbci	r23, 0xFF	; 255
     ed4:	81 e7       	ldi	r24, 0x71	; 113
     ed6:	92 e0       	ldi	r25, 0x02	; 2
     ed8:	0e 94 e5 18 	call	0x31ca	; 0x31ca <_ZN10I2C_eeprom8readByteEj>
     edc:	80 93 59 02 	sts	0x0259, r24	; 0x800259 <__data_end+0x1>
     ee0:	60 91 58 02 	lds	r22, 0x0258	; 0x800258 <__data_end>
     ee4:	70 91 59 02 	lds	r23, 0x0259	; 0x800259 <__data_end+0x1>
     ee8:	4a e0       	ldi	r20, 0x0A	; 10
     eea:	50 e0       	ldi	r21, 0x00	; 0
     eec:	89 eb       	ldi	r24, 0xB9	; 185
     eee:	92 e0       	ldi	r25, 0x02	; 2
     ef0:	0e 94 09 0f 	call	0x1e12	; 0x1e12 <_ZN5Print5printEji>
     ef4:	6d e2       	ldi	r22, 0x2D	; 45
     ef6:	71 e0       	ldi	r23, 0x01	; 1
     ef8:	89 eb       	ldi	r24, 0xB9	; 185
     efa:	92 e0       	ldi	r25, 0x02	; 2
     efc:	0e 94 7b 0e 	call	0x1cf6	; 0x1cf6 <_ZN5Print5printEPKc>
     f00:	be 01       	movw	r22, r28
     f02:	6a 5f       	subi	r22, 0xFA	; 250
     f04:	7f 4f       	sbci	r23, 0xFF	; 255
     f06:	81 e7       	ldi	r24, 0x71	; 113
     f08:	92 e0       	ldi	r25, 0x02	; 2
     f0a:	0e 94 e5 18 	call	0x31ca	; 0x31ca <_ZN10I2C_eeprom8readByteEj>
     f0e:	80 93 58 02 	sts	0x0258, r24	; 0x800258 <__data_end>
     f12:	be 01       	movw	r22, r28
     f14:	69 5f       	subi	r22, 0xF9	; 249
     f16:	7f 4f       	sbci	r23, 0xFF	; 255
     f18:	81 e7       	ldi	r24, 0x71	; 113
     f1a:	92 e0       	ldi	r25, 0x02	; 2
     f1c:	0e 94 e5 18 	call	0x31ca	; 0x31ca <_ZN10I2C_eeprom8readByteEj>
     f20:	80 93 59 02 	sts	0x0259, r24	; 0x800259 <__data_end+0x1>
     f24:	60 91 58 02 	lds	r22, 0x0258	; 0x800258 <__data_end>
     f28:	70 91 59 02 	lds	r23, 0x0259	; 0x800259 <__data_end+0x1>
     f2c:	4a e0       	ldi	r20, 0x0A	; 10
     f2e:	50 e0       	ldi	r21, 0x00	; 0
     f30:	89 eb       	ldi	r24, 0xB9	; 185
     f32:	92 e0       	ldi	r25, 0x02	; 2
     f34:	0e 94 09 0f 	call	0x1e12	; 0x1e12 <_ZN5Print5printEji>
     f38:	6d e2       	ldi	r22, 0x2D	; 45
     f3a:	71 e0       	ldi	r23, 0x01	; 1
     f3c:	89 eb       	ldi	r24, 0xB9	; 185
     f3e:	92 e0       	ldi	r25, 0x02	; 2
     f40:	0e 94 7b 0e 	call	0x1cf6	; 0x1cf6 <_ZN5Print5printEPKc>
     f44:	be 01       	movw	r22, r28
     f46:	68 5f       	subi	r22, 0xF8	; 248
     f48:	7f 4f       	sbci	r23, 0xFF	; 255
     f4a:	81 e7       	ldi	r24, 0x71	; 113
     f4c:	92 e0       	ldi	r25, 0x02	; 2
     f4e:	0e 94 e5 18 	call	0x31ca	; 0x31ca <_ZN10I2C_eeprom8readByteEj>
     f52:	80 93 58 02 	sts	0x0258, r24	; 0x800258 <__data_end>
     f56:	be 01       	movw	r22, r28
     f58:	67 5f       	subi	r22, 0xF7	; 247
     f5a:	7f 4f       	sbci	r23, 0xFF	; 255
     f5c:	81 e7       	ldi	r24, 0x71	; 113
     f5e:	92 e0       	ldi	r25, 0x02	; 2
     f60:	0e 94 e5 18 	call	0x31ca	; 0x31ca <_ZN10I2C_eeprom8readByteEj>
     f64:	80 93 59 02 	sts	0x0259, r24	; 0x800259 <__data_end+0x1>
     f68:	60 91 58 02 	lds	r22, 0x0258	; 0x800258 <__data_end>
     f6c:	70 91 59 02 	lds	r23, 0x0259	; 0x800259 <__data_end+0x1>
     f70:	4a e0       	ldi	r20, 0x0A	; 10
     f72:	50 e0       	ldi	r21, 0x00	; 0
     f74:	89 eb       	ldi	r24, 0xB9	; 185
     f76:	92 e0       	ldi	r25, 0x02	; 2
     f78:	0e 94 09 0f 	call	0x1e12	; 0x1e12 <_ZN5Print5printEji>
     f7c:	6d e2       	ldi	r22, 0x2D	; 45
     f7e:	71 e0       	ldi	r23, 0x01	; 1
     f80:	89 eb       	ldi	r24, 0xB9	; 185
     f82:	92 e0       	ldi	r25, 0x02	; 2
     f84:	0e 94 7b 0e 	call	0x1cf6	; 0x1cf6 <_ZN5Print5printEPKc>
     f88:	be 01       	movw	r22, r28
     f8a:	66 5f       	subi	r22, 0xF6	; 246
     f8c:	7f 4f       	sbci	r23, 0xFF	; 255
     f8e:	81 e7       	ldi	r24, 0x71	; 113
     f90:	92 e0       	ldi	r25, 0x02	; 2
     f92:	0e 94 e5 18 	call	0x31ca	; 0x31ca <_ZN10I2C_eeprom8readByteEj>
     f96:	80 93 58 02 	sts	0x0258, r24	; 0x800258 <__data_end>
     f9a:	be 01       	movw	r22, r28
     f9c:	65 5f       	subi	r22, 0xF5	; 245
     f9e:	7f 4f       	sbci	r23, 0xFF	; 255
     fa0:	81 e7       	ldi	r24, 0x71	; 113
     fa2:	92 e0       	ldi	r25, 0x02	; 2
     fa4:	0e 94 e5 18 	call	0x31ca	; 0x31ca <_ZN10I2C_eeprom8readByteEj>
     fa8:	80 93 59 02 	sts	0x0259, r24	; 0x800259 <__data_end+0x1>
     fac:	60 91 58 02 	lds	r22, 0x0258	; 0x800258 <__data_end>
     fb0:	70 91 59 02 	lds	r23, 0x0259	; 0x800259 <__data_end+0x1>
     fb4:	4a e0       	ldi	r20, 0x0A	; 10
     fb6:	50 e0       	ldi	r21, 0x00	; 0
     fb8:	89 eb       	ldi	r24, 0xB9	; 185
     fba:	92 e0       	ldi	r25, 0x02	; 2
     fbc:	0e 94 09 0f 	call	0x1e12	; 0x1e12 <_ZN5Print5printEji>
     fc0:	6d e2       	ldi	r22, 0x2D	; 45
     fc2:	71 e0       	ldi	r23, 0x01	; 1
     fc4:	89 eb       	ldi	r24, 0xB9	; 185
     fc6:	92 e0       	ldi	r25, 0x02	; 2
     fc8:	0e 94 7b 0e 	call	0x1cf6	; 0x1cf6 <_ZN5Print5printEPKc>
     fcc:	be 01       	movw	r22, r28
     fce:	64 5f       	subi	r22, 0xF4	; 244
     fd0:	7f 4f       	sbci	r23, 0xFF	; 255
     fd2:	81 e7       	ldi	r24, 0x71	; 113
     fd4:	92 e0       	ldi	r25, 0x02	; 2
     fd6:	0e 94 e5 18 	call	0x31ca	; 0x31ca <_ZN10I2C_eeprom8readByteEj>
     fda:	80 93 58 02 	sts	0x0258, r24	; 0x800258 <__data_end>
     fde:	be 01       	movw	r22, r28
     fe0:	63 5f       	subi	r22, 0xF3	; 243
     fe2:	7f 4f       	sbci	r23, 0xFF	; 255
     fe4:	81 e7       	ldi	r24, 0x71	; 113
     fe6:	92 e0       	ldi	r25, 0x02	; 2
     fe8:	0e 94 e5 18 	call	0x31ca	; 0x31ca <_ZN10I2C_eeprom8readByteEj>
     fec:	80 93 59 02 	sts	0x0259, r24	; 0x800259 <__data_end+0x1>
     ff0:	60 91 58 02 	lds	r22, 0x0258	; 0x800258 <__data_end>
     ff4:	70 91 59 02 	lds	r23, 0x0259	; 0x800259 <__data_end+0x1>
     ff8:	4a e0       	ldi	r20, 0x0A	; 10
     ffa:	50 e0       	ldi	r21, 0x00	; 0
     ffc:	89 eb       	ldi	r24, 0xB9	; 185
     ffe:	92 e0       	ldi	r25, 0x02	; 2
    1000:	0e 94 09 0f 	call	0x1e12	; 0x1e12 <_ZN5Print5printEji>
    1004:	6d e2       	ldi	r22, 0x2D	; 45
    1006:	71 e0       	ldi	r23, 0x01	; 1
    1008:	89 eb       	ldi	r24, 0xB9	; 185
    100a:	92 e0       	ldi	r25, 0x02	; 2
    100c:	0e 94 7b 0e 	call	0x1cf6	; 0x1cf6 <_ZN5Print5printEPKc>
    1010:	be 01       	movw	r22, r28
    1012:	62 5f       	subi	r22, 0xF2	; 242
    1014:	7f 4f       	sbci	r23, 0xFF	; 255
    1016:	81 e7       	ldi	r24, 0x71	; 113
    1018:	92 e0       	ldi	r25, 0x02	; 2
    101a:	0e 94 e5 18 	call	0x31ca	; 0x31ca <_ZN10I2C_eeprom8readByteEj>
    101e:	80 93 58 02 	sts	0x0258, r24	; 0x800258 <__data_end>
    1022:	be 01       	movw	r22, r28
    1024:	61 5f       	subi	r22, 0xF1	; 241
    1026:	7f 4f       	sbci	r23, 0xFF	; 255
    1028:	81 e7       	ldi	r24, 0x71	; 113
    102a:	92 e0       	ldi	r25, 0x02	; 2
    102c:	0e 94 e5 18 	call	0x31ca	; 0x31ca <_ZN10I2C_eeprom8readByteEj>
    1030:	80 93 59 02 	sts	0x0259, r24	; 0x800259 <__data_end+0x1>
    1034:	60 96       	adiw	r28, 0x10	; 16
    1036:	60 91 58 02 	lds	r22, 0x0258	; 0x800258 <__data_end>
    103a:	70 91 59 02 	lds	r23, 0x0259	; 0x800259 <__data_end+0x1>
    103e:	4a e0       	ldi	r20, 0x0A	; 10
    1040:	50 e0       	ldi	r21, 0x00	; 0
    1042:	89 eb       	ldi	r24, 0xB9	; 185
    1044:	92 e0       	ldi	r25, 0x02	; 2
    1046:	0e 94 09 0f 	call	0x1e12	; 0x1e12 <_ZN5Print5printEji>
    104a:	6d e2       	ldi	r22, 0x2D	; 45
    104c:	71 e0       	ldi	r23, 0x01	; 1
    104e:	89 eb       	ldi	r24, 0xB9	; 185
    1050:	92 e0       	ldi	r25, 0x02	; 2
    1052:	0e 94 7b 0e 	call	0x1cf6	; 0x1cf6 <_ZN5Print5printEPKc>
    1056:	6d e2       	ldi	r22, 0x2D	; 45
    1058:	72 e0       	ldi	r23, 0x02	; 2
    105a:	89 eb       	ldi	r24, 0xB9	; 185
    105c:	92 e0       	ldi	r25, 0x02	; 2
    105e:	0e 94 88 0e 	call	0x1d10	; 0x1d10 <_ZN5Print7printlnEPKc>
    1062:	fd ce       	rjmp	.-518    	; 0xe5e <_Z11dump_memoryv+0x38>
    1064:	df 91       	pop	r29
    1066:	cf 91       	pop	r28
    1068:	1f 91       	pop	r17
    106a:	0f 91       	pop	r16
    106c:	ff 90       	pop	r15
    106e:	ef 90       	pop	r14
    1070:	df 90       	pop	r13
    1072:	cf 90       	pop	r12
    1074:	08 95       	ret

00001076 <_GLOBAL__sub_I_ass_i2c_delay_half>:
    1076:	82 e8       	ldi	r24, 0x82	; 130
    1078:	92 e0       	ldi	r25, 0x02	; 2
    107a:	0e 94 cd 08 	call	0x119a	; 0x119a <_ZN8tcs34725C1Ev>
    107e:	e8 e7       	ldi	r30, 0x78	; 120
    1080:	f2 e0       	ldi	r31, 0x02	; 2
    1082:	83 ef       	ldi	r24, 0xF3	; 243
    1084:	91 e0       	ldi	r25, 0x01	; 1
    1086:	91 83       	std	Z+1, r25	; 0x01
    1088:	80 83       	st	Z, r24
    108a:	11 86       	std	Z+9, r1	; 0x09
    108c:	13 82       	std	Z+3, r1	; 0x03
    108e:	80 e1       	ldi	r24, 0x10	; 16
    1090:	84 83       	std	Z+4, r24	; 0x04
    1092:	8f e1       	ldi	r24, 0x1F	; 31
    1094:	9a e0       	ldi	r25, 0x0A	; 10
    1096:	a0 e0       	ldi	r26, 0x00	; 0
    1098:	b0 e0       	ldi	r27, 0x00	; 0
    109a:	85 83       	std	Z+5, r24	; 0x05
    109c:	96 83       	std	Z+6, r25	; 0x06
    109e:	a7 83       	std	Z+7, r26	; 0x07
    10a0:	b0 87       	std	Z+8, r27	; 0x08
    10a2:	40 e0       	ldi	r20, 0x00	; 0
    10a4:	50 e2       	ldi	r21, 0x20	; 32
    10a6:	60 e5       	ldi	r22, 0x50	; 80
    10a8:	81 e7       	ldi	r24, 0x71	; 113
    10aa:	92 e0       	ldi	r25, 0x02	; 2
    10ac:	0c 94 05 18 	jmp	0x300a	; 0x300a <_ZN10I2C_eepromC1Ehj>

000010b0 <_Z11serial_pollv>:
}


void serial_poll()
{
        while( Serial.available() == 0)
    10b0:	89 eb       	ldi	r24, 0xB9	; 185
    10b2:	92 e0       	ldi	r25, 0x02	; 2
    10b4:	0e 94 75 0c 	call	0x18ea	; 0x18ea <_ZN14HardwareSerial9availableEv>
    10b8:	89 2b       	or	r24, r25
    10ba:	d1 f3       	breq	.-12     	; 0x10b0 <_Z11serial_pollv>
        { }
}
    10bc:	08 95       	ret

000010be <_Z12set_intervalv>:

void set_interval()
{
        if(DEBUG)
        {
                print_time();
    10be:	0e 94 6a 05 	call	0xad4	; 0xad4 <_Z10print_timev>
                Serial.print("Set interval: ");
    10c2:	6c ec       	ldi	r22, 0xCC	; 204
    10c4:	71 e0       	ldi	r23, 0x01	; 1
    10c6:	89 eb       	ldi	r24, 0xB9	; 185
    10c8:	92 e0       	ldi	r25, 0x02	; 2
    10ca:	0e 94 7b 0e 	call	0x1cf6	; 0x1cf6 <_ZN5Print5printEPKc>
        }
        serial_poll();
    10ce:	0e 94 58 08 	call	0x10b0	; 0x10b0 <_Z11serial_pollv>
        interval = Serial.read();
    10d2:	89 eb       	ldi	r24, 0xB9	; 185
    10d4:	92 e0       	ldi	r25, 0x02	; 2
    10d6:	0e 94 8f 0c 	call	0x191e	; 0x191e <_ZN14HardwareSerial4readEv>
    10da:	80 93 61 02 	sts	0x0261, r24	; 0x800261 <interval>
        if(DEBUG)
        {
                Serial.println(interval);
    10de:	4a e0       	ldi	r20, 0x0A	; 10
    10e0:	50 e0       	ldi	r21, 0x00	; 0
    10e2:	68 2f       	mov	r22, r24
    10e4:	89 eb       	ldi	r24, 0xB9	; 185
    10e6:	92 e0       	ldi	r25, 0x02	; 2
    10e8:	0c 94 f7 0e 	jmp	0x1dee	; 0x1dee <_ZN5Print7printlnEhi>

000010ec <_Z19serial_clear_bufferv>:
        while( Serial.available() == 0)
        { }
}

void serial_clear_buffer()
{
    10ec:	cf 93       	push	r28
    10ee:	df 93       	push	r29
    10f0:	ca e0       	ldi	r28, 0x0A	; 10
    10f2:	d0 e0       	ldi	r29, 0x00	; 0
        byte w = 0;
        for (int i = 0; i < 10; i++)
        {
                while (Serial.available() > 0)
    10f4:	89 eb       	ldi	r24, 0xB9	; 185
    10f6:	92 e0       	ldi	r25, 0x02	; 2
    10f8:	0e 94 75 0c 	call	0x18ea	; 0x18ea <_ZN14HardwareSerial9availableEv>
    10fc:	18 16       	cp	r1, r24
    10fe:	19 06       	cpc	r1, r25
    1100:	5c f4       	brge	.+22     	; 0x1118 <_Z19serial_clear_bufferv+0x2c>
                {
                        char k = Serial.read();
    1102:	89 eb       	ldi	r24, 0xB9	; 185
    1104:	92 e0       	ldi	r25, 0x02	; 2
    1106:	0e 94 8f 0c 	call	0x191e	; 0x191e <_ZN14HardwareSerial4readEv>
                        w++;
                        delay(1);
    110a:	61 e0       	ldi	r22, 0x01	; 1
    110c:	70 e0       	ldi	r23, 0x00	; 0
    110e:	80 e0       	ldi	r24, 0x00	; 0
    1110:	90 e0       	ldi	r25, 0x00	; 0
    1112:	0e 94 7e 10 	call	0x20fc	; 0x20fc <delay>
void serial_clear_buffer()
{
        byte w = 0;
        for (int i = 0; i < 10; i++)
        {
                while (Serial.available() > 0)
    1116:	ee cf       	rjmp	.-36     	; 0x10f4 <_Z19serial_clear_bufferv+0x8>
                {
                        char k = Serial.read();
                        w++;
                        delay(1);
                }
                delay(1);
    1118:	61 e0       	ldi	r22, 0x01	; 1
    111a:	70 e0       	ldi	r23, 0x00	; 0
    111c:	80 e0       	ldi	r24, 0x00	; 0
    111e:	90 e0       	ldi	r25, 0x00	; 0
    1120:	0e 94 7e 10 	call	0x20fc	; 0x20fc <delay>
    1124:	21 97       	sbiw	r28, 0x01	; 1
}

void serial_clear_buffer()
{
        byte w = 0;
        for (int i = 0; i < 10; i++)
    1126:	31 f7       	brne	.-52     	; 0x10f4 <_Z19serial_clear_bufferv+0x8>
                        w++;
                        delay(1);
                }
                delay(1);
        }
}
    1128:	df 91       	pop	r29
    112a:	cf 91       	pop	r28
    112c:	08 95       	ret

0000112e <loop>:
        cycled_sleep();
}

void loop()
{
        serial_poll();
    112e:	0e 94 58 08 	call	0x10b0	; 0x10b0 <_Z11serial_pollv>
        cmd = Serial.read();
    1132:	89 eb       	ldi	r24, 0xB9	; 185
    1134:	92 e0       	ldi	r25, 0x02	; 2
    1136:	0e 94 8f 0c 	call	0x191e	; 0x191e <_ZN14HardwareSerial4readEv>
    113a:	80 93 62 02 	sts	0x0262, r24	; 0x800262 <cmd>
        switch(cmd)
    113e:	90 e0       	ldi	r25, 0x00	; 0
    1140:	fc 01       	movw	r30, r24
    1142:	f0 97       	sbiw	r30, 0x30	; 48
    1144:	e8 30       	cpi	r30, 0x08	; 8
    1146:	f1 05       	cpc	r31, r1
    1148:	20 f5       	brcc	.+72     	; 0x1192 <loop+0x64>
    114a:	ec 5c       	subi	r30, 0xCC	; 204
    114c:	ff 4f       	sbci	r31, 0xFF	; 255
    114e:	0c 94 5e 1b 	jmp	0x36bc	; 0x36bc <__tablejump2__>
        {
        case SAMPLE:
                serial_clear_buffer();
    1152:	0e 94 76 08 	call	0x10ec	; 0x10ec <_Z19serial_clear_bufferv>
                sample();
    1156:	0e 94 8d 06 	call	0xd1a	; 0xd1a <_Z6samplev>
                store_data();
    115a:	0e 94 e7 03 	call	0x7ce	; 0x7ce <_Z10store_datav>
                update_memory_ptr();
    115e:	0e 94 bc 03 	call	0x778	; 0x778 <_Z17update_memory_ptrv>
    1162:	19 c0       	rjmp	.+50     	; 0x1196 <loop+0x68>
                serial_clear_buffer();
                sleep();
                break;

        case SET_INTERVAL:
                serial_clear_buffer();
    1164:	0e 94 76 08 	call	0x10ec	; 0x10ec <_Z19serial_clear_bufferv>
                set_interval();
    1168:	0e 94 5f 08 	call	0x10be	; 0x10be <_Z12set_intervalv>
                store_interval();
    116c:	0e 94 c4 03 	call	0x788	; 0x788 <_Z14store_intervalv>
    1170:	12 c0       	rjmp	.+36     	; 0x1196 <loop+0x68>
                sleep();
                break;

        case DOWNLOAD_DATA:
                serial_clear_buffer();
    1172:	0e 94 76 08 	call	0x10ec	; 0x10ec <_Z19serial_clear_bufferv>
                dump_memory();
    1176:	0e 94 13 07 	call	0xe26	; 0xe26 <_Z11dump_memoryv>
    117a:	0d c0       	rjmp	.+26     	; 0x1196 <loop+0x68>
                sleep();
                break;

        case CLEAR_MEMORY:
                serial_clear_buffer();
    117c:	0e 94 76 08 	call	0x10ec	; 0x10ec <_Z19serial_clear_bufferv>
                clear_memory();
    1180:	0e 94 cc 05 	call	0xb98	; 0xb98 <_Z12clear_memoryv>
    1184:	08 c0       	rjmp	.+16     	; 0x1196 <loop+0x68>
                serial_clear_buffer();
                sleep();
                break;

        case START:
                serial_clear_buffer();
    1186:	0e 94 76 08 	call	0x10ec	; 0x10ec <_Z19serial_clear_bufferv>
                set_alarm();
    118a:	0e 94 cc 03 	call	0x798	; 0x798 <_Z9set_alarmv>
                cycled_sleep();
    118e:	0c 94 10 06 	jmp	0xc20	; 0xc20 <_Z12cycled_sleepv>
                break;

        default:
                serial_clear_buffer();
    1192:	0e 94 76 08 	call	0x10ec	; 0x10ec <_Z19serial_clear_bufferv>
                sleep();
    1196:	0c 94 dc 05 	jmp	0xbb8	; 0xbb8 <_Z5sleepv>

0000119a <_ZN8tcs34725C1Ev>:
	cpl = (atime_ms * againx) / (TCS34725_GA * TCS34725_DF);
	maxlux = 65535 / (cpl * 3);

	lux = (TCS34725_R_Coef * float(r_comp) + TCS34725_G_Coef * float(g_comp) + TCS34725_B_Coef * float(b_comp)) / cpl;
	ct = TCS34725_CT_Coef * float(b_comp) / float(r_comp) + TCS34725_CT_Offset;
}
    119a:	fc 01       	movw	r30, r24
    119c:	10 82       	st	Z, r1
    119e:	11 82       	std	Z+1, r1	; 0x01
    11a0:	13 aa       	std	Z+51, r1	; 0x33
    11a2:	12 aa       	std	Z+50, r1	; 0x32
    11a4:	40 e0       	ldi	r20, 0x00	; 0
    11a6:	6f ef       	ldi	r22, 0xFF	; 255
    11a8:	c4 96       	adiw	r24, 0x34	; 52
    11aa:	0c 94 90 11 	jmp	0x2320	; 0x2320 <_ZN17Adafruit_TCS34725C1E25tcs34725IntegrationTime_t14tcs34725Gain_t>

000011ae <_ZN8tcs3472511setGainTimeEv>:
    11ae:	ef 92       	push	r14
    11b0:	ff 92       	push	r15
    11b2:	0f 93       	push	r16
    11b4:	1f 93       	push	r17
    11b6:	cf 93       	push	r28
    11b8:	df 93       	push	r29
    11ba:	ec 01       	movw	r28, r24
    11bc:	7c 01       	movw	r14, r24
    11be:	84 e3       	ldi	r24, 0x34	; 52
    11c0:	e8 0e       	add	r14, r24
    11c2:	f1 1c       	adc	r15, r1
    11c4:	8a a9       	ldd	r24, Y+50	; 0x32
    11c6:	9b a9       	ldd	r25, Y+51	; 0x33
    11c8:	16 e0       	ldi	r17, 0x06	; 6
    11ca:	18 9f       	mul	r17, r24
    11cc:	f0 01       	movw	r30, r0
    11ce:	19 9f       	mul	r17, r25
    11d0:	f0 0d       	add	r31, r0
    11d2:	11 24       	eor	r1, r1
    11d4:	e3 50       	subi	r30, 0x03	; 3
    11d6:	fe 4f       	sbci	r31, 0xFE	; 254
    11d8:	60 81       	ld	r22, Z
    11da:	c7 01       	movw	r24, r14
    11dc:	0e 94 1a 12 	call	0x2434	; 0x2434 <_ZN17Adafruit_TCS347257setGainE14tcs34725Gain_t>
    11e0:	8a a9       	ldd	r24, Y+50	; 0x32
    11e2:	9b a9       	ldd	r25, Y+51	; 0x33
    11e4:	18 9f       	mul	r17, r24
    11e6:	f0 01       	movw	r30, r0
    11e8:	19 9f       	mul	r17, r25
    11ea:	f0 0d       	add	r31, r0
    11ec:	11 24       	eor	r1, r1
    11ee:	e3 50       	subi	r30, 0x03	; 3
    11f0:	fe 4f       	sbci	r31, 0xFE	; 254
    11f2:	61 81       	ldd	r22, Z+1	; 0x01
    11f4:	c7 01       	movw	r24, r14
    11f6:	0e 94 54 12 	call	0x24a8	; 0x24a8 <_ZN17Adafruit_TCS3472518setIntegrationTimeE25tcs34725IntegrationTime_t>
    11fa:	2a a9       	ldd	r18, Y+50	; 0x32
    11fc:	3b a9       	ldd	r19, Y+51	; 0x33
    11fe:	12 9f       	mul	r17, r18
    1200:	c0 01       	movw	r24, r0
    1202:	13 9f       	mul	r17, r19
    1204:	90 0d       	add	r25, r0
    1206:	11 24       	eor	r1, r1
    1208:	8c 01       	movw	r16, r24
    120a:	03 50       	subi	r16, 0x03	; 3
    120c:	1e 4f       	sbci	r17, 0xFE	; 254
    120e:	f8 01       	movw	r30, r16
    1210:	81 81       	ldd	r24, Z+1	; 0x01
    1212:	90 e0       	ldi	r25, 0x00	; 0
    1214:	9d 83       	std	Y+5, r25	; 0x05
    1216:	8c 83       	std	Y+4, r24	; 0x04
    1218:	60 e0       	ldi	r22, 0x00	; 0
    121a:	71 e0       	ldi	r23, 0x01	; 1
    121c:	68 1b       	sub	r22, r24
    121e:	79 0b       	sbc	r23, r25
    1220:	80 e0       	ldi	r24, 0x00	; 0
    1222:	90 e0       	ldi	r25, 0x00	; 0
    1224:	0e 94 51 0b 	call	0x16a2	; 0x16a2 <__floatunsisf>
    1228:	2a e9       	ldi	r18, 0x9A	; 154
    122a:	39 e9       	ldi	r19, 0x99	; 153
    122c:	49 e1       	ldi	r20, 0x19	; 25
    122e:	50 e4       	ldi	r21, 0x40	; 64
    1230:	0e 94 08 0c 	call	0x1810	; 0x1810 <__mulsf3>
    1234:	0e 94 22 0b 	call	0x1644	; 0x1644 <__fixunssfsi>
    1238:	7f 83       	std	Y+7, r23	; 0x07
    123a:	6e 83       	std	Y+6, r22	; 0x06
    123c:	f8 01       	movw	r30, r16
    123e:	80 81       	ld	r24, Z
    1240:	81 30       	cpi	r24, 0x01	; 1
    1242:	59 f0       	breq	.+22     	; 0x125a <_ZN8tcs3472511setGainTimeEv+0xac>
    1244:	38 f0       	brcs	.+14     	; 0x1254 <_ZN8tcs3472511setGainTimeEv+0xa6>
    1246:	82 30       	cpi	r24, 0x02	; 2
    1248:	59 f0       	breq	.+22     	; 0x1260 <_ZN8tcs3472511setGainTimeEv+0xb2>
    124a:	83 30       	cpi	r24, 0x03	; 3
    124c:	69 f4       	brne	.+26     	; 0x1268 <_ZN8tcs3472511setGainTimeEv+0xba>
    124e:	8c e3       	ldi	r24, 0x3C	; 60
    1250:	90 e0       	ldi	r25, 0x00	; 0
    1252:	08 c0       	rjmp	.+16     	; 0x1264 <_ZN8tcs3472511setGainTimeEv+0xb6>
    1254:	81 e0       	ldi	r24, 0x01	; 1
    1256:	90 e0       	ldi	r25, 0x00	; 0
    1258:	05 c0       	rjmp	.+10     	; 0x1264 <_ZN8tcs3472511setGainTimeEv+0xb6>
    125a:	84 e0       	ldi	r24, 0x04	; 4
    125c:	90 e0       	ldi	r25, 0x00	; 0
    125e:	02 c0       	rjmp	.+4      	; 0x1264 <_ZN8tcs3472511setGainTimeEv+0xb6>
    1260:	80 e1       	ldi	r24, 0x10	; 16
    1262:	90 e0       	ldi	r25, 0x00	; 0
    1264:	9b 83       	std	Y+3, r25	; 0x03
    1266:	8a 83       	std	Y+2, r24	; 0x02
    1268:	df 91       	pop	r29
    126a:	cf 91       	pop	r28
    126c:	1f 91       	pop	r17
    126e:	0f 91       	pop	r16
    1270:	ff 90       	pop	r15
    1272:	ef 90       	pop	r14
    1274:	08 95       	ret

00001276 <_ZN8tcs347255beginEv>:
    1276:	0f 93       	push	r16
    1278:	1f 93       	push	r17
    127a:	cf 93       	push	r28
    127c:	df 93       	push	r29
    127e:	00 d0       	rcall	.+0      	; 0x1280 <_ZN8tcs347255beginEv+0xa>
    1280:	1f 92       	push	r1
    1282:	cd b7       	in	r28, 0x3d	; 61
    1284:	de b7       	in	r29, 0x3e	; 62
    1286:	8c 01       	movw	r16, r24
    1288:	fc 01       	movw	r30, r24
    128a:	82 a9       	ldd	r24, Z+50	; 0x32
    128c:	93 a9       	ldd	r25, Z+51	; 0x33
    128e:	26 e0       	ldi	r18, 0x06	; 6
    1290:	28 9f       	mul	r18, r24
    1292:	f0 01       	movw	r30, r0
    1294:	29 9f       	mul	r18, r25
    1296:	f0 0d       	add	r31, r0
    1298:	11 24       	eor	r1, r1
    129a:	e3 50       	subi	r30, 0x03	; 3
    129c:	fe 4f       	sbci	r31, 0xFE	; 254
    129e:	40 81       	ld	r20, Z
    12a0:	61 81       	ldd	r22, Z+1	; 0x01
    12a2:	ce 01       	movw	r24, r28
    12a4:	01 96       	adiw	r24, 0x01	; 1
    12a6:	0e 94 90 11 	call	0x2320	; 0x2320 <_ZN17Adafruit_TCS34725C1E25tcs34725IntegrationTime_t14tcs34725Gain_t>
    12aa:	89 81       	ldd	r24, Y+1	; 0x01
    12ac:	9a 81       	ldd	r25, Y+2	; 0x02
    12ae:	ab 81       	ldd	r26, Y+3	; 0x03
    12b0:	f8 01       	movw	r30, r16
    12b2:	84 ab       	std	Z+52, r24	; 0x34
    12b4:	95 ab       	std	Z+53, r25	; 0x35
    12b6:	a6 ab       	std	Z+54, r26	; 0x36
    12b8:	c8 01       	movw	r24, r16
    12ba:	c4 96       	adiw	r24, 0x34	; 52
    12bc:	0e 94 32 12 	call	0x2464	; 0x2464 <_ZN17Adafruit_TCS347255beginEv>
    12c0:	f8 01       	movw	r30, r16
    12c2:	80 83       	st	Z, r24
    12c4:	88 23       	and	r24, r24
    12c6:	19 f0       	breq	.+6      	; 0x12ce <_ZN8tcs347255beginEv+0x58>
    12c8:	c8 01       	movw	r24, r16
    12ca:	0e 94 d7 08 	call	0x11ae	; 0x11ae <_ZN8tcs3472511setGainTimeEv>
    12ce:	f8 01       	movw	r30, r16
    12d0:	80 81       	ld	r24, Z
    12d2:	0f 90       	pop	r0
    12d4:	0f 90       	pop	r0
    12d6:	0f 90       	pop	r0
    12d8:	df 91       	pop	r29
    12da:	cf 91       	pop	r28
    12dc:	1f 91       	pop	r17
    12de:	0f 91       	pop	r16
    12e0:	08 95       	ret

000012e2 <_ZN8tcs347257getDataEv>:
    12e2:	6f 92       	push	r6
    12e4:	7f 92       	push	r7
    12e6:	8f 92       	push	r8
    12e8:	9f 92       	push	r9
    12ea:	af 92       	push	r10
    12ec:	bf 92       	push	r11
    12ee:	cf 92       	push	r12
    12f0:	df 92       	push	r13
    12f2:	ef 92       	push	r14
    12f4:	ff 92       	push	r15
    12f6:	0f 93       	push	r16
    12f8:	1f 93       	push	r17
    12fa:	cf 93       	push	r28
    12fc:	df 93       	push	r29
    12fe:	ec 01       	movw	r28, r24
    1300:	4c 01       	movw	r8, r24
    1302:	8e e0       	ldi	r24, 0x0E	; 14
    1304:	88 0e       	add	r8, r24
    1306:	91 1c       	adc	r9, r1
    1308:	5e 01       	movw	r10, r28
    130a:	8c e0       	ldi	r24, 0x0C	; 12
    130c:	a8 0e       	add	r10, r24
    130e:	b1 1c       	adc	r11, r1
    1310:	6e 01       	movw	r12, r28
    1312:	8a e0       	ldi	r24, 0x0A	; 10
    1314:	c8 0e       	add	r12, r24
    1316:	d1 1c       	adc	r13, r1
    1318:	7e 01       	movw	r14, r28
    131a:	88 e0       	ldi	r24, 0x08	; 8
    131c:	e8 0e       	add	r14, r24
    131e:	f1 1c       	adc	r15, r1
    1320:	3e 01       	movw	r6, r28
    1322:	84 e3       	ldi	r24, 0x34	; 52
    1324:	68 0e       	add	r6, r24
    1326:	71 1c       	adc	r7, r1
    1328:	84 01       	movw	r16, r8
    132a:	95 01       	movw	r18, r10
    132c:	a6 01       	movw	r20, r12
    132e:	b7 01       	movw	r22, r14
    1330:	c3 01       	movw	r24, r6
    1332:	0e 94 6c 12 	call	0x24d8	; 0x24d8 <_ZN17Adafruit_TCS3472510getRawDataEPjS0_S0_S0_>
    1336:	8a a9       	ldd	r24, Y+50	; 0x32
    1338:	9b a9       	ldd	r25, Y+51	; 0x33
    133a:	26 e0       	ldi	r18, 0x06	; 6
    133c:	28 9f       	mul	r18, r24
    133e:	f0 01       	movw	r30, r0
    1340:	29 9f       	mul	r18, r25
    1342:	f0 0d       	add	r31, r0
    1344:	11 24       	eor	r1, r1
    1346:	e3 50       	subi	r30, 0x03	; 3
    1348:	fe 4f       	sbci	r31, 0xFE	; 254
    134a:	44 81       	ldd	r20, Z+4	; 0x04
    134c:	55 81       	ldd	r21, Z+5	; 0x05
    134e:	2e 85       	ldd	r18, Y+14	; 0x0e
    1350:	3f 85       	ldd	r19, Y+15	; 0x0f
    1352:	41 15       	cp	r20, r1
    1354:	51 05       	cpc	r21, r1
    1356:	29 f0       	breq	.+10     	; 0x1362 <_ZN8tcs347257getDataEv+0x80>
    1358:	42 17       	cp	r20, r18
    135a:	53 07       	cpc	r21, r19
    135c:	10 f4       	brcc	.+4      	; 0x1362 <_ZN8tcs347257getDataEv+0x80>
    135e:	01 96       	adiw	r24, 0x01	; 1
    1360:	11 c0       	rjmp	.+34     	; 0x1384 <_ZN8tcs347257getDataEv+0xa2>
    1362:	46 e0       	ldi	r20, 0x06	; 6
    1364:	48 9f       	mul	r20, r24
    1366:	f0 01       	movw	r30, r0
    1368:	49 9f       	mul	r20, r25
    136a:	f0 0d       	add	r31, r0
    136c:	11 24       	eor	r1, r1
    136e:	e3 50       	subi	r30, 0x03	; 3
    1370:	fe 4f       	sbci	r31, 0xFE	; 254
    1372:	42 81       	ldd	r20, Z+2	; 0x02
    1374:	53 81       	ldd	r21, Z+3	; 0x03
    1376:	41 15       	cp	r20, r1
    1378:	51 05       	cpc	r21, r1
    137a:	51 f1       	breq	.+84     	; 0x13d0 <_ZN8tcs347257getDataEv+0xee>
    137c:	24 17       	cp	r18, r20
    137e:	35 07       	cpc	r19, r21
    1380:	38 f5       	brcc	.+78     	; 0x13d0 <_ZN8tcs347257getDataEv+0xee>
    1382:	01 97       	sbiw	r24, 0x01	; 1
    1384:	9b ab       	std	Y+51, r25	; 0x33
    1386:	8a ab       	std	Y+50, r24	; 0x32
    1388:	ce 01       	movw	r24, r28
    138a:	0e 94 d7 08 	call	0x11ae	; 0x11ae <_ZN8tcs3472511setGainTimeEv>
    138e:	8c 81       	ldd	r24, Y+4	; 0x04
    1390:	9d 81       	ldd	r25, Y+5	; 0x05
    1392:	60 e0       	ldi	r22, 0x00	; 0
    1394:	71 e0       	ldi	r23, 0x01	; 1
    1396:	68 1b       	sub	r22, r24
    1398:	79 0b       	sbc	r23, r25
    139a:	80 e0       	ldi	r24, 0x00	; 0
    139c:	90 e0       	ldi	r25, 0x00	; 0
    139e:	0e 94 51 0b 	call	0x16a2	; 0x16a2 <__floatunsisf>
    13a2:	2a e9       	ldi	r18, 0x9A	; 154
    13a4:	39 e9       	ldi	r19, 0x99	; 153
    13a6:	49 e1       	ldi	r20, 0x19	; 25
    13a8:	50 e4       	ldi	r21, 0x40	; 64
    13aa:	0e 94 08 0c 	call	0x1810	; 0x1810 <__mulsf3>
    13ae:	20 e0       	ldi	r18, 0x00	; 0
    13b0:	30 e0       	ldi	r19, 0x00	; 0
    13b2:	40 e8       	ldi	r20, 0x80	; 128
    13b4:	50 e4       	ldi	r21, 0x40	; 64
    13b6:	0e 94 08 0c 	call	0x1810	; 0x1810 <__mulsf3>
    13ba:	0e 94 22 0b 	call	0x1644	; 0x1644 <__fixunssfsi>
    13be:	0e 94 7e 10 	call	0x20fc	; 0x20fc <delay>
    13c2:	84 01       	movw	r16, r8
    13c4:	95 01       	movw	r18, r10
    13c6:	a6 01       	movw	r20, r12
    13c8:	b7 01       	movw	r22, r14
    13ca:	c3 01       	movw	r24, r6
    13cc:	0e 94 6c 12 	call	0x24d8	; 0x24d8 <_ZN17Adafruit_TCS3472510getRawDataEPjS0_S0_S0_>
    13d0:	28 85       	ldd	r18, Y+8	; 0x08
    13d2:	39 85       	ldd	r19, Y+9	; 0x09
    13d4:	8a 85       	ldd	r24, Y+10	; 0x0a
    13d6:	9b 85       	ldd	r25, Y+11	; 0x0b
    13d8:	82 0f       	add	r24, r18
    13da:	93 1f       	adc	r25, r19
    13dc:	2c 85       	ldd	r18, Y+12	; 0x0c
    13de:	3d 85       	ldd	r19, Y+13	; 0x0d
    13e0:	82 0f       	add	r24, r18
    13e2:	93 1f       	adc	r25, r19
    13e4:	2e 85       	ldd	r18, Y+14	; 0x0e
    13e6:	3f 85       	ldd	r19, Y+15	; 0x0f
    13e8:	28 17       	cp	r18, r24
    13ea:	39 07       	cpc	r19, r25
    13ec:	28 f4       	brcc	.+10     	; 0x13f8 <_ZN8tcs347257getDataEv+0x116>
    13ee:	82 1b       	sub	r24, r18
    13f0:	93 0b       	sbc	r25, r19
    13f2:	96 95       	lsr	r25
    13f4:	87 95       	ror	r24
    13f6:	02 c0       	rjmp	.+4      	; 0x13fc <_ZN8tcs347257getDataEv+0x11a>
    13f8:	80 e0       	ldi	r24, 0x00	; 0
    13fa:	90 e0       	ldi	r25, 0x00	; 0
    13fc:	99 8b       	std	Y+17, r25	; 0x11
    13fe:	88 8b       	std	Y+16, r24	; 0x10
    1400:	df 91       	pop	r29
    1402:	cf 91       	pop	r28
    1404:	1f 91       	pop	r17
    1406:	0f 91       	pop	r16
    1408:	ff 90       	pop	r15
    140a:	ef 90       	pop	r14
    140c:	df 90       	pop	r13
    140e:	cf 90       	pop	r12
    1410:	bf 90       	pop	r11
    1412:	af 90       	pop	r10
    1414:	9f 90       	pop	r9
    1416:	8f 90       	pop	r8
    1418:	7f 90       	pop	r7
    141a:	6f 90       	pop	r6
    141c:	08 95       	ret

0000141e <_Z6write8hm>:

void write8 (uint8_t reg, uint32_t value)
{
    141e:	cf 93       	push	r28
    1420:	df 93       	push	r29
    1422:	c8 2f       	mov	r28, r24
    1424:	d4 2f       	mov	r29, r20
	Wire.beginTransmission(TCS34725_ADDRESS);
    1426:	69 e2       	ldi	r22, 0x29	; 41
    1428:	70 e0       	ldi	r23, 0x00	; 0
    142a:	80 e6       	ldi	r24, 0x60	; 96
    142c:	93 e0       	ldi	r25, 0x03	; 3
    142e:	0e 94 7f 17 	call	0x2efe	; 0x2efe <_ZN7TwoWire17beginTransmissionEi>
    void onRequest( void (*)(void) );

    inline size_t write(unsigned long n) { return write((uint8_t)n); }
    inline size_t write(long n) { return write((uint8_t)n); }
    inline size_t write(unsigned int n) { return write((uint8_t)n); }
    inline size_t write(int n) { return write((uint8_t)n); }
    1432:	6c 2f       	mov	r22, r28
    1434:	60 68       	ori	r22, 0x80	; 128
    1436:	80 e6       	ldi	r24, 0x60	; 96
    1438:	93 e0       	ldi	r25, 0x03	; 3
    143a:	0e 94 2c 17 	call	0x2e58	; 0x2e58 <_ZN7TwoWire5writeEh>
    virtual int peek(void);
    virtual void flush(void);
    void onReceive( void (*)(int) );
    void onRequest( void (*)(void) );

    inline size_t write(unsigned long n) { return write((uint8_t)n); }
    143e:	6d 2f       	mov	r22, r29
    1440:	80 e6       	ldi	r24, 0x60	; 96
    1442:	93 e0       	ldi	r25, 0x03	; 3
    1444:	0e 94 2c 17 	call	0x2e58	; 0x2e58 <_ZN7TwoWire5writeEh>
	Wire.write(value & 0xFF);
	#else
	Wire.send(TCS34725_COMMAND_BIT | reg);
	Wire.send(value & 0xFF);
	#endif
	Wire.endTransmission();
    1448:	80 e6       	ldi	r24, 0x60	; 96
    144a:	93 e0       	ldi	r25, 0x03	; 3
}
    144c:	df 91       	pop	r29
    144e:	cf 91       	pop	r28
	Wire.write(value & 0xFF);
	#else
	Wire.send(TCS34725_COMMAND_BIT | reg);
	Wire.send(value & 0xFF);
	#endif
	Wire.endTransmission();
    1450:	0c 94 fe 17 	jmp	0x2ffc	; 0x2ffc <_ZN7TwoWire15endTransmissionEv>

00001454 <_ZN8tcs347256enableEv>:
	#endif
}

void tcs34725::enable(void)
{
	write8(TCS34725_ENABLE, TCS34725_ENABLE_PON);
    1454:	41 e0       	ldi	r20, 0x01	; 1
    1456:	50 e0       	ldi	r21, 0x00	; 0
    1458:	60 e0       	ldi	r22, 0x00	; 0
    145a:	70 e0       	ldi	r23, 0x00	; 0
    145c:	80 e0       	ldi	r24, 0x00	; 0
    145e:	0e 94 0f 0a 	call	0x141e	; 0x141e <_Z6write8hm>
	delay(3);
    1462:	63 e0       	ldi	r22, 0x03	; 3
    1464:	70 e0       	ldi	r23, 0x00	; 0
    1466:	80 e0       	ldi	r24, 0x00	; 0
    1468:	90 e0       	ldi	r25, 0x00	; 0
    146a:	0e 94 7e 10 	call	0x20fc	; 0x20fc <delay>
	write8(TCS34725_ENABLE, TCS34725_ENABLE_PON | TCS34725_ENABLE_AEN);
    146e:	43 e0       	ldi	r20, 0x03	; 3
    1470:	50 e0       	ldi	r21, 0x00	; 0
    1472:	60 e0       	ldi	r22, 0x00	; 0
    1474:	70 e0       	ldi	r23, 0x00	; 0
    1476:	80 e0       	ldi	r24, 0x00	; 0
    1478:	0c 94 0f 0a 	jmp	0x141e	; 0x141e <_Z6write8hm>

0000147c <__subsf3>:
    147c:	50 58       	subi	r21, 0x80	; 128

0000147e <__addsf3>:
    147e:	bb 27       	eor	r27, r27
    1480:	aa 27       	eor	r26, r26
    1482:	0e 94 56 0a 	call	0x14ac	; 0x14ac <__addsf3x>
    1486:	0c 94 c9 0b 	jmp	0x1792	; 0x1792 <__fp_round>
    148a:	0e 94 bb 0b 	call	0x1776	; 0x1776 <__fp_pscA>
    148e:	38 f0       	brcs	.+14     	; 0x149e <__addsf3+0x20>
    1490:	0e 94 c2 0b 	call	0x1784	; 0x1784 <__fp_pscB>
    1494:	20 f0       	brcs	.+8      	; 0x149e <__addsf3+0x20>
    1496:	39 f4       	brne	.+14     	; 0x14a6 <__addsf3+0x28>
    1498:	9f 3f       	cpi	r25, 0xFF	; 255
    149a:	19 f4       	brne	.+6      	; 0x14a2 <__addsf3+0x24>
    149c:	26 f4       	brtc	.+8      	; 0x14a6 <__addsf3+0x28>
    149e:	0c 94 b8 0b 	jmp	0x1770	; 0x1770 <__fp_nan>
    14a2:	0e f4       	brtc	.+2      	; 0x14a6 <__addsf3+0x28>
    14a4:	e0 95       	com	r30
    14a6:	e7 fb       	bst	r30, 7
    14a8:	0c 94 b2 0b 	jmp	0x1764	; 0x1764 <__fp_inf>

000014ac <__addsf3x>:
    14ac:	e9 2f       	mov	r30, r25
    14ae:	0e 94 da 0b 	call	0x17b4	; 0x17b4 <__fp_split3>
    14b2:	58 f3       	brcs	.-42     	; 0x148a <__addsf3+0xc>
    14b4:	ba 17       	cp	r27, r26
    14b6:	62 07       	cpc	r22, r18
    14b8:	73 07       	cpc	r23, r19
    14ba:	84 07       	cpc	r24, r20
    14bc:	95 07       	cpc	r25, r21
    14be:	20 f0       	brcs	.+8      	; 0x14c8 <__addsf3x+0x1c>
    14c0:	79 f4       	brne	.+30     	; 0x14e0 <__addsf3x+0x34>
    14c2:	a6 f5       	brtc	.+104    	; 0x152c <__addsf3x+0x80>
    14c4:	0c 94 fc 0b 	jmp	0x17f8	; 0x17f8 <__fp_zero>
    14c8:	0e f4       	brtc	.+2      	; 0x14cc <__addsf3x+0x20>
    14ca:	e0 95       	com	r30
    14cc:	0b 2e       	mov	r0, r27
    14ce:	ba 2f       	mov	r27, r26
    14d0:	a0 2d       	mov	r26, r0
    14d2:	0b 01       	movw	r0, r22
    14d4:	b9 01       	movw	r22, r18
    14d6:	90 01       	movw	r18, r0
    14d8:	0c 01       	movw	r0, r24
    14da:	ca 01       	movw	r24, r20
    14dc:	a0 01       	movw	r20, r0
    14de:	11 24       	eor	r1, r1
    14e0:	ff 27       	eor	r31, r31
    14e2:	59 1b       	sub	r21, r25
    14e4:	99 f0       	breq	.+38     	; 0x150c <__addsf3x+0x60>
    14e6:	59 3f       	cpi	r21, 0xF9	; 249
    14e8:	50 f4       	brcc	.+20     	; 0x14fe <__addsf3x+0x52>
    14ea:	50 3e       	cpi	r21, 0xE0	; 224
    14ec:	68 f1       	brcs	.+90     	; 0x1548 <__addsf3x+0x9c>
    14ee:	1a 16       	cp	r1, r26
    14f0:	f0 40       	sbci	r31, 0x00	; 0
    14f2:	a2 2f       	mov	r26, r18
    14f4:	23 2f       	mov	r18, r19
    14f6:	34 2f       	mov	r19, r20
    14f8:	44 27       	eor	r20, r20
    14fa:	58 5f       	subi	r21, 0xF8	; 248
    14fc:	f3 cf       	rjmp	.-26     	; 0x14e4 <__addsf3x+0x38>
    14fe:	46 95       	lsr	r20
    1500:	37 95       	ror	r19
    1502:	27 95       	ror	r18
    1504:	a7 95       	ror	r26
    1506:	f0 40       	sbci	r31, 0x00	; 0
    1508:	53 95       	inc	r21
    150a:	c9 f7       	brne	.-14     	; 0x14fe <__addsf3x+0x52>
    150c:	7e f4       	brtc	.+30     	; 0x152c <__addsf3x+0x80>
    150e:	1f 16       	cp	r1, r31
    1510:	ba 0b       	sbc	r27, r26
    1512:	62 0b       	sbc	r22, r18
    1514:	73 0b       	sbc	r23, r19
    1516:	84 0b       	sbc	r24, r20
    1518:	ba f0       	brmi	.+46     	; 0x1548 <__addsf3x+0x9c>
    151a:	91 50       	subi	r25, 0x01	; 1
    151c:	a1 f0       	breq	.+40     	; 0x1546 <__addsf3x+0x9a>
    151e:	ff 0f       	add	r31, r31
    1520:	bb 1f       	adc	r27, r27
    1522:	66 1f       	adc	r22, r22
    1524:	77 1f       	adc	r23, r23
    1526:	88 1f       	adc	r24, r24
    1528:	c2 f7       	brpl	.-16     	; 0x151a <__addsf3x+0x6e>
    152a:	0e c0       	rjmp	.+28     	; 0x1548 <__addsf3x+0x9c>
    152c:	ba 0f       	add	r27, r26
    152e:	62 1f       	adc	r22, r18
    1530:	73 1f       	adc	r23, r19
    1532:	84 1f       	adc	r24, r20
    1534:	48 f4       	brcc	.+18     	; 0x1548 <__addsf3x+0x9c>
    1536:	87 95       	ror	r24
    1538:	77 95       	ror	r23
    153a:	67 95       	ror	r22
    153c:	b7 95       	ror	r27
    153e:	f7 95       	ror	r31
    1540:	9e 3f       	cpi	r25, 0xFE	; 254
    1542:	08 f0       	brcs	.+2      	; 0x1546 <__addsf3x+0x9a>
    1544:	b0 cf       	rjmp	.-160    	; 0x14a6 <__addsf3+0x28>
    1546:	93 95       	inc	r25
    1548:	88 0f       	add	r24, r24
    154a:	08 f0       	brcs	.+2      	; 0x154e <__addsf3x+0xa2>
    154c:	99 27       	eor	r25, r25
    154e:	ee 0f       	add	r30, r30
    1550:	97 95       	ror	r25
    1552:	87 95       	ror	r24
    1554:	08 95       	ret

00001556 <__cmpsf2>:
    1556:	0e 94 8e 0b 	call	0x171c	; 0x171c <__fp_cmp>
    155a:	08 f4       	brcc	.+2      	; 0x155e <__cmpsf2+0x8>
    155c:	81 e0       	ldi	r24, 0x01	; 1
    155e:	08 95       	ret

00001560 <__divsf3>:
    1560:	0e 94 c4 0a 	call	0x1588	; 0x1588 <__divsf3x>
    1564:	0c 94 c9 0b 	jmp	0x1792	; 0x1792 <__fp_round>
    1568:	0e 94 c2 0b 	call	0x1784	; 0x1784 <__fp_pscB>
    156c:	58 f0       	brcs	.+22     	; 0x1584 <__divsf3+0x24>
    156e:	0e 94 bb 0b 	call	0x1776	; 0x1776 <__fp_pscA>
    1572:	40 f0       	brcs	.+16     	; 0x1584 <__divsf3+0x24>
    1574:	29 f4       	brne	.+10     	; 0x1580 <__divsf3+0x20>
    1576:	5f 3f       	cpi	r21, 0xFF	; 255
    1578:	29 f0       	breq	.+10     	; 0x1584 <__divsf3+0x24>
    157a:	0c 94 b2 0b 	jmp	0x1764	; 0x1764 <__fp_inf>
    157e:	51 11       	cpse	r21, r1
    1580:	0c 94 fd 0b 	jmp	0x17fa	; 0x17fa <__fp_szero>
    1584:	0c 94 b8 0b 	jmp	0x1770	; 0x1770 <__fp_nan>

00001588 <__divsf3x>:
    1588:	0e 94 da 0b 	call	0x17b4	; 0x17b4 <__fp_split3>
    158c:	68 f3       	brcs	.-38     	; 0x1568 <__divsf3+0x8>

0000158e <__divsf3_pse>:
    158e:	99 23       	and	r25, r25
    1590:	b1 f3       	breq	.-20     	; 0x157e <__divsf3+0x1e>
    1592:	55 23       	and	r21, r21
    1594:	91 f3       	breq	.-28     	; 0x157a <__divsf3+0x1a>
    1596:	95 1b       	sub	r25, r21
    1598:	55 0b       	sbc	r21, r21
    159a:	bb 27       	eor	r27, r27
    159c:	aa 27       	eor	r26, r26
    159e:	62 17       	cp	r22, r18
    15a0:	73 07       	cpc	r23, r19
    15a2:	84 07       	cpc	r24, r20
    15a4:	38 f0       	brcs	.+14     	; 0x15b4 <__divsf3_pse+0x26>
    15a6:	9f 5f       	subi	r25, 0xFF	; 255
    15a8:	5f 4f       	sbci	r21, 0xFF	; 255
    15aa:	22 0f       	add	r18, r18
    15ac:	33 1f       	adc	r19, r19
    15ae:	44 1f       	adc	r20, r20
    15b0:	aa 1f       	adc	r26, r26
    15b2:	a9 f3       	breq	.-22     	; 0x159e <__divsf3_pse+0x10>
    15b4:	35 d0       	rcall	.+106    	; 0x1620 <__divsf3_pse+0x92>
    15b6:	0e 2e       	mov	r0, r30
    15b8:	3a f0       	brmi	.+14     	; 0x15c8 <__divsf3_pse+0x3a>
    15ba:	e0 e8       	ldi	r30, 0x80	; 128
    15bc:	32 d0       	rcall	.+100    	; 0x1622 <__divsf3_pse+0x94>
    15be:	91 50       	subi	r25, 0x01	; 1
    15c0:	50 40       	sbci	r21, 0x00	; 0
    15c2:	e6 95       	lsr	r30
    15c4:	00 1c       	adc	r0, r0
    15c6:	ca f7       	brpl	.-14     	; 0x15ba <__divsf3_pse+0x2c>
    15c8:	2b d0       	rcall	.+86     	; 0x1620 <__divsf3_pse+0x92>
    15ca:	fe 2f       	mov	r31, r30
    15cc:	29 d0       	rcall	.+82     	; 0x1620 <__divsf3_pse+0x92>
    15ce:	66 0f       	add	r22, r22
    15d0:	77 1f       	adc	r23, r23
    15d2:	88 1f       	adc	r24, r24
    15d4:	bb 1f       	adc	r27, r27
    15d6:	26 17       	cp	r18, r22
    15d8:	37 07       	cpc	r19, r23
    15da:	48 07       	cpc	r20, r24
    15dc:	ab 07       	cpc	r26, r27
    15de:	b0 e8       	ldi	r27, 0x80	; 128
    15e0:	09 f0       	breq	.+2      	; 0x15e4 <__divsf3_pse+0x56>
    15e2:	bb 0b       	sbc	r27, r27
    15e4:	80 2d       	mov	r24, r0
    15e6:	bf 01       	movw	r22, r30
    15e8:	ff 27       	eor	r31, r31
    15ea:	93 58       	subi	r25, 0x83	; 131
    15ec:	5f 4f       	sbci	r21, 0xFF	; 255
    15ee:	3a f0       	brmi	.+14     	; 0x15fe <__divsf3_pse+0x70>
    15f0:	9e 3f       	cpi	r25, 0xFE	; 254
    15f2:	51 05       	cpc	r21, r1
    15f4:	78 f0       	brcs	.+30     	; 0x1614 <__divsf3_pse+0x86>
    15f6:	0c 94 b2 0b 	jmp	0x1764	; 0x1764 <__fp_inf>
    15fa:	0c 94 fd 0b 	jmp	0x17fa	; 0x17fa <__fp_szero>
    15fe:	5f 3f       	cpi	r21, 0xFF	; 255
    1600:	e4 f3       	brlt	.-8      	; 0x15fa <__divsf3_pse+0x6c>
    1602:	98 3e       	cpi	r25, 0xE8	; 232
    1604:	d4 f3       	brlt	.-12     	; 0x15fa <__divsf3_pse+0x6c>
    1606:	86 95       	lsr	r24
    1608:	77 95       	ror	r23
    160a:	67 95       	ror	r22
    160c:	b7 95       	ror	r27
    160e:	f7 95       	ror	r31
    1610:	9f 5f       	subi	r25, 0xFF	; 255
    1612:	c9 f7       	brne	.-14     	; 0x1606 <__divsf3_pse+0x78>
    1614:	88 0f       	add	r24, r24
    1616:	91 1d       	adc	r25, r1
    1618:	96 95       	lsr	r25
    161a:	87 95       	ror	r24
    161c:	97 f9       	bld	r25, 7
    161e:	08 95       	ret
    1620:	e1 e0       	ldi	r30, 0x01	; 1
    1622:	66 0f       	add	r22, r22
    1624:	77 1f       	adc	r23, r23
    1626:	88 1f       	adc	r24, r24
    1628:	bb 1f       	adc	r27, r27
    162a:	62 17       	cp	r22, r18
    162c:	73 07       	cpc	r23, r19
    162e:	84 07       	cpc	r24, r20
    1630:	ba 07       	cpc	r27, r26
    1632:	20 f0       	brcs	.+8      	; 0x163c <__divsf3_pse+0xae>
    1634:	62 1b       	sub	r22, r18
    1636:	73 0b       	sbc	r23, r19
    1638:	84 0b       	sbc	r24, r20
    163a:	ba 0b       	sbc	r27, r26
    163c:	ee 1f       	adc	r30, r30
    163e:	88 f7       	brcc	.-30     	; 0x1622 <__divsf3_pse+0x94>
    1640:	e0 95       	com	r30
    1642:	08 95       	ret

00001644 <__fixunssfsi>:
    1644:	0e 94 e2 0b 	call	0x17c4	; 0x17c4 <__fp_splitA>
    1648:	88 f0       	brcs	.+34     	; 0x166c <__fixunssfsi+0x28>
    164a:	9f 57       	subi	r25, 0x7F	; 127
    164c:	98 f0       	brcs	.+38     	; 0x1674 <__fixunssfsi+0x30>
    164e:	b9 2f       	mov	r27, r25
    1650:	99 27       	eor	r25, r25
    1652:	b7 51       	subi	r27, 0x17	; 23
    1654:	b0 f0       	brcs	.+44     	; 0x1682 <__fixunssfsi+0x3e>
    1656:	e1 f0       	breq	.+56     	; 0x1690 <__fixunssfsi+0x4c>
    1658:	66 0f       	add	r22, r22
    165a:	77 1f       	adc	r23, r23
    165c:	88 1f       	adc	r24, r24
    165e:	99 1f       	adc	r25, r25
    1660:	1a f0       	brmi	.+6      	; 0x1668 <__fixunssfsi+0x24>
    1662:	ba 95       	dec	r27
    1664:	c9 f7       	brne	.-14     	; 0x1658 <__fixunssfsi+0x14>
    1666:	14 c0       	rjmp	.+40     	; 0x1690 <__fixunssfsi+0x4c>
    1668:	b1 30       	cpi	r27, 0x01	; 1
    166a:	91 f0       	breq	.+36     	; 0x1690 <__fixunssfsi+0x4c>
    166c:	0e 94 fc 0b 	call	0x17f8	; 0x17f8 <__fp_zero>
    1670:	b1 e0       	ldi	r27, 0x01	; 1
    1672:	08 95       	ret
    1674:	0c 94 fc 0b 	jmp	0x17f8	; 0x17f8 <__fp_zero>
    1678:	67 2f       	mov	r22, r23
    167a:	78 2f       	mov	r23, r24
    167c:	88 27       	eor	r24, r24
    167e:	b8 5f       	subi	r27, 0xF8	; 248
    1680:	39 f0       	breq	.+14     	; 0x1690 <__fixunssfsi+0x4c>
    1682:	b9 3f       	cpi	r27, 0xF9	; 249
    1684:	cc f3       	brlt	.-14     	; 0x1678 <__fixunssfsi+0x34>
    1686:	86 95       	lsr	r24
    1688:	77 95       	ror	r23
    168a:	67 95       	ror	r22
    168c:	b3 95       	inc	r27
    168e:	d9 f7       	brne	.-10     	; 0x1686 <__fixunssfsi+0x42>
    1690:	3e f4       	brtc	.+14     	; 0x16a0 <__fixunssfsi+0x5c>
    1692:	90 95       	com	r25
    1694:	80 95       	com	r24
    1696:	70 95       	com	r23
    1698:	61 95       	neg	r22
    169a:	7f 4f       	sbci	r23, 0xFF	; 255
    169c:	8f 4f       	sbci	r24, 0xFF	; 255
    169e:	9f 4f       	sbci	r25, 0xFF	; 255
    16a0:	08 95       	ret

000016a2 <__floatunsisf>:
    16a2:	e8 94       	clt
    16a4:	09 c0       	rjmp	.+18     	; 0x16b8 <__floatsisf+0x12>

000016a6 <__floatsisf>:
    16a6:	97 fb       	bst	r25, 7
    16a8:	3e f4       	brtc	.+14     	; 0x16b8 <__floatsisf+0x12>
    16aa:	90 95       	com	r25
    16ac:	80 95       	com	r24
    16ae:	70 95       	com	r23
    16b0:	61 95       	neg	r22
    16b2:	7f 4f       	sbci	r23, 0xFF	; 255
    16b4:	8f 4f       	sbci	r24, 0xFF	; 255
    16b6:	9f 4f       	sbci	r25, 0xFF	; 255
    16b8:	99 23       	and	r25, r25
    16ba:	a9 f0       	breq	.+42     	; 0x16e6 <__floatsisf+0x40>
    16bc:	f9 2f       	mov	r31, r25
    16be:	96 e9       	ldi	r25, 0x96	; 150
    16c0:	bb 27       	eor	r27, r27
    16c2:	93 95       	inc	r25
    16c4:	f6 95       	lsr	r31
    16c6:	87 95       	ror	r24
    16c8:	77 95       	ror	r23
    16ca:	67 95       	ror	r22
    16cc:	b7 95       	ror	r27
    16ce:	f1 11       	cpse	r31, r1
    16d0:	f8 cf       	rjmp	.-16     	; 0x16c2 <__floatsisf+0x1c>
    16d2:	fa f4       	brpl	.+62     	; 0x1712 <__floatsisf+0x6c>
    16d4:	bb 0f       	add	r27, r27
    16d6:	11 f4       	brne	.+4      	; 0x16dc <__floatsisf+0x36>
    16d8:	60 ff       	sbrs	r22, 0
    16da:	1b c0       	rjmp	.+54     	; 0x1712 <__floatsisf+0x6c>
    16dc:	6f 5f       	subi	r22, 0xFF	; 255
    16de:	7f 4f       	sbci	r23, 0xFF	; 255
    16e0:	8f 4f       	sbci	r24, 0xFF	; 255
    16e2:	9f 4f       	sbci	r25, 0xFF	; 255
    16e4:	16 c0       	rjmp	.+44     	; 0x1712 <__floatsisf+0x6c>
    16e6:	88 23       	and	r24, r24
    16e8:	11 f0       	breq	.+4      	; 0x16ee <__floatsisf+0x48>
    16ea:	96 e9       	ldi	r25, 0x96	; 150
    16ec:	11 c0       	rjmp	.+34     	; 0x1710 <__floatsisf+0x6a>
    16ee:	77 23       	and	r23, r23
    16f0:	21 f0       	breq	.+8      	; 0x16fa <__floatsisf+0x54>
    16f2:	9e e8       	ldi	r25, 0x8E	; 142
    16f4:	87 2f       	mov	r24, r23
    16f6:	76 2f       	mov	r23, r22
    16f8:	05 c0       	rjmp	.+10     	; 0x1704 <__floatsisf+0x5e>
    16fa:	66 23       	and	r22, r22
    16fc:	71 f0       	breq	.+28     	; 0x171a <__floatsisf+0x74>
    16fe:	96 e8       	ldi	r25, 0x86	; 134
    1700:	86 2f       	mov	r24, r22
    1702:	70 e0       	ldi	r23, 0x00	; 0
    1704:	60 e0       	ldi	r22, 0x00	; 0
    1706:	2a f0       	brmi	.+10     	; 0x1712 <__floatsisf+0x6c>
    1708:	9a 95       	dec	r25
    170a:	66 0f       	add	r22, r22
    170c:	77 1f       	adc	r23, r23
    170e:	88 1f       	adc	r24, r24
    1710:	da f7       	brpl	.-10     	; 0x1708 <__floatsisf+0x62>
    1712:	88 0f       	add	r24, r24
    1714:	96 95       	lsr	r25
    1716:	87 95       	ror	r24
    1718:	97 f9       	bld	r25, 7
    171a:	08 95       	ret

0000171c <__fp_cmp>:
    171c:	99 0f       	add	r25, r25
    171e:	00 08       	sbc	r0, r0
    1720:	55 0f       	add	r21, r21
    1722:	aa 0b       	sbc	r26, r26
    1724:	e0 e8       	ldi	r30, 0x80	; 128
    1726:	fe ef       	ldi	r31, 0xFE	; 254
    1728:	16 16       	cp	r1, r22
    172a:	17 06       	cpc	r1, r23
    172c:	e8 07       	cpc	r30, r24
    172e:	f9 07       	cpc	r31, r25
    1730:	c0 f0       	brcs	.+48     	; 0x1762 <__fp_cmp+0x46>
    1732:	12 16       	cp	r1, r18
    1734:	13 06       	cpc	r1, r19
    1736:	e4 07       	cpc	r30, r20
    1738:	f5 07       	cpc	r31, r21
    173a:	98 f0       	brcs	.+38     	; 0x1762 <__fp_cmp+0x46>
    173c:	62 1b       	sub	r22, r18
    173e:	73 0b       	sbc	r23, r19
    1740:	84 0b       	sbc	r24, r20
    1742:	95 0b       	sbc	r25, r21
    1744:	39 f4       	brne	.+14     	; 0x1754 <__fp_cmp+0x38>
    1746:	0a 26       	eor	r0, r26
    1748:	61 f0       	breq	.+24     	; 0x1762 <__fp_cmp+0x46>
    174a:	23 2b       	or	r18, r19
    174c:	24 2b       	or	r18, r20
    174e:	25 2b       	or	r18, r21
    1750:	21 f4       	brne	.+8      	; 0x175a <__fp_cmp+0x3e>
    1752:	08 95       	ret
    1754:	0a 26       	eor	r0, r26
    1756:	09 f4       	brne	.+2      	; 0x175a <__fp_cmp+0x3e>
    1758:	a1 40       	sbci	r26, 0x01	; 1
    175a:	a6 95       	lsr	r26
    175c:	8f ef       	ldi	r24, 0xFF	; 255
    175e:	81 1d       	adc	r24, r1
    1760:	81 1d       	adc	r24, r1
    1762:	08 95       	ret

00001764 <__fp_inf>:
    1764:	97 f9       	bld	r25, 7
    1766:	9f 67       	ori	r25, 0x7F	; 127
    1768:	80 e8       	ldi	r24, 0x80	; 128
    176a:	70 e0       	ldi	r23, 0x00	; 0
    176c:	60 e0       	ldi	r22, 0x00	; 0
    176e:	08 95       	ret

00001770 <__fp_nan>:
    1770:	9f ef       	ldi	r25, 0xFF	; 255
    1772:	80 ec       	ldi	r24, 0xC0	; 192
    1774:	08 95       	ret

00001776 <__fp_pscA>:
    1776:	00 24       	eor	r0, r0
    1778:	0a 94       	dec	r0
    177a:	16 16       	cp	r1, r22
    177c:	17 06       	cpc	r1, r23
    177e:	18 06       	cpc	r1, r24
    1780:	09 06       	cpc	r0, r25
    1782:	08 95       	ret

00001784 <__fp_pscB>:
    1784:	00 24       	eor	r0, r0
    1786:	0a 94       	dec	r0
    1788:	12 16       	cp	r1, r18
    178a:	13 06       	cpc	r1, r19
    178c:	14 06       	cpc	r1, r20
    178e:	05 06       	cpc	r0, r21
    1790:	08 95       	ret

00001792 <__fp_round>:
    1792:	09 2e       	mov	r0, r25
    1794:	03 94       	inc	r0
    1796:	00 0c       	add	r0, r0
    1798:	11 f4       	brne	.+4      	; 0x179e <__fp_round+0xc>
    179a:	88 23       	and	r24, r24
    179c:	52 f0       	brmi	.+20     	; 0x17b2 <__fp_round+0x20>
    179e:	bb 0f       	add	r27, r27
    17a0:	40 f4       	brcc	.+16     	; 0x17b2 <__fp_round+0x20>
    17a2:	bf 2b       	or	r27, r31
    17a4:	11 f4       	brne	.+4      	; 0x17aa <__fp_round+0x18>
    17a6:	60 ff       	sbrs	r22, 0
    17a8:	04 c0       	rjmp	.+8      	; 0x17b2 <__fp_round+0x20>
    17aa:	6f 5f       	subi	r22, 0xFF	; 255
    17ac:	7f 4f       	sbci	r23, 0xFF	; 255
    17ae:	8f 4f       	sbci	r24, 0xFF	; 255
    17b0:	9f 4f       	sbci	r25, 0xFF	; 255
    17b2:	08 95       	ret

000017b4 <__fp_split3>:
    17b4:	57 fd       	sbrc	r21, 7
    17b6:	90 58       	subi	r25, 0x80	; 128
    17b8:	44 0f       	add	r20, r20
    17ba:	55 1f       	adc	r21, r21
    17bc:	59 f0       	breq	.+22     	; 0x17d4 <__fp_splitA+0x10>
    17be:	5f 3f       	cpi	r21, 0xFF	; 255
    17c0:	71 f0       	breq	.+28     	; 0x17de <__fp_splitA+0x1a>
    17c2:	47 95       	ror	r20

000017c4 <__fp_splitA>:
    17c4:	88 0f       	add	r24, r24
    17c6:	97 fb       	bst	r25, 7
    17c8:	99 1f       	adc	r25, r25
    17ca:	61 f0       	breq	.+24     	; 0x17e4 <__fp_splitA+0x20>
    17cc:	9f 3f       	cpi	r25, 0xFF	; 255
    17ce:	79 f0       	breq	.+30     	; 0x17ee <__fp_splitA+0x2a>
    17d0:	87 95       	ror	r24
    17d2:	08 95       	ret
    17d4:	12 16       	cp	r1, r18
    17d6:	13 06       	cpc	r1, r19
    17d8:	14 06       	cpc	r1, r20
    17da:	55 1f       	adc	r21, r21
    17dc:	f2 cf       	rjmp	.-28     	; 0x17c2 <__fp_split3+0xe>
    17de:	46 95       	lsr	r20
    17e0:	f1 df       	rcall	.-30     	; 0x17c4 <__fp_splitA>
    17e2:	08 c0       	rjmp	.+16     	; 0x17f4 <__fp_splitA+0x30>
    17e4:	16 16       	cp	r1, r22
    17e6:	17 06       	cpc	r1, r23
    17e8:	18 06       	cpc	r1, r24
    17ea:	99 1f       	adc	r25, r25
    17ec:	f1 cf       	rjmp	.-30     	; 0x17d0 <__fp_splitA+0xc>
    17ee:	86 95       	lsr	r24
    17f0:	71 05       	cpc	r23, r1
    17f2:	61 05       	cpc	r22, r1
    17f4:	08 94       	sec
    17f6:	08 95       	ret

000017f8 <__fp_zero>:
    17f8:	e8 94       	clt

000017fa <__fp_szero>:
    17fa:	bb 27       	eor	r27, r27
    17fc:	66 27       	eor	r22, r22
    17fe:	77 27       	eor	r23, r23
    1800:	cb 01       	movw	r24, r22
    1802:	97 f9       	bld	r25, 7
    1804:	08 95       	ret

00001806 <__gesf2>:
    1806:	0e 94 8e 0b 	call	0x171c	; 0x171c <__fp_cmp>
    180a:	08 f4       	brcc	.+2      	; 0x180e <__gesf2+0x8>
    180c:	8f ef       	ldi	r24, 0xFF	; 255
    180e:	08 95       	ret

00001810 <__mulsf3>:
    1810:	0e 94 1b 0c 	call	0x1836	; 0x1836 <__mulsf3x>
    1814:	0c 94 c9 0b 	jmp	0x1792	; 0x1792 <__fp_round>
    1818:	0e 94 bb 0b 	call	0x1776	; 0x1776 <__fp_pscA>
    181c:	38 f0       	brcs	.+14     	; 0x182c <__mulsf3+0x1c>
    181e:	0e 94 c2 0b 	call	0x1784	; 0x1784 <__fp_pscB>
    1822:	20 f0       	brcs	.+8      	; 0x182c <__mulsf3+0x1c>
    1824:	95 23       	and	r25, r21
    1826:	11 f0       	breq	.+4      	; 0x182c <__mulsf3+0x1c>
    1828:	0c 94 b2 0b 	jmp	0x1764	; 0x1764 <__fp_inf>
    182c:	0c 94 b8 0b 	jmp	0x1770	; 0x1770 <__fp_nan>
    1830:	11 24       	eor	r1, r1
    1832:	0c 94 fd 0b 	jmp	0x17fa	; 0x17fa <__fp_szero>

00001836 <__mulsf3x>:
    1836:	0e 94 da 0b 	call	0x17b4	; 0x17b4 <__fp_split3>
    183a:	70 f3       	brcs	.-36     	; 0x1818 <__mulsf3+0x8>

0000183c <__mulsf3_pse>:
    183c:	95 9f       	mul	r25, r21
    183e:	c1 f3       	breq	.-16     	; 0x1830 <__mulsf3+0x20>
    1840:	95 0f       	add	r25, r21
    1842:	50 e0       	ldi	r21, 0x00	; 0
    1844:	55 1f       	adc	r21, r21
    1846:	62 9f       	mul	r22, r18
    1848:	f0 01       	movw	r30, r0
    184a:	72 9f       	mul	r23, r18
    184c:	bb 27       	eor	r27, r27
    184e:	f0 0d       	add	r31, r0
    1850:	b1 1d       	adc	r27, r1
    1852:	63 9f       	mul	r22, r19
    1854:	aa 27       	eor	r26, r26
    1856:	f0 0d       	add	r31, r0
    1858:	b1 1d       	adc	r27, r1
    185a:	aa 1f       	adc	r26, r26
    185c:	64 9f       	mul	r22, r20
    185e:	66 27       	eor	r22, r22
    1860:	b0 0d       	add	r27, r0
    1862:	a1 1d       	adc	r26, r1
    1864:	66 1f       	adc	r22, r22
    1866:	82 9f       	mul	r24, r18
    1868:	22 27       	eor	r18, r18
    186a:	b0 0d       	add	r27, r0
    186c:	a1 1d       	adc	r26, r1
    186e:	62 1f       	adc	r22, r18
    1870:	73 9f       	mul	r23, r19
    1872:	b0 0d       	add	r27, r0
    1874:	a1 1d       	adc	r26, r1
    1876:	62 1f       	adc	r22, r18
    1878:	83 9f       	mul	r24, r19
    187a:	a0 0d       	add	r26, r0
    187c:	61 1d       	adc	r22, r1
    187e:	22 1f       	adc	r18, r18
    1880:	74 9f       	mul	r23, r20
    1882:	33 27       	eor	r19, r19
    1884:	a0 0d       	add	r26, r0
    1886:	61 1d       	adc	r22, r1
    1888:	23 1f       	adc	r18, r19
    188a:	84 9f       	mul	r24, r20
    188c:	60 0d       	add	r22, r0
    188e:	21 1d       	adc	r18, r1
    1890:	82 2f       	mov	r24, r18
    1892:	76 2f       	mov	r23, r22
    1894:	6a 2f       	mov	r22, r26
    1896:	11 24       	eor	r1, r1
    1898:	9f 57       	subi	r25, 0x7F	; 127
    189a:	50 40       	sbci	r21, 0x00	; 0
    189c:	9a f0       	brmi	.+38     	; 0x18c4 <__mulsf3_pse+0x88>
    189e:	f1 f0       	breq	.+60     	; 0x18dc <__mulsf3_pse+0xa0>
    18a0:	88 23       	and	r24, r24
    18a2:	4a f0       	brmi	.+18     	; 0x18b6 <__mulsf3_pse+0x7a>
    18a4:	ee 0f       	add	r30, r30
    18a6:	ff 1f       	adc	r31, r31
    18a8:	bb 1f       	adc	r27, r27
    18aa:	66 1f       	adc	r22, r22
    18ac:	77 1f       	adc	r23, r23
    18ae:	88 1f       	adc	r24, r24
    18b0:	91 50       	subi	r25, 0x01	; 1
    18b2:	50 40       	sbci	r21, 0x00	; 0
    18b4:	a9 f7       	brne	.-22     	; 0x18a0 <__mulsf3_pse+0x64>
    18b6:	9e 3f       	cpi	r25, 0xFE	; 254
    18b8:	51 05       	cpc	r21, r1
    18ba:	80 f0       	brcs	.+32     	; 0x18dc <__mulsf3_pse+0xa0>
    18bc:	0c 94 b2 0b 	jmp	0x1764	; 0x1764 <__fp_inf>
    18c0:	0c 94 fd 0b 	jmp	0x17fa	; 0x17fa <__fp_szero>
    18c4:	5f 3f       	cpi	r21, 0xFF	; 255
    18c6:	e4 f3       	brlt	.-8      	; 0x18c0 <__mulsf3_pse+0x84>
    18c8:	98 3e       	cpi	r25, 0xE8	; 232
    18ca:	d4 f3       	brlt	.-12     	; 0x18c0 <__mulsf3_pse+0x84>
    18cc:	86 95       	lsr	r24
    18ce:	77 95       	ror	r23
    18d0:	67 95       	ror	r22
    18d2:	b7 95       	ror	r27
    18d4:	f7 95       	ror	r31
    18d6:	e7 95       	ror	r30
    18d8:	9f 5f       	subi	r25, 0xFF	; 255
    18da:	c1 f7       	brne	.-16     	; 0x18cc <__mulsf3_pse+0x90>
    18dc:	fe 2b       	or	r31, r30
    18de:	88 0f       	add	r24, r24
    18e0:	91 1d       	adc	r25, r1
    18e2:	96 95       	lsr	r25
    18e4:	87 95       	ror	r24
    18e6:	97 f9       	bld	r25, 7
    18e8:	08 95       	ret

000018ea <_ZN14HardwareSerial9availableEv>:
  // clear any received data
  _rx_buffer_head = _rx_buffer_tail;
}

int HardwareSerial::available(void)
{
    18ea:	fc 01       	movw	r30, r24
  return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) % SERIAL_RX_BUFFER_SIZE;
    18ec:	91 8d       	ldd	r25, Z+25	; 0x19
    18ee:	22 8d       	ldd	r18, Z+26	; 0x1a
    18f0:	89 2f       	mov	r24, r25
    18f2:	90 e0       	ldi	r25, 0x00	; 0
    18f4:	80 5c       	subi	r24, 0xC0	; 192
    18f6:	9f 4f       	sbci	r25, 0xFF	; 255
    18f8:	82 1b       	sub	r24, r18
    18fa:	91 09       	sbc	r25, r1
}
    18fc:	8f 73       	andi	r24, 0x3F	; 63
    18fe:	99 27       	eor	r25, r25
    1900:	08 95       	ret

00001902 <_ZN14HardwareSerial4peekEv>:

int HardwareSerial::peek(void)
{
    1902:	fc 01       	movw	r30, r24
  if (_rx_buffer_head == _rx_buffer_tail) {
    1904:	91 8d       	ldd	r25, Z+25	; 0x19
    1906:	82 8d       	ldd	r24, Z+26	; 0x1a
    1908:	98 17       	cp	r25, r24
    190a:	31 f0       	breq	.+12     	; 0x1918 <_ZN14HardwareSerial4peekEv+0x16>
    return -1;
  } else {
    return _rx_buffer[_rx_buffer_tail];
    190c:	82 8d       	ldd	r24, Z+26	; 0x1a
    190e:	e8 0f       	add	r30, r24
    1910:	f1 1d       	adc	r31, r1
    1912:	85 8d       	ldd	r24, Z+29	; 0x1d
    1914:	90 e0       	ldi	r25, 0x00	; 0
    1916:	08 95       	ret
}

int HardwareSerial::peek(void)
{
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
    1918:	8f ef       	ldi	r24, 0xFF	; 255
    191a:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    return _rx_buffer[_rx_buffer_tail];
  }
}
    191c:	08 95       	ret

0000191e <_ZN14HardwareSerial4readEv>:

int HardwareSerial::read(void)
{
    191e:	fc 01       	movw	r30, r24
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    1920:	91 8d       	ldd	r25, Z+25	; 0x19
    1922:	82 8d       	ldd	r24, Z+26	; 0x1a
    1924:	98 17       	cp	r25, r24
    1926:	61 f0       	breq	.+24     	; 0x1940 <_ZN14HardwareSerial4readEv+0x22>
    return -1;
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    1928:	82 8d       	ldd	r24, Z+26	; 0x1a
    192a:	df 01       	movw	r26, r30
    192c:	a8 0f       	add	r26, r24
    192e:	b1 1d       	adc	r27, r1
    1930:	5d 96       	adiw	r26, 0x1d	; 29
    1932:	8c 91       	ld	r24, X
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    1934:	92 8d       	ldd	r25, Z+26	; 0x1a
    1936:	9f 5f       	subi	r25, 0xFF	; 255
    1938:	9f 73       	andi	r25, 0x3F	; 63
    193a:	92 8f       	std	Z+26, r25	; 0x1a
    return c;
    193c:	90 e0       	ldi	r25, 0x00	; 0
    193e:	08 95       	ret

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
    1940:	8f ef       	ldi	r24, 0xFF	; 255
    1942:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    return c;
  }
}
    1944:	08 95       	ret

00001946 <_Z14serialEventRunv>:
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
    1946:	83 ef       	ldi	r24, 0xF3	; 243
    1948:	9d e0       	ldi	r25, 0x0D	; 13
    194a:	89 2b       	or	r24, r25
    194c:	49 f0       	breq	.+18     	; 0x1960 <_Z14serialEventRunv+0x1a>
    194e:	80 e0       	ldi	r24, 0x00	; 0
    1950:	90 e0       	ldi	r25, 0x00	; 0
    1952:	89 2b       	or	r24, r25
    1954:	29 f0       	breq	.+10     	; 0x1960 <_Z14serialEventRunv+0x1a>
    1956:	0e 94 f3 0d 	call	0x1be6	; 0x1be6 <_Z17Serial0_availablev>
    195a:	81 11       	cpse	r24, r1
    195c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>
    1960:	08 95       	ret

00001962 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>:
}

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_tx_udr_empty_irq(void)
{
    1962:	fc 01       	movw	r30, r24
  // If interrupts are enabled, there must be more data in the output
  // buffer. Send the next byte
  unsigned char c = _tx_buffer[_tx_buffer_tail];
    1964:	84 8d       	ldd	r24, Z+28	; 0x1c
    1966:	df 01       	movw	r26, r30
    1968:	a8 0f       	add	r26, r24
    196a:	b1 1d       	adc	r27, r1
    196c:	a3 5a       	subi	r26, 0xA3	; 163
    196e:	bf 4f       	sbci	r27, 0xFF	; 255
    1970:	2c 91       	ld	r18, X
  _tx_buffer_tail = (_tx_buffer_tail + 1) % SERIAL_TX_BUFFER_SIZE;
    1972:	84 8d       	ldd	r24, Z+28	; 0x1c
    1974:	90 e0       	ldi	r25, 0x00	; 0
    1976:	01 96       	adiw	r24, 0x01	; 1
    1978:	8f 73       	andi	r24, 0x3F	; 63
    197a:	99 27       	eor	r25, r25
    197c:	84 8f       	std	Z+28, r24	; 0x1c

  *_udr = c;
    197e:	a6 89       	ldd	r26, Z+22	; 0x16
    1980:	b7 89       	ldd	r27, Z+23	; 0x17
    1982:	2c 93       	st	X, r18

  // clear the TXC bit -- "can be cleared by writing a one to its bit
  // location". This makes sure flush() won't return until the bytes
  // actually got written
  sbi(*_ucsra, TXC0);
    1984:	a0 89       	ldd	r26, Z+16	; 0x10
    1986:	b1 89       	ldd	r27, Z+17	; 0x11
    1988:	8c 91       	ld	r24, X
    198a:	80 64       	ori	r24, 0x40	; 64
    198c:	8c 93       	st	X, r24

  if (_tx_buffer_head == _tx_buffer_tail) {
    198e:	93 8d       	ldd	r25, Z+27	; 0x1b
    1990:	84 8d       	ldd	r24, Z+28	; 0x1c
    1992:	98 13       	cpse	r25, r24
    1994:	06 c0       	rjmp	.+12     	; 0x19a2 <_ZN14HardwareSerial17_tx_udr_empty_irqEv+0x40>
    // Buffer empty, so disable interrupts
    cbi(*_ucsrb, UDRIE0);
    1996:	02 88       	ldd	r0, Z+18	; 0x12
    1998:	f3 89       	ldd	r31, Z+19	; 0x13
    199a:	e0 2d       	mov	r30, r0
    199c:	80 81       	ld	r24, Z
    199e:	8f 7d       	andi	r24, 0xDF	; 223
    19a0:	80 83       	st	Z, r24
    19a2:	08 95       	ret

000019a4 <_ZN14HardwareSerial5writeEh>:
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}

size_t HardwareSerial::write(uint8_t c)
{
    19a4:	ef 92       	push	r14
    19a6:	ff 92       	push	r15
    19a8:	0f 93       	push	r16
    19aa:	1f 93       	push	r17
    19ac:	cf 93       	push	r28
    19ae:	df 93       	push	r29
    19b0:	ec 01       	movw	r28, r24
  _written = true;
    19b2:	81 e0       	ldi	r24, 0x01	; 1
    19b4:	88 8f       	std	Y+24, r24	; 0x18
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    19b6:	9b 8d       	ldd	r25, Y+27	; 0x1b
    19b8:	8c 8d       	ldd	r24, Y+28	; 0x1c
    19ba:	98 13       	cpse	r25, r24
    19bc:	05 c0       	rjmp	.+10     	; 0x19c8 <_ZN14HardwareSerial5writeEh+0x24>
    19be:	e8 89       	ldd	r30, Y+16	; 0x10
    19c0:	f9 89       	ldd	r31, Y+17	; 0x11
    19c2:	80 81       	ld	r24, Z
    19c4:	85 fd       	sbrc	r24, 5
    19c6:	24 c0       	rjmp	.+72     	; 0x1a10 <_ZN14HardwareSerial5writeEh+0x6c>
    19c8:	f6 2e       	mov	r15, r22
    *_udr = c;
    sbi(*_ucsra, TXC0);
    return 1;
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
    19ca:	0b 8d       	ldd	r16, Y+27	; 0x1b
    19cc:	10 e0       	ldi	r17, 0x00	; 0
    19ce:	0f 5f       	subi	r16, 0xFF	; 255
    19d0:	1f 4f       	sbci	r17, 0xFF	; 255
    19d2:	0f 73       	andi	r16, 0x3F	; 63
    19d4:	11 27       	eor	r17, r17
    19d6:	e0 2e       	mov	r14, r16
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
    19d8:	8c 8d       	ldd	r24, Y+28	; 0x1c
    19da:	e8 12       	cpse	r14, r24
    19dc:	0c c0       	rjmp	.+24     	; 0x19f6 <_ZN14HardwareSerial5writeEh+0x52>
    if (bit_is_clear(SREG, SREG_I)) {
    19de:	0f b6       	in	r0, 0x3f	; 63
    19e0:	07 fc       	sbrc	r0, 7
    19e2:	fa cf       	rjmp	.-12     	; 0x19d8 <_ZN14HardwareSerial5writeEh+0x34>
      // Interrupts are disabled, so we'll have to poll the data
      // register empty flag ourselves. If it is set, pretend an
      // interrupt has happened and call the handler to free up
      // space for us.
      if(bit_is_set(*_ucsra, UDRE0))
    19e4:	e8 89       	ldd	r30, Y+16	; 0x10
    19e6:	f9 89       	ldd	r31, Y+17	; 0x11
    19e8:	80 81       	ld	r24, Z
    19ea:	85 ff       	sbrs	r24, 5
    19ec:	f5 cf       	rjmp	.-22     	; 0x19d8 <_ZN14HardwareSerial5writeEh+0x34>
	_tx_udr_empty_irq();
    19ee:	ce 01       	movw	r24, r28
    19f0:	0e 94 b1 0c 	call	0x1962	; 0x1962 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
    19f4:	f1 cf       	rjmp	.-30     	; 0x19d8 <_ZN14HardwareSerial5writeEh+0x34>
    } else {
      // nop, the interrupt handler will free up space for us
    }
  }

  _tx_buffer[_tx_buffer_head] = c;
    19f6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    19f8:	fe 01       	movw	r30, r28
    19fa:	e8 0f       	add	r30, r24
    19fc:	f1 1d       	adc	r31, r1
    19fe:	e3 5a       	subi	r30, 0xA3	; 163
    1a00:	ff 4f       	sbci	r31, 0xFF	; 255
    1a02:	f0 82       	st	Z, r15
  _tx_buffer_head = i;
    1a04:	0b 8f       	std	Y+27, r16	; 0x1b
	
  sbi(*_ucsrb, UDRIE0);
    1a06:	ea 89       	ldd	r30, Y+18	; 0x12
    1a08:	fb 89       	ldd	r31, Y+19	; 0x13
    1a0a:	80 81       	ld	r24, Z
    1a0c:	80 62       	ori	r24, 0x20	; 32
    1a0e:	07 c0       	rjmp	.+14     	; 0x1a1e <_ZN14HardwareSerial5writeEh+0x7a>
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    *_udr = c;
    1a10:	ee 89       	ldd	r30, Y+22	; 0x16
    1a12:	ff 89       	ldd	r31, Y+23	; 0x17
    1a14:	60 83       	st	Z, r22
    sbi(*_ucsra, TXC0);
    1a16:	e8 89       	ldd	r30, Y+16	; 0x10
    1a18:	f9 89       	ldd	r31, Y+17	; 0x11
    1a1a:	80 81       	ld	r24, Z
    1a1c:	80 64       	ori	r24, 0x40	; 64
    1a1e:	80 83       	st	Z, r24
  _tx_buffer_head = i;
	
  sbi(*_ucsrb, UDRIE0);
  
  return 1;
}
    1a20:	81 e0       	ldi	r24, 0x01	; 1
    1a22:	90 e0       	ldi	r25, 0x00	; 0
    1a24:	df 91       	pop	r29
    1a26:	cf 91       	pop	r28
    1a28:	1f 91       	pop	r17
    1a2a:	0f 91       	pop	r16
    1a2c:	ff 90       	pop	r15
    1a2e:	ef 90       	pop	r14
    1a30:	08 95       	ret

00001a32 <_ZN14HardwareSerial5flushEv>:
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
  return tail - head - 1;
}

void HardwareSerial::flush()
{
    1a32:	cf 93       	push	r28
    1a34:	df 93       	push	r29
    1a36:	ec 01       	movw	r28, r24
  // If we have never written a byte, no need to flush. This special
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written)
    1a38:	88 8d       	ldd	r24, Y+24	; 0x18
    1a3a:	88 23       	and	r24, r24
    1a3c:	c9 f0       	breq	.+50     	; 0x1a70 <_ZN14HardwareSerial5flushEv+0x3e>
    return;

  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
    1a3e:	ea 89       	ldd	r30, Y+18	; 0x12
    1a40:	fb 89       	ldd	r31, Y+19	; 0x13
    1a42:	80 81       	ld	r24, Z
    1a44:	85 fd       	sbrc	r24, 5
    1a46:	05 c0       	rjmp	.+10     	; 0x1a52 <_ZN14HardwareSerial5flushEv+0x20>
    1a48:	a8 89       	ldd	r26, Y+16	; 0x10
    1a4a:	b9 89       	ldd	r27, Y+17	; 0x11
    1a4c:	8c 91       	ld	r24, X
    1a4e:	86 fd       	sbrc	r24, 6
    1a50:	0f c0       	rjmp	.+30     	; 0x1a70 <_ZN14HardwareSerial5flushEv+0x3e>
    if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
    1a52:	0f b6       	in	r0, 0x3f	; 63
    1a54:	07 fc       	sbrc	r0, 7
    1a56:	f5 cf       	rjmp	.-22     	; 0x1a42 <_ZN14HardwareSerial5flushEv+0x10>
    1a58:	80 81       	ld	r24, Z
    1a5a:	85 ff       	sbrs	r24, 5
    1a5c:	f2 cf       	rjmp	.-28     	; 0x1a42 <_ZN14HardwareSerial5flushEv+0x10>
	// Interrupts are globally disabled, but the DR empty
	// interrupt should be enabled, so poll the DR empty flag to
	// prevent deadlock
	if (bit_is_set(*_ucsra, UDRE0))
    1a5e:	a8 89       	ldd	r26, Y+16	; 0x10
    1a60:	b9 89       	ldd	r27, Y+17	; 0x11
    1a62:	8c 91       	ld	r24, X
    1a64:	85 ff       	sbrs	r24, 5
    1a66:	ed cf       	rjmp	.-38     	; 0x1a42 <_ZN14HardwareSerial5flushEv+0x10>
	  _tx_udr_empty_irq();
    1a68:	ce 01       	movw	r24, r28
    1a6a:	0e 94 b1 0c 	call	0x1962	; 0x1962 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
    1a6e:	e7 cf       	rjmp	.-50     	; 0x1a3e <_ZN14HardwareSerial5flushEv+0xc>
  }
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}
    1a70:	df 91       	pop	r29
    1a72:	cf 91       	pop	r28
    1a74:	08 95       	ret

00001a76 <_ZN14HardwareSerial5beginEmh>:
}

// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
    1a76:	cf 92       	push	r12
    1a78:	df 92       	push	r13
    1a7a:	ef 92       	push	r14
    1a7c:	ff 92       	push	r15
    1a7e:	1f 93       	push	r17
    1a80:	cf 93       	push	r28
    1a82:	df 93       	push	r29
    1a84:	ec 01       	movw	r28, r24
    1a86:	6a 01       	movw	r12, r20
    1a88:	7b 01       	movw	r14, r22
    1a8a:	12 2f       	mov	r17, r18
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
    1a8c:	60 e8       	ldi	r22, 0x80	; 128
    1a8e:	74 e8       	ldi	r23, 0x84	; 132
    1a90:	8e e1       	ldi	r24, 0x1E	; 30
    1a92:	90 e0       	ldi	r25, 0x00	; 0
    1a94:	a7 01       	movw	r20, r14
    1a96:	96 01       	movw	r18, r12
    1a98:	0e 94 3c 1b 	call	0x3678	; 0x3678 <__udivmodsi4>
    1a9c:	da 01       	movw	r26, r20
    1a9e:	c9 01       	movw	r24, r18
    1aa0:	01 97       	sbiw	r24, 0x01	; 1
    1aa2:	a1 09       	sbc	r26, r1
    1aa4:	b1 09       	sbc	r27, r1
    1aa6:	b6 95       	lsr	r27
    1aa8:	a7 95       	ror	r26
    1aaa:	97 95       	ror	r25
    1aac:	87 95       	ror	r24
    1aae:	9c 01       	movw	r18, r24
  *_ucsra = 1 << U2X0;
    1ab0:	e8 89       	ldd	r30, Y+16	; 0x10
    1ab2:	f9 89       	ldd	r31, Y+17	; 0x11
    1ab4:	82 e0       	ldi	r24, 0x02	; 2
    1ab6:	80 83       	st	Z, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
    1ab8:	21 15       	cp	r18, r1
    1aba:	80 e1       	ldi	r24, 0x10	; 16
    1abc:	38 07       	cpc	r19, r24
    1abe:	a8 f0       	brcs	.+42     	; 0x1aea <_ZN14HardwareSerial5beginEmh+0x74>
  {
    *_ucsra = 0;
    1ac0:	e8 89       	ldd	r30, Y+16	; 0x10
    1ac2:	f9 89       	ldd	r31, Y+17	; 0x11
    1ac4:	10 82       	st	Z, r1
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
    1ac6:	60 e4       	ldi	r22, 0x40	; 64
    1ac8:	72 e4       	ldi	r23, 0x42	; 66
    1aca:	8f e0       	ldi	r24, 0x0F	; 15
    1acc:	90 e0       	ldi	r25, 0x00	; 0
    1ace:	a7 01       	movw	r20, r14
    1ad0:	96 01       	movw	r18, r12
    1ad2:	0e 94 3c 1b 	call	0x3678	; 0x3678 <__udivmodsi4>
    1ad6:	da 01       	movw	r26, r20
    1ad8:	c9 01       	movw	r24, r18
    1ada:	01 97       	sbiw	r24, 0x01	; 1
    1adc:	a1 09       	sbc	r26, r1
    1ade:	b1 09       	sbc	r27, r1
    1ae0:	b6 95       	lsr	r27
    1ae2:	a7 95       	ror	r26
    1ae4:	97 95       	ror	r25
    1ae6:	87 95       	ror	r24
    1ae8:	9c 01       	movw	r18, r24
  }

  // assign the baud_setting, a.k.a. ubrr (USART Baud Rate Register)
  *_ubrrh = baud_setting >> 8;
    1aea:	ec 85       	ldd	r30, Y+12	; 0x0c
    1aec:	fd 85       	ldd	r31, Y+13	; 0x0d
    1aee:	30 83       	st	Z, r19
  *_ubrrl = baud_setting;
    1af0:	ee 85       	ldd	r30, Y+14	; 0x0e
    1af2:	ff 85       	ldd	r31, Y+15	; 0x0f
    1af4:	20 83       	st	Z, r18

  _written = false;
    1af6:	18 8e       	std	Y+24, r1	; 0x18

  //set the data bits, parity, and stop bits
#if defined(__AVR_ATmega8__)
  config |= 0x80; // select UCSRC register (shared with UBRRH)
#endif
  *_ucsrc = config;
    1af8:	ec 89       	ldd	r30, Y+20	; 0x14
    1afa:	fd 89       	ldd	r31, Y+21	; 0x15
    1afc:	10 83       	st	Z, r17
  
  sbi(*_ucsrb, RXEN0);
    1afe:	ea 89       	ldd	r30, Y+18	; 0x12
    1b00:	fb 89       	ldd	r31, Y+19	; 0x13
    1b02:	80 81       	ld	r24, Z
    1b04:	80 61       	ori	r24, 0x10	; 16
    1b06:	80 83       	st	Z, r24
  sbi(*_ucsrb, TXEN0);
    1b08:	ea 89       	ldd	r30, Y+18	; 0x12
    1b0a:	fb 89       	ldd	r31, Y+19	; 0x13
    1b0c:	80 81       	ld	r24, Z
    1b0e:	88 60       	ori	r24, 0x08	; 8
    1b10:	80 83       	st	Z, r24
  sbi(*_ucsrb, RXCIE0);
    1b12:	ea 89       	ldd	r30, Y+18	; 0x12
    1b14:	fb 89       	ldd	r31, Y+19	; 0x13
    1b16:	80 81       	ld	r24, Z
    1b18:	80 68       	ori	r24, 0x80	; 128
    1b1a:	80 83       	st	Z, r24
  cbi(*_ucsrb, UDRIE0);
    1b1c:	ea 89       	ldd	r30, Y+18	; 0x12
    1b1e:	fb 89       	ldd	r31, Y+19	; 0x13
    1b20:	80 81       	ld	r24, Z
    1b22:	8f 7d       	andi	r24, 0xDF	; 223
    1b24:	80 83       	st	Z, r24
}
    1b26:	df 91       	pop	r29
    1b28:	cf 91       	pop	r28
    1b2a:	1f 91       	pop	r17
    1b2c:	ff 90       	pop	r15
    1b2e:	ef 90       	pop	r14
    1b30:	df 90       	pop	r13
    1b32:	cf 90       	pop	r12
    1b34:	08 95       	ret

00001b36 <__vector_18>:
#elif defined(USART_RXC_vect)
  ISR(USART_RXC_vect) // ATmega8
#else
  #error "Don't know what the Data Received vector is called for Serial"
#endif
  {
    1b36:	1f 92       	push	r1
    1b38:	0f 92       	push	r0
    1b3a:	0f b6       	in	r0, 0x3f	; 63
    1b3c:	0f 92       	push	r0
    1b3e:	11 24       	eor	r1, r1
    1b40:	2f 93       	push	r18
    1b42:	8f 93       	push	r24
    1b44:	9f 93       	push	r25
    1b46:	ef 93       	push	r30
    1b48:	ff 93       	push	r31

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
  if (bit_is_clear(*_ucsra, UPE0)) {
    1b4a:	e0 91 c9 02 	lds	r30, 0x02C9	; 0x8002c9 <Serial+0x10>
    1b4e:	f0 91 ca 02 	lds	r31, 0x02CA	; 0x8002ca <Serial+0x11>
    1b52:	80 81       	ld	r24, Z
    1b54:	e0 91 cf 02 	lds	r30, 0x02CF	; 0x8002cf <Serial+0x16>
    1b58:	f0 91 d0 02 	lds	r31, 0x02D0	; 0x8002d0 <Serial+0x17>
    1b5c:	82 fd       	sbrc	r24, 2
    1b5e:	12 c0       	rjmp	.+36     	; 0x1b84 <__vector_18+0x4e>
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
    1b60:	90 81       	ld	r25, Z
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
    1b62:	80 91 d2 02 	lds	r24, 0x02D2	; 0x8002d2 <Serial+0x19>
    1b66:	8f 5f       	subi	r24, 0xFF	; 255
    1b68:	8f 73       	andi	r24, 0x3F	; 63

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
    1b6a:	20 91 d3 02 	lds	r18, 0x02D3	; 0x8002d3 <Serial+0x1a>
    1b6e:	82 17       	cp	r24, r18
    1b70:	51 f0       	breq	.+20     	; 0x1b86 <__vector_18+0x50>
      _rx_buffer[_rx_buffer_head] = c;
    1b72:	e0 91 d2 02 	lds	r30, 0x02D2	; 0x8002d2 <Serial+0x19>
    1b76:	f0 e0       	ldi	r31, 0x00	; 0
    1b78:	e7 54       	subi	r30, 0x47	; 71
    1b7a:	fd 4f       	sbci	r31, 0xFD	; 253
    1b7c:	95 8f       	std	Z+29, r25	; 0x1d
      _rx_buffer_head = i;
    1b7e:	80 93 d2 02 	sts	0x02D2, r24	; 0x8002d2 <Serial+0x19>
    1b82:	01 c0       	rjmp	.+2      	; 0x1b86 <__vector_18+0x50>
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
    1b84:	80 81       	ld	r24, Z
    Serial._rx_complete_irq();
  }
    1b86:	ff 91       	pop	r31
    1b88:	ef 91       	pop	r30
    1b8a:	9f 91       	pop	r25
    1b8c:	8f 91       	pop	r24
    1b8e:	2f 91       	pop	r18
    1b90:	0f 90       	pop	r0
    1b92:	0f be       	out	0x3f, r0	; 63
    1b94:	0f 90       	pop	r0
    1b96:	1f 90       	pop	r1
    1b98:	18 95       	reti

00001b9a <__vector_19>:
#elif defined(USART_UDRE_vect)
ISR(USART_UDRE_vect)
#else
  #error "Don't know what the Data Register Empty vector is called for Serial"
#endif
{
    1b9a:	1f 92       	push	r1
    1b9c:	0f 92       	push	r0
    1b9e:	0f b6       	in	r0, 0x3f	; 63
    1ba0:	0f 92       	push	r0
    1ba2:	11 24       	eor	r1, r1
    1ba4:	2f 93       	push	r18
    1ba6:	3f 93       	push	r19
    1ba8:	4f 93       	push	r20
    1baa:	5f 93       	push	r21
    1bac:	6f 93       	push	r22
    1bae:	7f 93       	push	r23
    1bb0:	8f 93       	push	r24
    1bb2:	9f 93       	push	r25
    1bb4:	af 93       	push	r26
    1bb6:	bf 93       	push	r27
    1bb8:	ef 93       	push	r30
    1bba:	ff 93       	push	r31
  Serial._tx_udr_empty_irq();
    1bbc:	89 eb       	ldi	r24, 0xB9	; 185
    1bbe:	92 e0       	ldi	r25, 0x02	; 2
    1bc0:	0e 94 b1 0c 	call	0x1962	; 0x1962 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
}
    1bc4:	ff 91       	pop	r31
    1bc6:	ef 91       	pop	r30
    1bc8:	bf 91       	pop	r27
    1bca:	af 91       	pop	r26
    1bcc:	9f 91       	pop	r25
    1bce:	8f 91       	pop	r24
    1bd0:	7f 91       	pop	r23
    1bd2:	6f 91       	pop	r22
    1bd4:	5f 91       	pop	r21
    1bd6:	4f 91       	pop	r20
    1bd8:	3f 91       	pop	r19
    1bda:	2f 91       	pop	r18
    1bdc:	0f 90       	pop	r0
    1bde:	0f be       	out	0x3f, r0	; 63
    1be0:	0f 90       	pop	r0
    1be2:	1f 90       	pop	r1
    1be4:	18 95       	reti

00001be6 <_Z17Serial0_availablev>:
#endif

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial0_available() {
  return Serial.available();
    1be6:	89 eb       	ldi	r24, 0xB9	; 185
    1be8:	92 e0       	ldi	r25, 0x02	; 2
    1bea:	0e 94 75 0c 	call	0x18ea	; 0x18ea <_ZN14HardwareSerial9availableEv>
    1bee:	21 e0       	ldi	r18, 0x01	; 1
    1bf0:	89 2b       	or	r24, r25
    1bf2:	09 f4       	brne	.+2      	; 0x1bf6 <_Z17Serial0_availablev+0x10>
    1bf4:	20 e0       	ldi	r18, 0x00	; 0
}
    1bf6:	82 2f       	mov	r24, r18
    1bf8:	08 95       	ret

00001bfa <_GLOBAL__sub_I___vector_18>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
    1bfa:	e9 eb       	ldi	r30, 0xB9	; 185
    1bfc:	f2 e0       	ldi	r31, 0x02	; 2
    1bfe:	13 82       	std	Z+3, r1	; 0x03
    1c00:	12 82       	std	Z+2, r1	; 0x02
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
    1c02:	88 ee       	ldi	r24, 0xE8	; 232
    1c04:	93 e0       	ldi	r25, 0x03	; 3
    1c06:	a0 e0       	ldi	r26, 0x00	; 0
    1c08:	b0 e0       	ldi	r27, 0x00	; 0
    1c0a:	84 83       	std	Z+4, r24	; 0x04
    1c0c:	95 83       	std	Z+5, r25	; 0x05
    1c0e:	a6 83       	std	Z+6, r26	; 0x06
    1c10:	b7 83       	std	Z+7, r27	; 0x07
  volatile uint8_t *ucsrc, volatile uint8_t *udr) :
    _ubrrh(ubrrh), _ubrrl(ubrrl),
    _ucsra(ucsra), _ucsrb(ucsrb), _ucsrc(ucsrc),
    _udr(udr),
    _rx_buffer_head(0), _rx_buffer_tail(0),
    _tx_buffer_head(0), _tx_buffer_tail(0)
    1c12:	8f e1       	ldi	r24, 0x1F	; 31
    1c14:	92 e0       	ldi	r25, 0x02	; 2
    1c16:	91 83       	std	Z+1, r25	; 0x01
    1c18:	80 83       	st	Z, r24
    1c1a:	85 ec       	ldi	r24, 0xC5	; 197
    1c1c:	90 e0       	ldi	r25, 0x00	; 0
    1c1e:	95 87       	std	Z+13, r25	; 0x0d
    1c20:	84 87       	std	Z+12, r24	; 0x0c
    1c22:	84 ec       	ldi	r24, 0xC4	; 196
    1c24:	90 e0       	ldi	r25, 0x00	; 0
    1c26:	97 87       	std	Z+15, r25	; 0x0f
    1c28:	86 87       	std	Z+14, r24	; 0x0e
    1c2a:	80 ec       	ldi	r24, 0xC0	; 192
    1c2c:	90 e0       	ldi	r25, 0x00	; 0
    1c2e:	91 8b       	std	Z+17, r25	; 0x11
    1c30:	80 8b       	std	Z+16, r24	; 0x10
    1c32:	81 ec       	ldi	r24, 0xC1	; 193
    1c34:	90 e0       	ldi	r25, 0x00	; 0
    1c36:	93 8b       	std	Z+19, r25	; 0x13
    1c38:	82 8b       	std	Z+18, r24	; 0x12
    1c3a:	82 ec       	ldi	r24, 0xC2	; 194
    1c3c:	90 e0       	ldi	r25, 0x00	; 0
    1c3e:	95 8b       	std	Z+21, r25	; 0x15
    1c40:	84 8b       	std	Z+20, r24	; 0x14
    1c42:	86 ec       	ldi	r24, 0xC6	; 198
    1c44:	90 e0       	ldi	r25, 0x00	; 0
    1c46:	97 8b       	std	Z+23, r25	; 0x17
    1c48:	86 8b       	std	Z+22, r24	; 0x16
    1c4a:	11 8e       	std	Z+25, r1	; 0x19
    1c4c:	12 8e       	std	Z+26, r1	; 0x1a
    1c4e:	13 8e       	std	Z+27, r1	; 0x1b
    1c50:	14 8e       	std	Z+28, r1	; 0x1c
    1c52:	08 95       	ret

00001c54 <initVariant>:
    1c54:	08 95       	ret

00001c56 <main>:
void setupUSB() __attribute__((weak));
void setupUSB() { }

int main(void)
{
	init();
    1c56:	0e 94 ba 10 	call	0x2174	; 0x2174 <init>

	initVariant();
    1c5a:	0e 94 2a 0e 	call	0x1c54	; 0x1c54 <initVariant>

#if defined(USBCON)
	USBDevice.attach();
#endif
	
	setup();
    1c5e:	0e 94 4d 06 	call	0xc9a	; 0xc9a <setup>
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
    1c62:	c3 ea       	ldi	r28, 0xA3	; 163
    1c64:	dc e0       	ldi	r29, 0x0C	; 12
#endif
	
	setup();
    
	for (;;) {
		loop();
    1c66:	0e 94 97 08 	call	0x112e	; 0x112e <loop>
		if (serialEventRun) serialEventRun();
    1c6a:	20 97       	sbiw	r28, 0x00	; 0
    1c6c:	e1 f3       	breq	.-8      	; 0x1c66 <main+0x10>
    1c6e:	0e 94 a3 0c 	call	0x1946	; 0x1946 <_Z14serialEventRunv>
    1c72:	f9 cf       	rjmp	.-14     	; 0x1c66 <main+0x10>

00001c74 <_ZdlPv>:
    1c74:	0c 94 1e 1c 	jmp	0x383c	; 0x383c <free>

00001c78 <_ZN5Print5writeEPKhj>:
size_t Print::println(const Printable& x)
{
  size_t n = print(x);
  n += println();
  return n;
}
    1c78:	cf 92       	push	r12
    1c7a:	df 92       	push	r13
    1c7c:	ef 92       	push	r14
    1c7e:	ff 92       	push	r15
    1c80:	0f 93       	push	r16
    1c82:	1f 93       	push	r17
    1c84:	cf 93       	push	r28
    1c86:	df 93       	push	r29
    1c88:	6c 01       	movw	r12, r24
    1c8a:	7a 01       	movw	r14, r20
    1c8c:	8b 01       	movw	r16, r22
    1c8e:	c0 e0       	ldi	r28, 0x00	; 0
    1c90:	d0 e0       	ldi	r29, 0x00	; 0
    1c92:	ce 15       	cp	r28, r14
    1c94:	df 05       	cpc	r29, r15
    1c96:	81 f0       	breq	.+32     	; 0x1cb8 <_ZN5Print5writeEPKhj+0x40>
    1c98:	d8 01       	movw	r26, r16
    1c9a:	6d 91       	ld	r22, X+
    1c9c:	8d 01       	movw	r16, r26
    1c9e:	d6 01       	movw	r26, r12
    1ca0:	ed 91       	ld	r30, X+
    1ca2:	fc 91       	ld	r31, X
    1ca4:	01 90       	ld	r0, Z+
    1ca6:	f0 81       	ld	r31, Z
    1ca8:	e0 2d       	mov	r30, r0
    1caa:	c6 01       	movw	r24, r12
    1cac:	09 95       	icall
    1cae:	89 2b       	or	r24, r25
    1cb0:	11 f0       	breq	.+4      	; 0x1cb6 <_ZN5Print5writeEPKhj+0x3e>
    1cb2:	21 96       	adiw	r28, 0x01	; 1
    1cb4:	ee cf       	rjmp	.-36     	; 0x1c92 <_ZN5Print5writeEPKhj+0x1a>
    1cb6:	7e 01       	movw	r14, r28
    1cb8:	c7 01       	movw	r24, r14
    1cba:	df 91       	pop	r29
    1cbc:	cf 91       	pop	r28
    1cbe:	1f 91       	pop	r17
    1cc0:	0f 91       	pop	r16
    1cc2:	ff 90       	pop	r15
    1cc4:	ef 90       	pop	r14
    1cc6:	df 90       	pop	r13
    1cc8:	cf 90       	pop	r12
    1cca:	08 95       	ret

00001ccc <_ZN5Print5writeEPKc>:
    1ccc:	61 15       	cp	r22, r1
    1cce:	71 05       	cpc	r23, r1
    1cd0:	79 f0       	breq	.+30     	; 0x1cf0 <_ZN5Print5writeEPKc+0x24>
    1cd2:	fb 01       	movw	r30, r22
    1cd4:	01 90       	ld	r0, Z+
    1cd6:	00 20       	and	r0, r0
    1cd8:	e9 f7       	brne	.-6      	; 0x1cd4 <_ZN5Print5writeEPKc+0x8>
    1cda:	31 97       	sbiw	r30, 0x01	; 1
    1cdc:	af 01       	movw	r20, r30
    1cde:	46 1b       	sub	r20, r22
    1ce0:	57 0b       	sbc	r21, r23
    1ce2:	dc 01       	movw	r26, r24
    1ce4:	ed 91       	ld	r30, X+
    1ce6:	fc 91       	ld	r31, X
    1ce8:	02 80       	ldd	r0, Z+2	; 0x02
    1cea:	f3 81       	ldd	r31, Z+3	; 0x03
    1cec:	e0 2d       	mov	r30, r0
    1cee:	09 94       	ijmp
    1cf0:	80 e0       	ldi	r24, 0x00	; 0
    1cf2:	90 e0       	ldi	r25, 0x00	; 0
    1cf4:	08 95       	ret

00001cf6 <_ZN5Print5printEPKc>:
    1cf6:	0c 94 66 0e 	jmp	0x1ccc	; 0x1ccc <_ZN5Print5writeEPKc>

00001cfa <_ZN5Print5printEc>:
    1cfa:	dc 01       	movw	r26, r24
    1cfc:	ed 91       	ld	r30, X+
    1cfe:	fc 91       	ld	r31, X
    1d00:	01 90       	ld	r0, Z+
    1d02:	f0 81       	ld	r31, Z
    1d04:	e0 2d       	mov	r30, r0
    1d06:	09 94       	ijmp

00001d08 <_ZN5Print7printlnEv>:
    1d08:	6b e2       	ldi	r22, 0x2B	; 43
    1d0a:	72 e0       	ldi	r23, 0x02	; 2
    1d0c:	0c 94 66 0e 	jmp	0x1ccc	; 0x1ccc <_ZN5Print5writeEPKc>

00001d10 <_ZN5Print7printlnEPKc>:
    1d10:	0f 93       	push	r16
    1d12:	1f 93       	push	r17
    1d14:	cf 93       	push	r28
    1d16:	df 93       	push	r29
    1d18:	ec 01       	movw	r28, r24
    1d1a:	0e 94 66 0e 	call	0x1ccc	; 0x1ccc <_ZN5Print5writeEPKc>
    1d1e:	8c 01       	movw	r16, r24
    1d20:	ce 01       	movw	r24, r28
    1d22:	0e 94 84 0e 	call	0x1d08	; 0x1d08 <_ZN5Print7printlnEv>
    1d26:	80 0f       	add	r24, r16
    1d28:	91 1f       	adc	r25, r17
    1d2a:	df 91       	pop	r29
    1d2c:	cf 91       	pop	r28
    1d2e:	1f 91       	pop	r17
    1d30:	0f 91       	pop	r16
    1d32:	08 95       	ret

00001d34 <_ZN5Print11printNumberEmh>:

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base)
{
    1d34:	8f 92       	push	r8
    1d36:	9f 92       	push	r9
    1d38:	af 92       	push	r10
    1d3a:	bf 92       	push	r11
    1d3c:	ef 92       	push	r14
    1d3e:	ff 92       	push	r15
    1d40:	0f 93       	push	r16
    1d42:	1f 93       	push	r17
    1d44:	cf 93       	push	r28
    1d46:	df 93       	push	r29
    1d48:	cd b7       	in	r28, 0x3d	; 61
    1d4a:	de b7       	in	r29, 0x3e	; 62
    1d4c:	a1 97       	sbiw	r28, 0x21	; 33
    1d4e:	0f b6       	in	r0, 0x3f	; 63
    1d50:	f8 94       	cli
    1d52:	de bf       	out	0x3e, r29	; 62
    1d54:	0f be       	out	0x3f, r0	; 63
    1d56:	cd bf       	out	0x3d, r28	; 61
    1d58:	7c 01       	movw	r14, r24
    1d5a:	fa 01       	movw	r30, r20
    1d5c:	cb 01       	movw	r24, r22
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
    1d5e:	19 a2       	std	Y+33, r1	; 0x21

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
    1d60:	22 30       	cpi	r18, 0x02	; 2
    1d62:	08 f4       	brcc	.+2      	; 0x1d66 <_ZN5Print11printNumberEmh+0x32>
    1d64:	2a e0       	ldi	r18, 0x0A	; 10
    1d66:	8e 01       	movw	r16, r28
    1d68:	0f 5d       	subi	r16, 0xDF	; 223
    1d6a:	1f 4f       	sbci	r17, 0xFF	; 255

  do {
    char c = n % base;
    1d6c:	82 2e       	mov	r8, r18
    1d6e:	91 2c       	mov	r9, r1
    1d70:	a1 2c       	mov	r10, r1
    1d72:	b1 2c       	mov	r11, r1
    1d74:	bf 01       	movw	r22, r30
    1d76:	a5 01       	movw	r20, r10
    1d78:	94 01       	movw	r18, r8
    1d7a:	0e 94 3c 1b 	call	0x3678	; 0x3678 <__udivmodsi4>
    n /= base;
    1d7e:	f9 01       	movw	r30, r18
    1d80:	ca 01       	movw	r24, r20

    *--str = c < 10 ? c + '0' : c + 'A' - 10;
    1d82:	01 50       	subi	r16, 0x01	; 1
    1d84:	11 09       	sbc	r17, r1
    1d86:	6a 30       	cpi	r22, 0x0A	; 10
    1d88:	10 f4       	brcc	.+4      	; 0x1d8e <_ZN5Print11printNumberEmh+0x5a>
    1d8a:	60 5d       	subi	r22, 0xD0	; 208
    1d8c:	01 c0       	rjmp	.+2      	; 0x1d90 <_ZN5Print11printNumberEmh+0x5c>
    1d8e:	69 5c       	subi	r22, 0xC9	; 201
    1d90:	d8 01       	movw	r26, r16
    1d92:	6c 93       	st	X, r22
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
    1d94:	23 2b       	or	r18, r19
    1d96:	24 2b       	or	r18, r20
    1d98:	25 2b       	or	r18, r21
    1d9a:	61 f7       	brne	.-40     	; 0x1d74 <_ZN5Print11printNumberEmh+0x40>
    n /= base;

    *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
    1d9c:	b8 01       	movw	r22, r16
    1d9e:	c7 01       	movw	r24, r14
    1da0:	0e 94 66 0e 	call	0x1ccc	; 0x1ccc <_ZN5Print5writeEPKc>
}
    1da4:	a1 96       	adiw	r28, 0x21	; 33
    1da6:	0f b6       	in	r0, 0x3f	; 63
    1da8:	f8 94       	cli
    1daa:	de bf       	out	0x3e, r29	; 62
    1dac:	0f be       	out	0x3f, r0	; 63
    1dae:	cd bf       	out	0x3d, r28	; 61
    1db0:	df 91       	pop	r29
    1db2:	cf 91       	pop	r28
    1db4:	1f 91       	pop	r17
    1db6:	0f 91       	pop	r16
    1db8:	ff 90       	pop	r15
    1dba:	ef 90       	pop	r14
    1dbc:	bf 90       	pop	r11
    1dbe:	af 90       	pop	r10
    1dc0:	9f 90       	pop	r9
    1dc2:	8f 90       	pop	r8
    1dc4:	08 95       	ret

00001dc6 <_ZN5Print5printEmi>:
  }
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
    1dc6:	21 15       	cp	r18, r1
    1dc8:	31 05       	cpc	r19, r1
    1dca:	41 f4       	brne	.+16     	; 0x1ddc <_ZN5Print5printEmi+0x16>
    1dcc:	dc 01       	movw	r26, r24
    1dce:	ed 91       	ld	r30, X+
    1dd0:	fc 91       	ld	r31, X
    1dd2:	01 90       	ld	r0, Z+
    1dd4:	f0 81       	ld	r31, Z
    1dd6:	e0 2d       	mov	r30, r0
    1dd8:	64 2f       	mov	r22, r20
    1dda:	09 94       	ijmp
  else return printNumber(n, base);
    1ddc:	0c 94 9a 0e 	jmp	0x1d34	; 0x1d34 <_ZN5Print11printNumberEmh>

00001de0 <_ZN5Print5printEhi>:
{
  return write(c);
}

size_t Print::print(unsigned char b, int base)
{
    1de0:	9a 01       	movw	r18, r20
  return print((unsigned long) b, base);
    1de2:	46 2f       	mov	r20, r22
    1de4:	50 e0       	ldi	r21, 0x00	; 0
    1de6:	60 e0       	ldi	r22, 0x00	; 0
    1de8:	70 e0       	ldi	r23, 0x00	; 0
    1dea:	0c 94 e3 0e 	jmp	0x1dc6	; 0x1dc6 <_ZN5Print5printEmi>

00001dee <_ZN5Print7printlnEhi>:
  n += println();
  return n;
}

size_t Print::println(unsigned char b, int base)
{
    1dee:	0f 93       	push	r16
    1df0:	1f 93       	push	r17
    1df2:	cf 93       	push	r28
    1df4:	df 93       	push	r29
    1df6:	ec 01       	movw	r28, r24
  size_t n = print(b, base);
    1df8:	0e 94 f0 0e 	call	0x1de0	; 0x1de0 <_ZN5Print5printEhi>
    1dfc:	8c 01       	movw	r16, r24
  n += println();
    1dfe:	ce 01       	movw	r24, r28
    1e00:	0e 94 84 0e 	call	0x1d08	; 0x1d08 <_ZN5Print7printlnEv>
  return n;
}
    1e04:	80 0f       	add	r24, r16
    1e06:	91 1f       	adc	r25, r17
    1e08:	df 91       	pop	r29
    1e0a:	cf 91       	pop	r28
    1e0c:	1f 91       	pop	r17
    1e0e:	0f 91       	pop	r16
    1e10:	08 95       	ret

00001e12 <_ZN5Print5printEji>:
{
  return print((long) n, base);
}

size_t Print::print(unsigned int n, int base)
{
    1e12:	9a 01       	movw	r18, r20
  return print((unsigned long) n, base);
    1e14:	ab 01       	movw	r20, r22
    1e16:	60 e0       	ldi	r22, 0x00	; 0
    1e18:	70 e0       	ldi	r23, 0x00	; 0
    1e1a:	0c 94 e3 0e 	jmp	0x1dc6	; 0x1dc6 <_ZN5Print5printEmi>

00001e1e <_ZN5Print7printlnEji>:
  n += println();
  return n;
}

size_t Print::println(unsigned int num, int base)
{
    1e1e:	0f 93       	push	r16
    1e20:	1f 93       	push	r17
    1e22:	cf 93       	push	r28
    1e24:	df 93       	push	r29
    1e26:	ec 01       	movw	r28, r24
  size_t n = print(num, base);
    1e28:	0e 94 09 0f 	call	0x1e12	; 0x1e12 <_ZN5Print5printEji>
    1e2c:	8c 01       	movw	r16, r24
  n += println();
    1e2e:	ce 01       	movw	r24, r28
    1e30:	0e 94 84 0e 	call	0x1d08	; 0x1d08 <_ZN5Print7printlnEv>
  return n;
}
    1e34:	80 0f       	add	r24, r16
    1e36:	91 1f       	adc	r25, r17
    1e38:	df 91       	pop	r29
    1e3a:	cf 91       	pop	r28
    1e3c:	1f 91       	pop	r17
    1e3e:	0f 91       	pop	r16
    1e40:	08 95       	ret

00001e42 <_ZN5Print7printlnEmi>:
  n += println();
  return n;
}

size_t Print::println(unsigned long num, int base)
{
    1e42:	0f 93       	push	r16
    1e44:	1f 93       	push	r17
    1e46:	cf 93       	push	r28
    1e48:	df 93       	push	r29
    1e4a:	ec 01       	movw	r28, r24
  size_t n = print(num, base);
    1e4c:	0e 94 e3 0e 	call	0x1dc6	; 0x1dc6 <_ZN5Print5printEmi>
    1e50:	8c 01       	movw	r16, r24
  n += println();
    1e52:	ce 01       	movw	r24, r28
    1e54:	0e 94 84 0e 	call	0x1d08	; 0x1d08 <_ZN5Print7printlnEv>
  return n;
}
    1e58:	80 0f       	add	r24, r16
    1e5a:	91 1f       	adc	r25, r17
    1e5c:	df 91       	pop	r29
    1e5e:	cf 91       	pop	r28
    1e60:	1f 91       	pop	r17
    1e62:	0f 91       	pop	r16
    1e64:	08 95       	ret

00001e66 <_ZN5Print5printEli>:
{
  return print((unsigned long) n, base);
}

size_t Print::print(long n, int base)
{
    1e66:	cf 92       	push	r12
    1e68:	df 92       	push	r13
    1e6a:	ef 92       	push	r14
    1e6c:	ff 92       	push	r15
    1e6e:	0f 93       	push	r16
    1e70:	1f 93       	push	r17
    1e72:	cf 93       	push	r28
    1e74:	df 93       	push	r29
  if (base == 0) {
    1e76:	21 15       	cp	r18, r1
    1e78:	31 05       	cpc	r19, r1
    1e7a:	81 f4       	brne	.+32     	; 0x1e9c <_ZN5Print5printEli+0x36>
    return write(n);
    1e7c:	dc 01       	movw	r26, r24
    1e7e:	ed 91       	ld	r30, X+
    1e80:	fc 91       	ld	r31, X
    1e82:	01 90       	ld	r0, Z+
    1e84:	f0 81       	ld	r31, Z
    1e86:	e0 2d       	mov	r30, r0
    1e88:	64 2f       	mov	r22, r20
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
  }
}
    1e8a:	df 91       	pop	r29
    1e8c:	cf 91       	pop	r28
    1e8e:	1f 91       	pop	r17
    1e90:	0f 91       	pop	r16
    1e92:	ff 90       	pop	r15
    1e94:	ef 90       	pop	r14
    1e96:	df 90       	pop	r13
    1e98:	cf 90       	pop	r12
}

size_t Print::print(long n, int base)
{
  if (base == 0) {
    return write(n);
    1e9a:	09 94       	ijmp
  } else if (base == 10) {
    1e9c:	2a 30       	cpi	r18, 0x0A	; 10
    1e9e:	31 05       	cpc	r19, r1
    1ea0:	01 f5       	brne	.+64     	; 0x1ee2 <_ZN5Print5printEli+0x7c>
    if (n < 0) {
    1ea2:	77 ff       	sbrs	r23, 7
    1ea4:	1d c0       	rjmp	.+58     	; 0x1ee0 <_ZN5Print5printEli+0x7a>
    1ea6:	6a 01       	movw	r12, r20
    1ea8:	7b 01       	movw	r14, r22
    1eaa:	ec 01       	movw	r28, r24
      int t = print('-');
    1eac:	6d e2       	ldi	r22, 0x2D	; 45
    1eae:	0e 94 7d 0e 	call	0x1cfa	; 0x1cfa <_ZN5Print5printEc>
    1eb2:	8c 01       	movw	r16, r24
      n = -n;
      return printNumber(n, 10) + t;
    1eb4:	44 27       	eor	r20, r20
    1eb6:	55 27       	eor	r21, r21
    1eb8:	ba 01       	movw	r22, r20
    1eba:	4c 19       	sub	r20, r12
    1ebc:	5d 09       	sbc	r21, r13
    1ebe:	6e 09       	sbc	r22, r14
    1ec0:	7f 09       	sbc	r23, r15
    1ec2:	2a e0       	ldi	r18, 0x0A	; 10
    1ec4:	ce 01       	movw	r24, r28
    1ec6:	0e 94 9a 0e 	call	0x1d34	; 0x1d34 <_ZN5Print11printNumberEmh>
    1eca:	80 0f       	add	r24, r16
    1ecc:	91 1f       	adc	r25, r17
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
  }
}
    1ece:	df 91       	pop	r29
    1ed0:	cf 91       	pop	r28
    1ed2:	1f 91       	pop	r17
    1ed4:	0f 91       	pop	r16
    1ed6:	ff 90       	pop	r15
    1ed8:	ef 90       	pop	r14
    1eda:	df 90       	pop	r13
    1edc:	cf 90       	pop	r12
    1ede:	08 95       	ret
    if (n < 0) {
      int t = print('-');
      n = -n;
      return printNumber(n, 10) + t;
    }
    return printNumber(n, 10);
    1ee0:	2a e0       	ldi	r18, 0x0A	; 10
  } else {
    return printNumber(n, base);
  }
}
    1ee2:	df 91       	pop	r29
    1ee4:	cf 91       	pop	r28
    1ee6:	1f 91       	pop	r17
    1ee8:	0f 91       	pop	r16
    1eea:	ff 90       	pop	r15
    1eec:	ef 90       	pop	r14
    1eee:	df 90       	pop	r13
    1ef0:	cf 90       	pop	r12
      n = -n;
      return printNumber(n, 10) + t;
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
    1ef2:	0c 94 9a 0e 	jmp	0x1d34	; 0x1d34 <_ZN5Print11printNumberEmh>

00001ef6 <_ZN5Print5printEii>:
{
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
{
    1ef6:	9a 01       	movw	r18, r20
  return print((long) n, base);
    1ef8:	ab 01       	movw	r20, r22
    1efa:	77 0f       	add	r23, r23
    1efc:	66 0b       	sbc	r22, r22
    1efe:	77 0b       	sbc	r23, r23
    1f00:	0c 94 33 0f 	jmp	0x1e66	; 0x1e66 <_ZN5Print5printEli>

00001f04 <nothing>:
#include <avr/pgmspace.h>
#include <stdio.h>

#include "wiring_private.h"

static void nothing(void) {
    1f04:	08 95       	ret

00001f06 <attachInterrupt>:
#endif
};
// volatile static voidFuncPtr twiIntFunc;

void attachInterrupt(uint8_t interruptNum, void (*userFunc)(void), int mode) {
  if(interruptNum < EXTERNAL_NUM_INTERRUPTS) {
    1f06:	82 30       	cpi	r24, 0x02	; 2
    1f08:	e8 f4       	brcc	.+58     	; 0x1f44 <attachInterrupt+0x3e>
    intFunc[interruptNum] = userFunc;
    1f0a:	e8 2f       	mov	r30, r24
    1f0c:	f0 e0       	ldi	r31, 0x00	; 0
    1f0e:	ee 0f       	add	r30, r30
    1f10:	ff 1f       	adc	r31, r31
    1f12:	ea 5f       	subi	r30, 0xFA	; 250
    1f14:	fe 4f       	sbci	r31, 0xFE	; 254
    1f16:	71 83       	std	Z+1, r23	; 0x01
    1f18:	60 83       	st	Z, r22
    // to the configuration bits in the hardware register, so we simply shift
    // the mode into place.
      
    // Enable the interrupt.
      
    switch (interruptNum) {
    1f1a:	81 30       	cpi	r24, 0x01	; 1
    1f1c:	41 f0       	breq	.+16     	; 0x1f2e <attachInterrupt+0x28>
      EIMSK |= (1 << INT7);
      break;
#else		
    case 0:
    #if defined(EICRA) && defined(ISC00) && defined(EIMSK)
      EICRA = (EICRA & ~((1 << ISC00) | (1 << ISC01))) | (mode << ISC00);
    1f1e:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <__TEXT_REGION_LENGTH__+0x7e0069>
    1f22:	8c 7f       	andi	r24, 0xFC	; 252
    1f24:	48 2b       	or	r20, r24
    1f26:	40 93 69 00 	sts	0x0069, r20	; 0x800069 <__TEXT_REGION_LENGTH__+0x7e0069>
      EIMSK |= (1 << INT0);
    1f2a:	e8 9a       	sbi	0x1d, 0	; 29
      MCUCR = (MCUCR & ~((1 << ISC00) | (1 << ISC01))) | (mode << ISC00);
      GIMSK |= (1 << INT0);
    #else
      #error attachInterrupt not finished for this CPU (case 0)
    #endif
      break;
    1f2c:	08 95       	ret

    case 1:
    #if defined(EICRA) && defined(ISC10) && defined(ISC11) && defined(EIMSK)
      EICRA = (EICRA & ~((1 << ISC10) | (1 << ISC11))) | (mode << ISC10);
    1f2e:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <__TEXT_REGION_LENGTH__+0x7e0069>
    1f32:	83 7f       	andi	r24, 0xF3	; 243
    1f34:	44 0f       	add	r20, r20
    1f36:	55 1f       	adc	r21, r21
    1f38:	44 0f       	add	r20, r20
    1f3a:	55 1f       	adc	r21, r21
    1f3c:	48 2b       	or	r20, r24
    1f3e:	40 93 69 00 	sts	0x0069, r20	; 0x800069 <__TEXT_REGION_LENGTH__+0x7e0069>
      EIMSK |= (1 << INT1);
    1f42:	e9 9a       	sbi	0x1d, 1	; 29
    1f44:	08 95       	ret

00001f46 <detachInterrupt>:
    }
  }
}

void detachInterrupt(uint8_t interruptNum) {
  if(interruptNum < EXTERNAL_NUM_INTERRUPTS) {
    1f46:	82 30       	cpi	r24, 0x02	; 2
    1f48:	78 f4       	brcc	.+30     	; 0x1f68 <detachInterrupt+0x22>
    // Disable the interrupt.  (We can't assume that interruptNum is equal
    // to the number of the EIMSK bit to clear, as this isn't true on the 
    // ATmega8.  There, INT0 is 6 and INT1 is 7.)
    switch (interruptNum) {
    1f4a:	81 30       	cpi	r24, 0x01	; 1
    1f4c:	11 f0       	breq	.+4      	; 0x1f52 <detachInterrupt+0xc>
      EIMSK &= ~(1 << INT7);
      break;
#else
    case 0:
    #if defined(EIMSK) && defined(INT0)
      EIMSK &= ~(1 << INT0);
    1f4e:	e8 98       	cbi	0x1d, 0	; 29
    #elif defined(GIMSK) && defined(INT0)
      GIMSK &= ~(1 << INT0);
    #else
      #error detachInterrupt not finished for this cpu
    #endif
      break;
    1f50:	01 c0       	rjmp	.+2      	; 0x1f54 <detachInterrupt+0xe>

    case 1:
    #if defined(EIMSK) && defined(INT1)
      EIMSK &= ~(1 << INT1);
    1f52:	e9 98       	cbi	0x1d, 1	; 29
    #endif
      break;       
#endif
    }
      
    intFunc[interruptNum] = nothing;
    1f54:	e8 2f       	mov	r30, r24
    1f56:	f0 e0       	ldi	r31, 0x00	; 0
    1f58:	ee 0f       	add	r30, r30
    1f5a:	ff 1f       	adc	r31, r31
    1f5c:	ea 5f       	subi	r30, 0xFA	; 250
    1f5e:	fe 4f       	sbci	r31, 0xFE	; 254
    1f60:	82 e8       	ldi	r24, 0x82	; 130
    1f62:	9f e0       	ldi	r25, 0x0F	; 15
    1f64:	91 83       	std	Z+1, r25	; 0x01
    1f66:	80 83       	st	Z, r24
    1f68:	08 95       	ret

00001f6a <__vector_1>:
IMPLEMENT_ISR(INT6_vect, EXTERNAL_INT_6)
IMPLEMENT_ISR(INT7_vect, EXTERNAL_INT_7)

#else

IMPLEMENT_ISR(INT0_vect, EXTERNAL_INT_0)
    1f6a:	1f 92       	push	r1
    1f6c:	0f 92       	push	r0
    1f6e:	0f b6       	in	r0, 0x3f	; 63
    1f70:	0f 92       	push	r0
    1f72:	11 24       	eor	r1, r1
    1f74:	2f 93       	push	r18
    1f76:	3f 93       	push	r19
    1f78:	4f 93       	push	r20
    1f7a:	5f 93       	push	r21
    1f7c:	6f 93       	push	r22
    1f7e:	7f 93       	push	r23
    1f80:	8f 93       	push	r24
    1f82:	9f 93       	push	r25
    1f84:	af 93       	push	r26
    1f86:	bf 93       	push	r27
    1f88:	ef 93       	push	r30
    1f8a:	ff 93       	push	r31
    1f8c:	e0 91 06 01 	lds	r30, 0x0106	; 0x800106 <intFunc>
    1f90:	f0 91 07 01 	lds	r31, 0x0107	; 0x800107 <intFunc+0x1>
    1f94:	09 95       	icall
    1f96:	ff 91       	pop	r31
    1f98:	ef 91       	pop	r30
    1f9a:	bf 91       	pop	r27
    1f9c:	af 91       	pop	r26
    1f9e:	9f 91       	pop	r25
    1fa0:	8f 91       	pop	r24
    1fa2:	7f 91       	pop	r23
    1fa4:	6f 91       	pop	r22
    1fa6:	5f 91       	pop	r21
    1fa8:	4f 91       	pop	r20
    1faa:	3f 91       	pop	r19
    1fac:	2f 91       	pop	r18
    1fae:	0f 90       	pop	r0
    1fb0:	0f be       	out	0x3f, r0	; 63
    1fb2:	0f 90       	pop	r0
    1fb4:	1f 90       	pop	r1
    1fb6:	18 95       	reti

00001fb8 <__vector_2>:
IMPLEMENT_ISR(INT1_vect, EXTERNAL_INT_1)
    1fb8:	1f 92       	push	r1
    1fba:	0f 92       	push	r0
    1fbc:	0f b6       	in	r0, 0x3f	; 63
    1fbe:	0f 92       	push	r0
    1fc0:	11 24       	eor	r1, r1
    1fc2:	2f 93       	push	r18
    1fc4:	3f 93       	push	r19
    1fc6:	4f 93       	push	r20
    1fc8:	5f 93       	push	r21
    1fca:	6f 93       	push	r22
    1fcc:	7f 93       	push	r23
    1fce:	8f 93       	push	r24
    1fd0:	9f 93       	push	r25
    1fd2:	af 93       	push	r26
    1fd4:	bf 93       	push	r27
    1fd6:	ef 93       	push	r30
    1fd8:	ff 93       	push	r31
    1fda:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <intFunc+0x2>
    1fde:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <intFunc+0x3>
    1fe2:	09 95       	icall
    1fe4:	ff 91       	pop	r31
    1fe6:	ef 91       	pop	r30
    1fe8:	bf 91       	pop	r27
    1fea:	af 91       	pop	r26
    1fec:	9f 91       	pop	r25
    1fee:	8f 91       	pop	r24
    1ff0:	7f 91       	pop	r23
    1ff2:	6f 91       	pop	r22
    1ff4:	5f 91       	pop	r21
    1ff6:	4f 91       	pop	r20
    1ff8:	3f 91       	pop	r19
    1ffa:	2f 91       	pop	r18
    1ffc:	0f 90       	pop	r0
    1ffe:	0f be       	out	0x3f, r0	; 63
    2000:	0f 90       	pop	r0
    2002:	1f 90       	pop	r1
    2004:	18 95       	reti

00002006 <__vector_16>:
	

#endif

	// busy wait
	__asm__ __volatile__ (
    2006:	1f 92       	push	r1
    2008:	0f 92       	push	r0
    200a:	0f b6       	in	r0, 0x3f	; 63
    200c:	0f 92       	push	r0
    200e:	11 24       	eor	r1, r1
    2010:	2f 93       	push	r18
    2012:	3f 93       	push	r19
    2014:	8f 93       	push	r24
    2016:	9f 93       	push	r25
    2018:	af 93       	push	r26
    201a:	bf 93       	push	r27
    201c:	80 91 57 03 	lds	r24, 0x0357	; 0x800357 <timer0_millis>
    2020:	90 91 58 03 	lds	r25, 0x0358	; 0x800358 <timer0_millis+0x1>
    2024:	a0 91 59 03 	lds	r26, 0x0359	; 0x800359 <timer0_millis+0x2>
    2028:	b0 91 5a 03 	lds	r27, 0x035A	; 0x80035a <timer0_millis+0x3>
    202c:	30 91 56 03 	lds	r19, 0x0356	; 0x800356 <timer0_fract>
    2030:	26 e0       	ldi	r18, 0x06	; 6
    2032:	23 0f       	add	r18, r19
    2034:	2d 37       	cpi	r18, 0x7D	; 125
    2036:	20 f4       	brcc	.+8      	; 0x2040 <__vector_16+0x3a>
    2038:	02 96       	adiw	r24, 0x02	; 2
    203a:	a1 1d       	adc	r26, r1
    203c:	b1 1d       	adc	r27, r1
    203e:	05 c0       	rjmp	.+10     	; 0x204a <__vector_16+0x44>
    2040:	29 e8       	ldi	r18, 0x89	; 137
    2042:	23 0f       	add	r18, r19
    2044:	03 96       	adiw	r24, 0x03	; 3
    2046:	a1 1d       	adc	r26, r1
    2048:	b1 1d       	adc	r27, r1
    204a:	20 93 56 03 	sts	0x0356, r18	; 0x800356 <timer0_fract>
    204e:	80 93 57 03 	sts	0x0357, r24	; 0x800357 <timer0_millis>
    2052:	90 93 58 03 	sts	0x0358, r25	; 0x800358 <timer0_millis+0x1>
    2056:	a0 93 59 03 	sts	0x0359, r26	; 0x800359 <timer0_millis+0x2>
    205a:	b0 93 5a 03 	sts	0x035A, r27	; 0x80035a <timer0_millis+0x3>
    205e:	80 91 5b 03 	lds	r24, 0x035B	; 0x80035b <timer0_overflow_count>
    2062:	90 91 5c 03 	lds	r25, 0x035C	; 0x80035c <timer0_overflow_count+0x1>
    2066:	a0 91 5d 03 	lds	r26, 0x035D	; 0x80035d <timer0_overflow_count+0x2>
    206a:	b0 91 5e 03 	lds	r27, 0x035E	; 0x80035e <timer0_overflow_count+0x3>
    206e:	01 96       	adiw	r24, 0x01	; 1
    2070:	a1 1d       	adc	r26, r1
    2072:	b1 1d       	adc	r27, r1
    2074:	80 93 5b 03 	sts	0x035B, r24	; 0x80035b <timer0_overflow_count>
    2078:	90 93 5c 03 	sts	0x035C, r25	; 0x80035c <timer0_overflow_count+0x1>
    207c:	a0 93 5d 03 	sts	0x035D, r26	; 0x80035d <timer0_overflow_count+0x2>
    2080:	b0 93 5e 03 	sts	0x035E, r27	; 0x80035e <timer0_overflow_count+0x3>
    2084:	bf 91       	pop	r27
    2086:	af 91       	pop	r26
    2088:	9f 91       	pop	r25
    208a:	8f 91       	pop	r24
    208c:	3f 91       	pop	r19
    208e:	2f 91       	pop	r18
    2090:	0f 90       	pop	r0
    2092:	0f be       	out	0x3f, r0	; 63
    2094:	0f 90       	pop	r0
    2096:	1f 90       	pop	r1
    2098:	18 95       	reti

0000209a <millis>:
    209a:	2f b7       	in	r18, 0x3f	; 63
    209c:	f8 94       	cli
    209e:	60 91 57 03 	lds	r22, 0x0357	; 0x800357 <timer0_millis>
    20a2:	70 91 58 03 	lds	r23, 0x0358	; 0x800358 <timer0_millis+0x1>
    20a6:	80 91 59 03 	lds	r24, 0x0359	; 0x800359 <timer0_millis+0x2>
    20aa:	90 91 5a 03 	lds	r25, 0x035A	; 0x80035a <timer0_millis+0x3>
    20ae:	2f bf       	out	0x3f, r18	; 63
    20b0:	08 95       	ret

000020b2 <micros>:
    20b2:	3f b7       	in	r19, 0x3f	; 63
    20b4:	f8 94       	cli
    20b6:	80 91 5b 03 	lds	r24, 0x035B	; 0x80035b <timer0_overflow_count>
    20ba:	90 91 5c 03 	lds	r25, 0x035C	; 0x80035c <timer0_overflow_count+0x1>
    20be:	a0 91 5d 03 	lds	r26, 0x035D	; 0x80035d <timer0_overflow_count+0x2>
    20c2:	b0 91 5e 03 	lds	r27, 0x035E	; 0x80035e <timer0_overflow_count+0x3>
    20c6:	26 b5       	in	r18, 0x26	; 38
    20c8:	a8 9b       	sbis	0x15, 0	; 21
    20ca:	05 c0       	rjmp	.+10     	; 0x20d6 <micros+0x24>
    20cc:	2f 3f       	cpi	r18, 0xFF	; 255
    20ce:	19 f0       	breq	.+6      	; 0x20d6 <micros+0x24>
    20d0:	01 96       	adiw	r24, 0x01	; 1
    20d2:	a1 1d       	adc	r26, r1
    20d4:	b1 1d       	adc	r27, r1
    20d6:	3f bf       	out	0x3f, r19	; 63
    20d8:	ba 2f       	mov	r27, r26
    20da:	a9 2f       	mov	r26, r25
    20dc:	98 2f       	mov	r25, r24
    20de:	88 27       	eor	r24, r24
    20e0:	82 0f       	add	r24, r18
    20e2:	91 1d       	adc	r25, r1
    20e4:	a1 1d       	adc	r26, r1
    20e6:	b1 1d       	adc	r27, r1
    20e8:	bc 01       	movw	r22, r24
    20ea:	cd 01       	movw	r24, r26
    20ec:	43 e0       	ldi	r20, 0x03	; 3
    20ee:	66 0f       	add	r22, r22
    20f0:	77 1f       	adc	r23, r23
    20f2:	88 1f       	adc	r24, r24
    20f4:	99 1f       	adc	r25, r25
    20f6:	4a 95       	dec	r20
    20f8:	d1 f7       	brne	.-12     	; 0x20ee <micros+0x3c>
    20fa:	08 95       	ret

000020fc <delay>:
    20fc:	8f 92       	push	r8
    20fe:	9f 92       	push	r9
    2100:	af 92       	push	r10
    2102:	bf 92       	push	r11
    2104:	cf 92       	push	r12
    2106:	df 92       	push	r13
    2108:	ef 92       	push	r14
    210a:	ff 92       	push	r15
    210c:	6b 01       	movw	r12, r22
    210e:	7c 01       	movw	r14, r24
    2110:	0e 94 59 10 	call	0x20b2	; 0x20b2 <micros>
    2114:	4b 01       	movw	r8, r22
    2116:	5c 01       	movw	r10, r24
    2118:	c1 14       	cp	r12, r1
    211a:	d1 04       	cpc	r13, r1
    211c:	e1 04       	cpc	r14, r1
    211e:	f1 04       	cpc	r15, r1
    2120:	01 f1       	breq	.+64     	; 0x2162 <delay+0x66>
    2122:	0e 94 f5 18 	call	0x31ea	; 0x31ea <yield>
    2126:	0e 94 59 10 	call	0x20b2	; 0x20b2 <micros>
    212a:	dc 01       	movw	r26, r24
    212c:	cb 01       	movw	r24, r22
    212e:	88 19       	sub	r24, r8
    2130:	99 09       	sbc	r25, r9
    2132:	aa 09       	sbc	r26, r10
    2134:	bb 09       	sbc	r27, r11
    2136:	88 3e       	cpi	r24, 0xE8	; 232
    2138:	93 40       	sbci	r25, 0x03	; 3
    213a:	a1 05       	cpc	r26, r1
    213c:	b1 05       	cpc	r27, r1
    213e:	60 f3       	brcs	.-40     	; 0x2118 <delay+0x1c>
    2140:	21 e0       	ldi	r18, 0x01	; 1
    2142:	c2 1a       	sub	r12, r18
    2144:	d1 08       	sbc	r13, r1
    2146:	e1 08       	sbc	r14, r1
    2148:	f1 08       	sbc	r15, r1
    214a:	88 ee       	ldi	r24, 0xE8	; 232
    214c:	88 0e       	add	r8, r24
    214e:	83 e0       	ldi	r24, 0x03	; 3
    2150:	98 1e       	adc	r9, r24
    2152:	a1 1c       	adc	r10, r1
    2154:	b1 1c       	adc	r11, r1
    2156:	c1 14       	cp	r12, r1
    2158:	d1 04       	cpc	r13, r1
    215a:	e1 04       	cpc	r14, r1
    215c:	f1 04       	cpc	r15, r1
    215e:	19 f7       	brne	.-58     	; 0x2126 <delay+0x2a>
    2160:	db cf       	rjmp	.-74     	; 0x2118 <delay+0x1c>
    2162:	ff 90       	pop	r15
    2164:	ef 90       	pop	r14
    2166:	df 90       	pop	r13
    2168:	cf 90       	pop	r12
    216a:	bf 90       	pop	r11
    216c:	af 90       	pop	r10
    216e:	9f 90       	pop	r9
    2170:	8f 90       	pop	r8
    2172:	08 95       	ret

00002174 <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
    2174:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
    2176:	84 b5       	in	r24, 0x24	; 36
    2178:	82 60       	ori	r24, 0x02	; 2
    217a:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
    217c:	84 b5       	in	r24, 0x24	; 36
    217e:	81 60       	ori	r24, 0x01	; 1
    2180:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
    2182:	85 b5       	in	r24, 0x25	; 37
    2184:	82 60       	ori	r24, 0x02	; 2
    2186:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
    2188:	85 b5       	in	r24, 0x25	; 37
    218a:	81 60       	ori	r24, 0x01	; 1
    218c:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
    218e:	ee e6       	ldi	r30, 0x6E	; 110
    2190:	f0 e0       	ldi	r31, 0x00	; 0
    2192:	80 81       	ld	r24, Z
    2194:	81 60       	ori	r24, 0x01	; 1
    2196:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
    2198:	e1 e8       	ldi	r30, 0x81	; 129
    219a:	f0 e0       	ldi	r31, 0x00	; 0
    219c:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
    219e:	80 81       	ld	r24, Z
    21a0:	82 60       	ori	r24, 0x02	; 2
    21a2:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
    21a4:	80 81       	ld	r24, Z
    21a6:	81 60       	ori	r24, 0x01	; 1
    21a8:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
    21aa:	e0 e8       	ldi	r30, 0x80	; 128
    21ac:	f0 e0       	ldi	r31, 0x00	; 0
    21ae:	80 81       	ld	r24, Z
    21b0:	81 60       	ori	r24, 0x01	; 1
    21b2:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
    21b4:	e1 eb       	ldi	r30, 0xB1	; 177
    21b6:	f0 e0       	ldi	r31, 0x00	; 0
    21b8:	80 81       	ld	r24, Z
    21ba:	84 60       	ori	r24, 0x04	; 4
    21bc:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
    21be:	e0 eb       	ldi	r30, 0xB0	; 176
    21c0:	f0 e0       	ldi	r31, 0x00	; 0
    21c2:	80 81       	ld	r24, Z
    21c4:	81 60       	ori	r24, 0x01	; 1
    21c6:	80 83       	st	Z, r24
	#if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
		sbi(ADCSRA, ADPS2);
		sbi(ADCSRA, ADPS1);
		sbi(ADCSRA, ADPS0);
	#elif F_CPU >= 8000000 // 8 MHz / 64 = 125 KHz
		sbi(ADCSRA, ADPS2);
    21c8:	ea e7       	ldi	r30, 0x7A	; 122
    21ca:	f0 e0       	ldi	r31, 0x00	; 0
    21cc:	80 81       	ld	r24, Z
    21ce:	84 60       	ori	r24, 0x04	; 4
    21d0:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS1);
    21d2:	80 81       	ld	r24, Z
    21d4:	82 60       	ori	r24, 0x02	; 2
    21d6:	80 83       	st	Z, r24
		cbi(ADCSRA, ADPS0);
    21d8:	80 81       	ld	r24, Z
    21da:	8e 7f       	andi	r24, 0xFE	; 254
    21dc:	80 83       	st	Z, r24
		cbi(ADCSRA, ADPS2);
		cbi(ADCSRA, ADPS1);
		sbi(ADCSRA, ADPS0);
	#endif
	// enable a2d conversions
	sbi(ADCSRA, ADEN);
    21de:	80 81       	ld	r24, Z
    21e0:	80 68       	ori	r24, 0x80	; 128
    21e2:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
    21e4:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
    21e8:	08 95       	ret

000021ea <turnOffPWM>:
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
    21ea:	83 30       	cpi	r24, 0x03	; 3
    21ec:	81 f0       	breq	.+32     	; 0x220e <turnOffPWM+0x24>
    21ee:	28 f4       	brcc	.+10     	; 0x21fa <turnOffPWM+0x10>
    21f0:	81 30       	cpi	r24, 0x01	; 1
    21f2:	99 f0       	breq	.+38     	; 0x221a <turnOffPWM+0x30>
    21f4:	82 30       	cpi	r24, 0x02	; 2
    21f6:	a1 f0       	breq	.+40     	; 0x2220 <turnOffPWM+0x36>
    21f8:	08 95       	ret
    21fa:	87 30       	cpi	r24, 0x07	; 7
    21fc:	a9 f0       	breq	.+42     	; 0x2228 <turnOffPWM+0x3e>
    21fe:	88 30       	cpi	r24, 0x08	; 8
    2200:	b9 f0       	breq	.+46     	; 0x2230 <turnOffPWM+0x46>
    2202:	84 30       	cpi	r24, 0x04	; 4
    2204:	d1 f4       	brne	.+52     	; 0x223a <turnOffPWM+0x50>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    2206:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    220a:	8f 7d       	andi	r24, 0xDF	; 223
    220c:	03 c0       	rjmp	.+6      	; 0x2214 <turnOffPWM+0x2a>
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
    220e:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    2212:	8f 77       	andi	r24, 0x7F	; 127
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    2214:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    2218:	08 95       	ret
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
    221a:	84 b5       	in	r24, 0x24	; 36
    221c:	8f 77       	andi	r24, 0x7F	; 127
    221e:	02 c0       	rjmp	.+4      	; 0x2224 <turnOffPWM+0x3a>
		#endif
		
		#if defined(TCCR0A) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
    2220:	84 b5       	in	r24, 0x24	; 36
    2222:	8f 7d       	andi	r24, 0xDF	; 223
    2224:	84 bd       	out	0x24, r24	; 36
    2226:	08 95       	ret
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
    2228:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    222c:	8f 77       	andi	r24, 0x7F	; 127
    222e:	03 c0       	rjmp	.+6      	; 0x2236 <turnOffPWM+0x4c>
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
    2230:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    2234:	8f 7d       	andi	r24, 0xDF	; 223
    2236:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    223a:	08 95       	ret

0000223c <pinMode>:
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
    223c:	cf 93       	push	r28
    223e:	df 93       	push	r29
	uint8_t bit = digitalPinToBitMask(pin);
    2240:	90 e0       	ldi	r25, 0x00	; 0
    2242:	fc 01       	movw	r30, r24
    2244:	e4 57       	subi	r30, 0x74	; 116
    2246:	ff 4f       	sbci	r31, 0xFF	; 255
    2248:	24 91       	lpm	r18, Z
	uint8_t port = digitalPinToPort(pin);
    224a:	fc 01       	movw	r30, r24
    224c:	e0 56       	subi	r30, 0x60	; 96
    224e:	ff 4f       	sbci	r31, 0xFF	; 255
    2250:	84 91       	lpm	r24, Z
	volatile uint8_t *reg, *out;

	if (port == NOT_A_PIN) return;
    2252:	88 23       	and	r24, r24
    2254:	61 f1       	breq	.+88     	; 0x22ae <pinMode+0x72>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
    2256:	90 e0       	ldi	r25, 0x00	; 0
    2258:	88 0f       	add	r24, r24
    225a:	99 1f       	adc	r25, r25
    225c:	fc 01       	movw	r30, r24
    225e:	e2 54       	subi	r30, 0x42	; 66
    2260:	ff 4f       	sbci	r31, 0xFF	; 255
    2262:	c5 91       	lpm	r28, Z+
    2264:	d4 91       	lpm	r29, Z
	out = portOutputRegister(port);
    2266:	fc 01       	movw	r30, r24
    2268:	ec 54       	subi	r30, 0x4C	; 76
    226a:	ff 4f       	sbci	r31, 0xFF	; 255
    226c:	a5 91       	lpm	r26, Z+
    226e:	b4 91       	lpm	r27, Z

	if (mode == INPUT) { 
    2270:	61 11       	cpse	r22, r1
    2272:	09 c0       	rjmp	.+18     	; 0x2286 <pinMode+0x4a>
		uint8_t oldSREG = SREG;
    2274:	9f b7       	in	r25, 0x3f	; 63
                cli();
    2276:	f8 94       	cli
		*reg &= ~bit;
    2278:	88 81       	ld	r24, Y
    227a:	20 95       	com	r18
    227c:	82 23       	and	r24, r18
    227e:	88 83       	st	Y, r24
		*out &= ~bit;
    2280:	ec 91       	ld	r30, X
    2282:	2e 23       	and	r18, r30
    2284:	0b c0       	rjmp	.+22     	; 0x229c <pinMode+0x60>
		SREG = oldSREG;
	} else if (mode == INPUT_PULLUP) {
    2286:	62 30       	cpi	r22, 0x02	; 2
    2288:	61 f4       	brne	.+24     	; 0x22a2 <pinMode+0x66>
		uint8_t oldSREG = SREG;
    228a:	9f b7       	in	r25, 0x3f	; 63
                cli();
    228c:	f8 94       	cli
		*reg &= ~bit;
    228e:	88 81       	ld	r24, Y
    2290:	32 2f       	mov	r19, r18
    2292:	30 95       	com	r19
    2294:	83 23       	and	r24, r19
    2296:	88 83       	st	Y, r24
		*out |= bit;
    2298:	ec 91       	ld	r30, X
    229a:	2e 2b       	or	r18, r30
    229c:	2c 93       	st	X, r18
		SREG = oldSREG;
    229e:	9f bf       	out	0x3f, r25	; 63
    22a0:	06 c0       	rjmp	.+12     	; 0x22ae <pinMode+0x72>
	} else {
		uint8_t oldSREG = SREG;
    22a2:	8f b7       	in	r24, 0x3f	; 63
                cli();
    22a4:	f8 94       	cli
		*reg |= bit;
    22a6:	e8 81       	ld	r30, Y
    22a8:	2e 2b       	or	r18, r30
    22aa:	28 83       	st	Y, r18
		SREG = oldSREG;
    22ac:	8f bf       	out	0x3f, r24	; 63
	}
}
    22ae:	df 91       	pop	r29
    22b0:	cf 91       	pop	r28
    22b2:	08 95       	ret

000022b4 <digitalWrite>:
		#endif
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
    22b4:	1f 93       	push	r17
    22b6:	cf 93       	push	r28
    22b8:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
    22ba:	28 2f       	mov	r18, r24
    22bc:	30 e0       	ldi	r19, 0x00	; 0
    22be:	f9 01       	movw	r30, r18
    22c0:	e8 58       	subi	r30, 0x88	; 136
    22c2:	ff 4f       	sbci	r31, 0xFF	; 255
    22c4:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
    22c6:	f9 01       	movw	r30, r18
    22c8:	e4 57       	subi	r30, 0x74	; 116
    22ca:	ff 4f       	sbci	r31, 0xFF	; 255
    22cc:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
    22ce:	f9 01       	movw	r30, r18
    22d0:	e0 56       	subi	r30, 0x60	; 96
    22d2:	ff 4f       	sbci	r31, 0xFF	; 255
    22d4:	c4 91       	lpm	r28, Z
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
    22d6:	cc 23       	and	r28, r28
    22d8:	c1 f0       	breq	.+48     	; 0x230a <digitalWrite+0x56>
    22da:	16 2f       	mov	r17, r22

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    22dc:	81 11       	cpse	r24, r1
    22de:	0e 94 f5 10 	call	0x21ea	; 0x21ea <turnOffPWM>

	out = portOutputRegister(port);
    22e2:	ec 2f       	mov	r30, r28
    22e4:	f0 e0       	ldi	r31, 0x00	; 0
    22e6:	ee 0f       	add	r30, r30
    22e8:	ff 1f       	adc	r31, r31
    22ea:	ec 54       	subi	r30, 0x4C	; 76
    22ec:	ff 4f       	sbci	r31, 0xFF	; 255
    22ee:	a5 91       	lpm	r26, Z+
    22f0:	b4 91       	lpm	r27, Z

	uint8_t oldSREG = SREG;
    22f2:	9f b7       	in	r25, 0x3f	; 63
	cli();
    22f4:	f8 94       	cli

	if (val == LOW) {
    22f6:	11 11       	cpse	r17, r1
    22f8:	04 c0       	rjmp	.+8      	; 0x2302 <digitalWrite+0x4e>
		*out &= ~bit;
    22fa:	8c 91       	ld	r24, X
    22fc:	d0 95       	com	r29
    22fe:	d8 23       	and	r29, r24
    2300:	02 c0       	rjmp	.+4      	; 0x2306 <digitalWrite+0x52>
	} else {
		*out |= bit;
    2302:	ec 91       	ld	r30, X
    2304:	de 2b       	or	r29, r30
    2306:	dc 93       	st	X, r29
	}

	SREG = oldSREG;
    2308:	9f bf       	out	0x3f, r25	; 63
}
    230a:	df 91       	pop	r29
    230c:	cf 91       	pop	r28
    230e:	1f 91       	pop	r17
    2310:	08 95       	ret

00002312 <_ZN7TwoWire5writeEi>:
void Adafruit_TCS34725::disable(void)
{
  /* Turn the device off to save power */
  uint8_t reg = 0;
  reg = read8(TCS34725_ENABLE);
  write8(TCS34725_ENABLE, reg & ~(TCS34725_ENABLE_PON | TCS34725_ENABLE_AEN));
    2312:	dc 01       	movw	r26, r24
    2314:	ed 91       	ld	r30, X+
    2316:	fc 91       	ld	r31, X
    2318:	01 90       	ld	r0, Z+
    231a:	f0 81       	ld	r31, Z
    231c:	e0 2d       	mov	r30, r0
    231e:	09 94       	ijmp

00002320 <_ZN17Adafruit_TCS34725C1E25tcs34725IntegrationTime_t14tcs34725Gain_t>:
    2320:	fc 01       	movw	r30, r24
    2322:	10 82       	st	Z, r1
    2324:	62 83       	std	Z+2, r22	; 0x02
    2326:	41 83       	std	Z+1, r20	; 0x01
    2328:	08 95       	ret

0000232a <_ZN17Adafruit_TCS347255read8Eh>:
    232a:	cf 93       	push	r28
    232c:	c6 2f       	mov	r28, r22
    232e:	69 e2       	ldi	r22, 0x29	; 41
    2330:	70 e0       	ldi	r23, 0x00	; 0
    2332:	80 e6       	ldi	r24, 0x60	; 96
    2334:	93 e0       	ldi	r25, 0x03	; 3
    2336:	0e 94 7f 17 	call	0x2efe	; 0x2efe <_ZN7TwoWire17beginTransmissionEi>
    233a:	c0 68       	ori	r28, 0x80	; 128
    233c:	6c 2f       	mov	r22, r28
    233e:	70 e0       	ldi	r23, 0x00	; 0
    2340:	80 e6       	ldi	r24, 0x60	; 96
    2342:	93 e0       	ldi	r25, 0x03	; 3
    2344:	0e 94 89 11 	call	0x2312	; 0x2312 <_ZN7TwoWire5writeEi>
    2348:	80 e6       	ldi	r24, 0x60	; 96
    234a:	93 e0       	ldi	r25, 0x03	; 3
    234c:	0e 94 fe 17 	call	0x2ffc	; 0x2ffc <_ZN7TwoWire15endTransmissionEv>
    2350:	41 e0       	ldi	r20, 0x01	; 1
    2352:	50 e0       	ldi	r21, 0x00	; 0
    2354:	69 e2       	ldi	r22, 0x29	; 41
    2356:	70 e0       	ldi	r23, 0x00	; 0
    2358:	80 e6       	ldi	r24, 0x60	; 96
    235a:	93 e0       	ldi	r25, 0x03	; 3
    235c:	0e 94 fb 17 	call	0x2ff6	; 0x2ff6 <_ZN7TwoWire11requestFromEii>
    2360:	80 e6       	ldi	r24, 0x60	; 96
    2362:	93 e0       	ldi	r25, 0x03	; 3
    2364:	0e 94 db 16 	call	0x2db6	; 0x2db6 <_ZN7TwoWire4readEv>
    2368:	cf 91       	pop	r28
    236a:	08 95       	ret

0000236c <_ZN17Adafruit_TCS347256read16Eh>:
    236c:	cf 93       	push	r28
    236e:	df 93       	push	r29
    2370:	c6 2f       	mov	r28, r22
    2372:	69 e2       	ldi	r22, 0x29	; 41
    2374:	70 e0       	ldi	r23, 0x00	; 0
    2376:	80 e6       	ldi	r24, 0x60	; 96
    2378:	93 e0       	ldi	r25, 0x03	; 3
    237a:	0e 94 7f 17 	call	0x2efe	; 0x2efe <_ZN7TwoWire17beginTransmissionEi>
    237e:	c0 68       	ori	r28, 0x80	; 128
    2380:	6c 2f       	mov	r22, r28
    2382:	70 e0       	ldi	r23, 0x00	; 0
    2384:	80 e6       	ldi	r24, 0x60	; 96
    2386:	93 e0       	ldi	r25, 0x03	; 3
    2388:	0e 94 89 11 	call	0x2312	; 0x2312 <_ZN7TwoWire5writeEi>
    238c:	80 e6       	ldi	r24, 0x60	; 96
    238e:	93 e0       	ldi	r25, 0x03	; 3
    2390:	0e 94 fe 17 	call	0x2ffc	; 0x2ffc <_ZN7TwoWire15endTransmissionEv>
    2394:	42 e0       	ldi	r20, 0x02	; 2
    2396:	50 e0       	ldi	r21, 0x00	; 0
    2398:	69 e2       	ldi	r22, 0x29	; 41
    239a:	70 e0       	ldi	r23, 0x00	; 0
    239c:	80 e6       	ldi	r24, 0x60	; 96
    239e:	93 e0       	ldi	r25, 0x03	; 3
    23a0:	0e 94 fb 17 	call	0x2ff6	; 0x2ff6 <_ZN7TwoWire11requestFromEii>
    23a4:	80 e6       	ldi	r24, 0x60	; 96
    23a6:	93 e0       	ldi	r25, 0x03	; 3
    23a8:	0e 94 db 16 	call	0x2db6	; 0x2db6 <_ZN7TwoWire4readEv>
    23ac:	ec 01       	movw	r28, r24
    23ae:	80 e6       	ldi	r24, 0x60	; 96
    23b0:	93 e0       	ldi	r25, 0x03	; 3
    23b2:	0e 94 db 16 	call	0x2db6	; 0x2db6 <_ZN7TwoWire4readEv>
    23b6:	20 e0       	ldi	r18, 0x00	; 0
    23b8:	30 e0       	ldi	r19, 0x00	; 0
    23ba:	38 2f       	mov	r19, r24
    23bc:	ce 01       	movw	r24, r28
    23be:	82 2b       	or	r24, r18
    23c0:	93 2b       	or	r25, r19
    23c2:	df 91       	pop	r29
    23c4:	cf 91       	pop	r28
    23c6:	08 95       	ret

000023c8 <_ZN17Adafruit_TCS347256write8Ehm>:
    23c8:	cf 93       	push	r28
    23ca:	df 93       	push	r29
    23cc:	c6 2f       	mov	r28, r22
    23ce:	d2 2f       	mov	r29, r18
    23d0:	69 e2       	ldi	r22, 0x29	; 41
    23d2:	70 e0       	ldi	r23, 0x00	; 0
    23d4:	80 e6       	ldi	r24, 0x60	; 96
    23d6:	93 e0       	ldi	r25, 0x03	; 3
    23d8:	0e 94 7f 17 	call	0x2efe	; 0x2efe <_ZN7TwoWire17beginTransmissionEi>
    23dc:	c0 68       	ori	r28, 0x80	; 128
    23de:	6c 2f       	mov	r22, r28
    23e0:	70 e0       	ldi	r23, 0x00	; 0
    23e2:	80 e6       	ldi	r24, 0x60	; 96
    23e4:	93 e0       	ldi	r25, 0x03	; 3
    23e6:	0e 94 89 11 	call	0x2312	; 0x2312 <_ZN7TwoWire5writeEi>
    23ea:	6d 2f       	mov	r22, r29
    23ec:	80 e6       	ldi	r24, 0x60	; 96
    23ee:	93 e0       	ldi	r25, 0x03	; 3
    23f0:	0e 94 2c 17 	call	0x2e58	; 0x2e58 <_ZN7TwoWire5writeEh>
    23f4:	80 e6       	ldi	r24, 0x60	; 96
    23f6:	93 e0       	ldi	r25, 0x03	; 3
    23f8:	df 91       	pop	r29
    23fa:	cf 91       	pop	r28
    23fc:	0c 94 fe 17 	jmp	0x2ffc	; 0x2ffc <_ZN7TwoWire15endTransmissionEv>

00002400 <_ZN17Adafruit_TCS347256enableEv>:
    2400:	cf 93       	push	r28
    2402:	df 93       	push	r29
    2404:	ec 01       	movw	r28, r24
    2406:	21 e0       	ldi	r18, 0x01	; 1
    2408:	30 e0       	ldi	r19, 0x00	; 0
    240a:	40 e0       	ldi	r20, 0x00	; 0
    240c:	50 e0       	ldi	r21, 0x00	; 0
    240e:	60 e0       	ldi	r22, 0x00	; 0
    2410:	0e 94 e4 11 	call	0x23c8	; 0x23c8 <_ZN17Adafruit_TCS347256write8Ehm>
    2414:	63 e0       	ldi	r22, 0x03	; 3
    2416:	70 e0       	ldi	r23, 0x00	; 0
    2418:	80 e0       	ldi	r24, 0x00	; 0
    241a:	90 e0       	ldi	r25, 0x00	; 0
    241c:	0e 94 7e 10 	call	0x20fc	; 0x20fc <delay>
    2420:	23 e0       	ldi	r18, 0x03	; 3
    2422:	30 e0       	ldi	r19, 0x00	; 0
    2424:	40 e0       	ldi	r20, 0x00	; 0
    2426:	50 e0       	ldi	r21, 0x00	; 0
    2428:	60 e0       	ldi	r22, 0x00	; 0
    242a:	ce 01       	movw	r24, r28
    242c:	df 91       	pop	r29
    242e:	cf 91       	pop	r28
    2430:	0c 94 e4 11 	jmp	0x23c8	; 0x23c8 <_ZN17Adafruit_TCS347256write8Ehm>

00002434 <_ZN17Adafruit_TCS347257setGainE14tcs34725Gain_t>:
/*!
    Adjusts the gain on the TCS34725 (adjusts the sensitivity to light)
*/
/**************************************************************************/
void Adafruit_TCS34725::setGain(tcs34725Gain_t gain)
{
    2434:	1f 93       	push	r17
    2436:	cf 93       	push	r28
    2438:	df 93       	push	r29
    243a:	ec 01       	movw	r28, r24
    243c:	16 2f       	mov	r17, r22
  if (!_tcs34725Initialised) begin();
    243e:	88 81       	ld	r24, Y
    2440:	81 11       	cpse	r24, r1
    2442:	03 c0       	rjmp	.+6      	; 0x244a <_ZN17Adafruit_TCS347257setGainE14tcs34725Gain_t+0x16>
    2444:	ce 01       	movw	r24, r28
    2446:	0e 94 32 12 	call	0x2464	; 0x2464 <_ZN17Adafruit_TCS347255beginEv>

  /* Update the timing register */
  write8(TCS34725_CONTROL, gain);
    244a:	21 2f       	mov	r18, r17
    244c:	30 e0       	ldi	r19, 0x00	; 0
    244e:	40 e0       	ldi	r20, 0x00	; 0
    2450:	50 e0       	ldi	r21, 0x00	; 0
    2452:	6f e0       	ldi	r22, 0x0F	; 15
    2454:	ce 01       	movw	r24, r28
    2456:	0e 94 e4 11 	call	0x23c8	; 0x23c8 <_ZN17Adafruit_TCS347256write8Ehm>

  /* Update value placeholders */
  _tcs34725Gain = gain;
    245a:	19 83       	std	Y+1, r17	; 0x01
}
    245c:	df 91       	pop	r29
    245e:	cf 91       	pop	r28
    2460:	1f 91       	pop	r17
    2462:	08 95       	ret

00002464 <_ZN17Adafruit_TCS347255beginEv>:
    Initializes I2C and configures the sensor (call this function before
    doing anything else)
*/
/**************************************************************************/
boolean Adafruit_TCS34725::begin(void) 
{
    2464:	cf 93       	push	r28
    2466:	df 93       	push	r29
    2468:	ec 01       	movw	r28, r24
  Wire.begin();
    246a:	80 e6       	ldi	r24, 0x60	; 96
    246c:	93 e0       	ldi	r25, 0x03	; 3
    246e:	0e 94 6b 17 	call	0x2ed6	; 0x2ed6 <_ZN7TwoWire5beginEv>
  
  /* Make sure we're actually connected */
  uint8_t x = read8(TCS34725_ID);
    2472:	62 e1       	ldi	r22, 0x12	; 18
    2474:	ce 01       	movw	r24, r28
    2476:	0e 94 95 11 	call	0x232a	; 0x232a <_ZN17Adafruit_TCS347255read8Eh>
  if ((x != 0x44) && (x != 0x10))
    247a:	84 34       	cpi	r24, 0x44	; 68
    247c:	11 f0       	breq	.+4      	; 0x2482 <_ZN17Adafruit_TCS347255beginEv+0x1e>
    247e:	80 31       	cpi	r24, 0x10	; 16
    2480:	79 f4       	brne	.+30     	; 0x24a0 <_ZN17Adafruit_TCS347255beginEv+0x3c>
  {
    return false;
  }
  _tcs34725Initialised = true;
    2482:	81 e0       	ldi	r24, 0x01	; 1
    2484:	88 83       	st	Y, r24

  /* Set default integration time and gain */
  setIntegrationTime(_tcs34725IntegrationTime);
    2486:	6a 81       	ldd	r22, Y+2	; 0x02
    2488:	ce 01       	movw	r24, r28
    248a:	0e 94 54 12 	call	0x24a8	; 0x24a8 <_ZN17Adafruit_TCS3472518setIntegrationTimeE25tcs34725IntegrationTime_t>
  setGain(_tcs34725Gain);
    248e:	69 81       	ldd	r22, Y+1	; 0x01
    2490:	ce 01       	movw	r24, r28
    2492:	0e 94 1a 12 	call	0x2434	; 0x2434 <_ZN17Adafruit_TCS347257setGainE14tcs34725Gain_t>

  /* Note: by default, the device is in power down mode on bootup */
  enable();
    2496:	ce 01       	movw	r24, r28
    2498:	0e 94 00 12 	call	0x2400	; 0x2400 <_ZN17Adafruit_TCS347256enableEv>
    249c:	81 e0       	ldi	r24, 0x01	; 1
    249e:	01 c0       	rjmp	.+2      	; 0x24a2 <_ZN17Adafruit_TCS347255beginEv+0x3e>
  
  /* Make sure we're actually connected */
  uint8_t x = read8(TCS34725_ID);
  if ((x != 0x44) && (x != 0x10))
  {
    return false;
    24a0:	80 e0       	ldi	r24, 0x00	; 0

  /* Note: by default, the device is in power down mode on bootup */
  enable();

  return true;
}
    24a2:	df 91       	pop	r29
    24a4:	cf 91       	pop	r28
    24a6:	08 95       	ret

000024a8 <_ZN17Adafruit_TCS3472518setIntegrationTimeE25tcs34725IntegrationTime_t>:
/*!
    Sets the integration time for the TC34725
*/
/**************************************************************************/
void Adafruit_TCS34725::setIntegrationTime(tcs34725IntegrationTime_t it)
{
    24a8:	1f 93       	push	r17
    24aa:	cf 93       	push	r28
    24ac:	df 93       	push	r29
    24ae:	ec 01       	movw	r28, r24
    24b0:	16 2f       	mov	r17, r22
  if (!_tcs34725Initialised) begin();
    24b2:	88 81       	ld	r24, Y
    24b4:	81 11       	cpse	r24, r1
    24b6:	03 c0       	rjmp	.+6      	; 0x24be <_ZN17Adafruit_TCS3472518setIntegrationTimeE25tcs34725IntegrationTime_t+0x16>
    24b8:	ce 01       	movw	r24, r28
    24ba:	0e 94 32 12 	call	0x2464	; 0x2464 <_ZN17Adafruit_TCS347255beginEv>

  /* Update the timing register */
  write8(TCS34725_ATIME, it);
    24be:	21 2f       	mov	r18, r17
    24c0:	30 e0       	ldi	r19, 0x00	; 0
    24c2:	40 e0       	ldi	r20, 0x00	; 0
    24c4:	50 e0       	ldi	r21, 0x00	; 0
    24c6:	61 e0       	ldi	r22, 0x01	; 1
    24c8:	ce 01       	movw	r24, r28
    24ca:	0e 94 e4 11 	call	0x23c8	; 0x23c8 <_ZN17Adafruit_TCS347256write8Ehm>

  /* Update value placeholders */
  _tcs34725IntegrationTime = it;
    24ce:	1a 83       	std	Y+2, r17	; 0x02
}
    24d0:	df 91       	pop	r29
    24d2:	cf 91       	pop	r28
    24d4:	1f 91       	pop	r17
    24d6:	08 95       	ret

000024d8 <_ZN17Adafruit_TCS3472510getRawDataEPjS0_S0_S0_>:
/*!
    @brief  Reads the raw red, green, blue and clear channel values
*/
/**************************************************************************/
void Adafruit_TCS34725::getRawData (uint16_t *r, uint16_t *g, uint16_t *b, uint16_t *c)
{
    24d8:	af 92       	push	r10
    24da:	bf 92       	push	r11
    24dc:	cf 92       	push	r12
    24de:	df 92       	push	r13
    24e0:	ef 92       	push	r14
    24e2:	ff 92       	push	r15
    24e4:	0f 93       	push	r16
    24e6:	1f 93       	push	r17
    24e8:	cf 93       	push	r28
    24ea:	df 93       	push	r29
    24ec:	ec 01       	movw	r28, r24
    24ee:	5b 01       	movw	r10, r22
    24f0:	6a 01       	movw	r12, r20
    24f2:	79 01       	movw	r14, r18
  if (!_tcs34725Initialised) begin();
    24f4:	88 81       	ld	r24, Y
    24f6:	81 11       	cpse	r24, r1
    24f8:	03 c0       	rjmp	.+6      	; 0x2500 <_ZN17Adafruit_TCS3472510getRawDataEPjS0_S0_S0_+0x28>
    24fa:	ce 01       	movw	r24, r28
    24fc:	0e 94 32 12 	call	0x2464	; 0x2464 <_ZN17Adafruit_TCS347255beginEv>

  *c = read16(TCS34725_CDATAL);
    2500:	64 e1       	ldi	r22, 0x14	; 20
    2502:	ce 01       	movw	r24, r28
    2504:	0e 94 b6 11 	call	0x236c	; 0x236c <_ZN17Adafruit_TCS347256read16Eh>
    2508:	f8 01       	movw	r30, r16
    250a:	91 83       	std	Z+1, r25	; 0x01
    250c:	80 83       	st	Z, r24
  *r = read16(TCS34725_RDATAL);
    250e:	66 e1       	ldi	r22, 0x16	; 22
    2510:	ce 01       	movw	r24, r28
    2512:	0e 94 b6 11 	call	0x236c	; 0x236c <_ZN17Adafruit_TCS347256read16Eh>
    2516:	f5 01       	movw	r30, r10
    2518:	91 83       	std	Z+1, r25	; 0x01
    251a:	80 83       	st	Z, r24
  *g = read16(TCS34725_GDATAL);
    251c:	68 e1       	ldi	r22, 0x18	; 24
    251e:	ce 01       	movw	r24, r28
    2520:	0e 94 b6 11 	call	0x236c	; 0x236c <_ZN17Adafruit_TCS347256read16Eh>
    2524:	f6 01       	movw	r30, r12
    2526:	91 83       	std	Z+1, r25	; 0x01
    2528:	80 83       	st	Z, r24
  *b = read16(TCS34725_BDATAL);
    252a:	6a e1       	ldi	r22, 0x1A	; 26
    252c:	ce 01       	movw	r24, r28
    252e:	0e 94 b6 11 	call	0x236c	; 0x236c <_ZN17Adafruit_TCS347256read16Eh>
    2532:	f7 01       	movw	r30, r14
    2534:	91 83       	std	Z+1, r25	; 0x01
    2536:	80 83       	st	Z, r24
  
  /* Set a delay for the integration time */
  switch (_tcs34725IntegrationTime)
    2538:	8a 81       	ldd	r24, Y+2	; 0x02
    253a:	85 3d       	cpi	r24, 0xD5	; 213
    253c:	f9 f0       	breq	.+62     	; 0x257c <_ZN17Adafruit_TCS3472510getRawDataEPjS0_S0_S0_+0xa4>
    253e:	48 f4       	brcc	.+18     	; 0x2552 <_ZN17Adafruit_TCS3472510getRawDataEPjS0_S0_S0_+0x7a>
    2540:	88 23       	and	r24, r24
    2542:	09 f1       	breq	.+66     	; 0x2586 <_ZN17Adafruit_TCS3472510getRawDataEPjS0_S0_S0_+0xae>
    2544:	80 3c       	cpi	r24, 0xC0	; 192
    2546:	79 f5       	brne	.+94     	; 0x25a6 <_ZN17Adafruit_TCS3472510getRawDataEPjS0_S0_S0_+0xce>
      break;
    case TCS34725_INTEGRATIONTIME_101MS:
      delay(101);
      break;
    case TCS34725_INTEGRATIONTIME_154MS:
      delay(154);
    2548:	6a e9       	ldi	r22, 0x9A	; 154
    254a:	70 e0       	ldi	r23, 0x00	; 0
    254c:	80 e0       	ldi	r24, 0x00	; 0
    254e:	90 e0       	ldi	r25, 0x00	; 0
    2550:	1e c0       	rjmp	.+60     	; 0x258e <_ZN17Adafruit_TCS3472510getRawDataEPjS0_S0_S0_+0xb6>
  *r = read16(TCS34725_RDATAL);
  *g = read16(TCS34725_GDATAL);
  *b = read16(TCS34725_BDATAL);
  
  /* Set a delay for the integration time */
  switch (_tcs34725IntegrationTime)
    2552:	86 3f       	cpi	r24, 0xF6	; 246
    2554:	71 f0       	breq	.+28     	; 0x2572 <_ZN17Adafruit_TCS3472510getRawDataEPjS0_S0_S0_+0x9a>
    2556:	8f 3f       	cpi	r24, 0xFF	; 255
    2558:	39 f0       	breq	.+14     	; 0x2568 <_ZN17Adafruit_TCS3472510getRawDataEPjS0_S0_S0_+0x90>
    255a:	8b 3e       	cpi	r24, 0xEB	; 235
    255c:	21 f5       	brne	.+72     	; 0x25a6 <_ZN17Adafruit_TCS3472510getRawDataEPjS0_S0_S0_+0xce>
      break;
    case TCS34725_INTEGRATIONTIME_24MS:
      delay(24);
      break;
    case TCS34725_INTEGRATIONTIME_50MS:
      delay(50);
    255e:	62 e3       	ldi	r22, 0x32	; 50
    2560:	70 e0       	ldi	r23, 0x00	; 0
    2562:	80 e0       	ldi	r24, 0x00	; 0
    2564:	90 e0       	ldi	r25, 0x00	; 0
    2566:	13 c0       	rjmp	.+38     	; 0x258e <_ZN17Adafruit_TCS3472510getRawDataEPjS0_S0_S0_+0xb6>
  
  /* Set a delay for the integration time */
  switch (_tcs34725IntegrationTime)
  {
    case TCS34725_INTEGRATIONTIME_2_4MS:
      delay(3);
    2568:	63 e0       	ldi	r22, 0x03	; 3
    256a:	70 e0       	ldi	r23, 0x00	; 0
    256c:	80 e0       	ldi	r24, 0x00	; 0
    256e:	90 e0       	ldi	r25, 0x00	; 0
    2570:	0e c0       	rjmp	.+28     	; 0x258e <_ZN17Adafruit_TCS3472510getRawDataEPjS0_S0_S0_+0xb6>
      break;
    case TCS34725_INTEGRATIONTIME_24MS:
      delay(24);
    2572:	68 e1       	ldi	r22, 0x18	; 24
    2574:	70 e0       	ldi	r23, 0x00	; 0
    2576:	80 e0       	ldi	r24, 0x00	; 0
    2578:	90 e0       	ldi	r25, 0x00	; 0
    257a:	09 c0       	rjmp	.+18     	; 0x258e <_ZN17Adafruit_TCS3472510getRawDataEPjS0_S0_S0_+0xb6>
      break;
    case TCS34725_INTEGRATIONTIME_50MS:
      delay(50);
      break;
    case TCS34725_INTEGRATIONTIME_101MS:
      delay(101);
    257c:	65 e6       	ldi	r22, 0x65	; 101
    257e:	70 e0       	ldi	r23, 0x00	; 0
    2580:	80 e0       	ldi	r24, 0x00	; 0
    2582:	90 e0       	ldi	r25, 0x00	; 0
    2584:	04 c0       	rjmp	.+8      	; 0x258e <_ZN17Adafruit_TCS3472510getRawDataEPjS0_S0_S0_+0xb6>
      break;
    case TCS34725_INTEGRATIONTIME_154MS:
      delay(154);
      break;
    case TCS34725_INTEGRATIONTIME_700MS:
      delay(700);
    2586:	6c eb       	ldi	r22, 0xBC	; 188
    2588:	72 e0       	ldi	r23, 0x02	; 2
    258a:	80 e0       	ldi	r24, 0x00	; 0
    258c:	90 e0       	ldi	r25, 0x00	; 0
      break;
  }
}
    258e:	df 91       	pop	r29
    2590:	cf 91       	pop	r28
    2592:	1f 91       	pop	r17
    2594:	0f 91       	pop	r16
    2596:	ff 90       	pop	r15
    2598:	ef 90       	pop	r14
    259a:	df 90       	pop	r13
    259c:	cf 90       	pop	r12
    259e:	bf 90       	pop	r11
    25a0:	af 90       	pop	r10
      break;
    case TCS34725_INTEGRATIONTIME_154MS:
      delay(154);
      break;
    case TCS34725_INTEGRATIONTIME_700MS:
      delay(700);
    25a2:	0c 94 7e 10 	jmp	0x20fc	; 0x20fc <delay>
      break;
  }
}
    25a6:	df 91       	pop	r29
    25a8:	cf 91       	pop	r28
    25aa:	1f 91       	pop	r17
    25ac:	0f 91       	pop	r16
    25ae:	ff 90       	pop	r15
    25b0:	ef 90       	pop	r14
    25b2:	df 90       	pop	r13
    25b4:	cf 90       	pop	r12
    25b6:	bf 90       	pop	r11
    25b8:	af 90       	pop	r10
    25ba:	08 95       	ret

000025bc <_ZN11MCP79412RTC7bcd2decEh>:
    }
    else {
        ctrlReg = (ctrlReg & 0xF8) | _BV(SQWE) | freq;
    }
    ramWrite(CTRL_REG, &ctrlReg, 1);
}
    25bc:	98 2f       	mov	r25, r24
    25be:	92 95       	swap	r25
    25c0:	9f 70       	andi	r25, 0x0F	; 15
    25c2:	2a ef       	ldi	r18, 0xFA	; 250
    25c4:	92 9f       	mul	r25, r18
    25c6:	80 0d       	add	r24, r0
    25c8:	11 24       	eor	r1, r1
    25ca:	08 95       	ret

000025cc <_GLOBAL__sub_I__ZN11MCP79412RTCC2Ev>:
    25cc:	80 e6       	ldi	r24, 0x60	; 96
    25ce:	93 e0       	ldi	r25, 0x03	; 3
    25d0:	0c 94 6b 17 	jmp	0x2ed6	; 0x2ed6 <_ZN7TwoWire5beginEv>

000025d4 <_ZN11MCP79412RTC5writeER12tmElements_t>:
    25d4:	1f 93       	push	r17
    25d6:	cf 93       	push	r28
    25d8:	df 93       	push	r29
    25da:	ec 01       	movw	r28, r24
    25dc:	6f e6       	ldi	r22, 0x6F	; 111
    25de:	70 e0       	ldi	r23, 0x00	; 0
    25e0:	80 e6       	ldi	r24, 0x60	; 96
    25e2:	93 e0       	ldi	r25, 0x03	; 3
    25e4:	0e 94 7f 17 	call	0x2efe	; 0x2efe <_ZN7TwoWire17beginTransmissionEi>
    25e8:	60 e0       	ldi	r22, 0x00	; 0
    25ea:	80 e6       	ldi	r24, 0x60	; 96
    25ec:	93 e0       	ldi	r25, 0x03	; 3
    25ee:	0e 94 2c 17 	call	0x2e58	; 0x2e58 <_ZN7TwoWire5writeEh>
    25f2:	60 e0       	ldi	r22, 0x00	; 0
    25f4:	80 e6       	ldi	r24, 0x60	; 96
    25f6:	93 e0       	ldi	r25, 0x03	; 3
    25f8:	0e 94 2c 17 	call	0x2e58	; 0x2e58 <_ZN7TwoWire5writeEh>
    25fc:	29 81       	ldd	r18, Y+1	; 0x01
    25fe:	1a e0       	ldi	r17, 0x0A	; 10
    2600:	82 2f       	mov	r24, r18
    2602:	61 2f       	mov	r22, r17
    2604:	0e 94 08 1b 	call	0x3610	; 0x3610 <__udivmodqi4>
    2608:	68 2f       	mov	r22, r24
    260a:	66 0f       	add	r22, r22
    260c:	86 0f       	add	r24, r22
    260e:	88 0f       	add	r24, r24
    2610:	68 2f       	mov	r22, r24
    2612:	62 0f       	add	r22, r18
    2614:	80 e6       	ldi	r24, 0x60	; 96
    2616:	93 e0       	ldi	r25, 0x03	; 3
    2618:	0e 94 2c 17 	call	0x2e58	; 0x2e58 <_ZN7TwoWire5writeEh>
    261c:	2a 81       	ldd	r18, Y+2	; 0x02
    261e:	82 2f       	mov	r24, r18
    2620:	61 2f       	mov	r22, r17
    2622:	0e 94 08 1b 	call	0x3610	; 0x3610 <__udivmodqi4>
    2626:	68 2f       	mov	r22, r24
    2628:	66 0f       	add	r22, r22
    262a:	86 0f       	add	r24, r22
    262c:	88 0f       	add	r24, r24
    262e:	68 2f       	mov	r22, r24
    2630:	62 0f       	add	r22, r18
    2632:	80 e6       	ldi	r24, 0x60	; 96
    2634:	93 e0       	ldi	r25, 0x03	; 3
    2636:	0e 94 2c 17 	call	0x2e58	; 0x2e58 <_ZN7TwoWire5writeEh>
    263a:	6b 81       	ldd	r22, Y+3	; 0x03
    263c:	68 60       	ori	r22, 0x08	; 8
    263e:	70 e0       	ldi	r23, 0x00	; 0
    2640:	80 e6       	ldi	r24, 0x60	; 96
    2642:	93 e0       	ldi	r25, 0x03	; 3
    2644:	0e 94 89 11 	call	0x2312	; 0x2312 <_ZN7TwoWire5writeEi>
    2648:	2c 81       	ldd	r18, Y+4	; 0x04
    264a:	82 2f       	mov	r24, r18
    264c:	61 2f       	mov	r22, r17
    264e:	0e 94 08 1b 	call	0x3610	; 0x3610 <__udivmodqi4>
    2652:	68 2f       	mov	r22, r24
    2654:	66 0f       	add	r22, r22
    2656:	86 0f       	add	r24, r22
    2658:	88 0f       	add	r24, r24
    265a:	68 2f       	mov	r22, r24
    265c:	62 0f       	add	r22, r18
    265e:	80 e6       	ldi	r24, 0x60	; 96
    2660:	93 e0       	ldi	r25, 0x03	; 3
    2662:	0e 94 2c 17 	call	0x2e58	; 0x2e58 <_ZN7TwoWire5writeEh>
    2666:	2d 81       	ldd	r18, Y+5	; 0x05
    2668:	82 2f       	mov	r24, r18
    266a:	61 2f       	mov	r22, r17
    266c:	0e 94 08 1b 	call	0x3610	; 0x3610 <__udivmodqi4>
    2670:	68 2f       	mov	r22, r24
    2672:	66 0f       	add	r22, r22
    2674:	86 0f       	add	r24, r22
    2676:	88 0f       	add	r24, r24
    2678:	68 2f       	mov	r22, r24
    267a:	62 0f       	add	r22, r18
    267c:	80 e6       	ldi	r24, 0x60	; 96
    267e:	93 e0       	ldi	r25, 0x03	; 3
    2680:	0e 94 2c 17 	call	0x2e58	; 0x2e58 <_ZN7TwoWire5writeEh>
    2684:	2e 81       	ldd	r18, Y+6	; 0x06
    2686:	2e 51       	subi	r18, 0x1E	; 30
    2688:	82 2f       	mov	r24, r18
    268a:	61 2f       	mov	r22, r17
    268c:	0e 94 08 1b 	call	0x3610	; 0x3610 <__udivmodqi4>
    2690:	68 2f       	mov	r22, r24
    2692:	66 0f       	add	r22, r22
    2694:	68 0f       	add	r22, r24
    2696:	66 0f       	add	r22, r22
    2698:	62 0f       	add	r22, r18
    269a:	80 e6       	ldi	r24, 0x60	; 96
    269c:	93 e0       	ldi	r25, 0x03	; 3
    269e:	0e 94 2c 17 	call	0x2e58	; 0x2e58 <_ZN7TwoWire5writeEh>
    26a2:	80 e6       	ldi	r24, 0x60	; 96
    26a4:	93 e0       	ldi	r25, 0x03	; 3
    26a6:	0e 94 fe 17 	call	0x2ffc	; 0x2ffc <_ZN7TwoWire15endTransmissionEv>
    26aa:	6f e6       	ldi	r22, 0x6F	; 111
    26ac:	70 e0       	ldi	r23, 0x00	; 0
    26ae:	80 e6       	ldi	r24, 0x60	; 96
    26b0:	93 e0       	ldi	r25, 0x03	; 3
    26b2:	0e 94 7f 17 	call	0x2efe	; 0x2efe <_ZN7TwoWire17beginTransmissionEi>
    26b6:	60 e0       	ldi	r22, 0x00	; 0
    26b8:	80 e6       	ldi	r24, 0x60	; 96
    26ba:	93 e0       	ldi	r25, 0x03	; 3
    26bc:	0e 94 2c 17 	call	0x2e58	; 0x2e58 <_ZN7TwoWire5writeEh>
    26c0:	28 81       	ld	r18, Y
    26c2:	82 2f       	mov	r24, r18
    26c4:	61 2f       	mov	r22, r17
    26c6:	0e 94 08 1b 	call	0x3610	; 0x3610 <__udivmodqi4>
    26ca:	68 2f       	mov	r22, r24
    26cc:	66 0f       	add	r22, r22
    26ce:	86 0f       	add	r24, r22
    26d0:	88 0f       	add	r24, r24
    26d2:	28 0f       	add	r18, r24
    26d4:	20 68       	ori	r18, 0x80	; 128
    26d6:	62 2f       	mov	r22, r18
    26d8:	70 e0       	ldi	r23, 0x00	; 0
    26da:	80 e6       	ldi	r24, 0x60	; 96
    26dc:	93 e0       	ldi	r25, 0x03	; 3
    26de:	0e 94 89 11 	call	0x2312	; 0x2312 <_ZN7TwoWire5writeEi>
    26e2:	80 e6       	ldi	r24, 0x60	; 96
    26e4:	93 e0       	ldi	r25, 0x03	; 3
    26e6:	df 91       	pop	r29
    26e8:	cf 91       	pop	r28
    26ea:	1f 91       	pop	r17
    26ec:	0c 94 fe 17 	jmp	0x2ffc	; 0x2ffc <_ZN7TwoWire15endTransmissionEv>

000026f0 <_ZN11MCP79412RTC8ramWriteEhPhh>:
    26f0:	ff 92       	push	r15
    26f2:	0f 93       	push	r16
    26f4:	1f 93       	push	r17
    26f6:	cf 93       	push	r28
    26f8:	df 93       	push	r29
    26fa:	c8 2f       	mov	r28, r24
    26fc:	f6 2e       	mov	r15, r22
    26fe:	07 2f       	mov	r16, r23
    2700:	14 2f       	mov	r17, r20
    2702:	6f e6       	ldi	r22, 0x6F	; 111
    2704:	70 e0       	ldi	r23, 0x00	; 0
    2706:	80 e6       	ldi	r24, 0x60	; 96
    2708:	93 e0       	ldi	r25, 0x03	; 3
    270a:	0e 94 7f 17 	call	0x2efe	; 0x2efe <_ZN7TwoWire17beginTransmissionEi>
    270e:	6c 2f       	mov	r22, r28
    2710:	80 e6       	ldi	r24, 0x60	; 96
    2712:	93 e0       	ldi	r25, 0x03	; 3
    2714:	0e 94 2c 17 	call	0x2e58	; 0x2e58 <_ZN7TwoWire5writeEh>
    2718:	cf 2d       	mov	r28, r15
    271a:	d0 2f       	mov	r29, r16
    271c:	ce 01       	movw	r24, r28
    271e:	81 0f       	add	r24, r17
    2720:	91 1d       	adc	r25, r1
    2722:	8c 01       	movw	r16, r24
    2724:	c0 17       	cp	r28, r16
    2726:	d1 07       	cpc	r29, r17
    2728:	31 f0       	breq	.+12     	; 0x2736 <_ZN11MCP79412RTC8ramWriteEhPhh+0x46>
    272a:	69 91       	ld	r22, Y+
    272c:	80 e6       	ldi	r24, 0x60	; 96
    272e:	93 e0       	ldi	r25, 0x03	; 3
    2730:	0e 94 2c 17 	call	0x2e58	; 0x2e58 <_ZN7TwoWire5writeEh>
    2734:	f7 cf       	rjmp	.-18     	; 0x2724 <_ZN11MCP79412RTC8ramWriteEhPhh+0x34>
    2736:	80 e6       	ldi	r24, 0x60	; 96
    2738:	93 e0       	ldi	r25, 0x03	; 3
    273a:	df 91       	pop	r29
    273c:	cf 91       	pop	r28
    273e:	1f 91       	pop	r17
    2740:	0f 91       	pop	r16
    2742:	ff 90       	pop	r15
    2744:	0c 94 fe 17 	jmp	0x2ffc	; 0x2ffc <_ZN7TwoWire15endTransmissionEv>

00002748 <_ZN11MCP79412RTC4readER12tmElements_t>:
    2748:	cf 93       	push	r28
    274a:	df 93       	push	r29
    274c:	ec 01       	movw	r28, r24
    274e:	6f e6       	ldi	r22, 0x6F	; 111
    2750:	70 e0       	ldi	r23, 0x00	; 0
    2752:	80 e6       	ldi	r24, 0x60	; 96
    2754:	93 e0       	ldi	r25, 0x03	; 3
    2756:	0e 94 7f 17 	call	0x2efe	; 0x2efe <_ZN7TwoWire17beginTransmissionEi>
    275a:	60 e0       	ldi	r22, 0x00	; 0
    275c:	80 e6       	ldi	r24, 0x60	; 96
    275e:	93 e0       	ldi	r25, 0x03	; 3
    2760:	0e 94 2c 17 	call	0x2e58	; 0x2e58 <_ZN7TwoWire5writeEh>
    2764:	80 e6       	ldi	r24, 0x60	; 96
    2766:	93 e0       	ldi	r25, 0x03	; 3
    2768:	0e 94 fe 17 	call	0x2ffc	; 0x2ffc <_ZN7TwoWire15endTransmissionEv>
    276c:	81 11       	cpse	r24, r1
    276e:	3e c0       	rjmp	.+124    	; 0x27ec <_ZN11MCP79412RTC4readER12tmElements_t+0xa4>
    2770:	47 e0       	ldi	r20, 0x07	; 7
    2772:	50 e0       	ldi	r21, 0x00	; 0
    2774:	6f e6       	ldi	r22, 0x6F	; 111
    2776:	70 e0       	ldi	r23, 0x00	; 0
    2778:	80 e6       	ldi	r24, 0x60	; 96
    277a:	93 e0       	ldi	r25, 0x03	; 3
    277c:	0e 94 fb 17 	call	0x2ff6	; 0x2ff6 <_ZN7TwoWire11requestFromEii>
    2780:	80 e6       	ldi	r24, 0x60	; 96
    2782:	93 e0       	ldi	r25, 0x03	; 3
    2784:	0e 94 db 16 	call	0x2db6	; 0x2db6 <_ZN7TwoWire4readEv>
    2788:	8f 77       	andi	r24, 0x7F	; 127
    278a:	0e 94 de 12 	call	0x25bc	; 0x25bc <_ZN11MCP79412RTC7bcd2decEh>
    278e:	88 83       	st	Y, r24
    2790:	80 e6       	ldi	r24, 0x60	; 96
    2792:	93 e0       	ldi	r25, 0x03	; 3
    2794:	0e 94 db 16 	call	0x2db6	; 0x2db6 <_ZN7TwoWire4readEv>
    2798:	0e 94 de 12 	call	0x25bc	; 0x25bc <_ZN11MCP79412RTC7bcd2decEh>
    279c:	89 83       	std	Y+1, r24	; 0x01
    279e:	80 e6       	ldi	r24, 0x60	; 96
    27a0:	93 e0       	ldi	r25, 0x03	; 3
    27a2:	0e 94 db 16 	call	0x2db6	; 0x2db6 <_ZN7TwoWire4readEv>
    27a6:	8f 7b       	andi	r24, 0xBF	; 191
    27a8:	0e 94 de 12 	call	0x25bc	; 0x25bc <_ZN11MCP79412RTC7bcd2decEh>
    27ac:	8a 83       	std	Y+2, r24	; 0x02
    27ae:	80 e6       	ldi	r24, 0x60	; 96
    27b0:	93 e0       	ldi	r25, 0x03	; 3
    27b2:	0e 94 db 16 	call	0x2db6	; 0x2db6 <_ZN7TwoWire4readEv>
    27b6:	87 7c       	andi	r24, 0xC7	; 199
    27b8:	8b 83       	std	Y+3, r24	; 0x03
    27ba:	80 e6       	ldi	r24, 0x60	; 96
    27bc:	93 e0       	ldi	r25, 0x03	; 3
    27be:	0e 94 db 16 	call	0x2db6	; 0x2db6 <_ZN7TwoWire4readEv>
    27c2:	0e 94 de 12 	call	0x25bc	; 0x25bc <_ZN11MCP79412RTC7bcd2decEh>
    27c6:	8c 83       	std	Y+4, r24	; 0x04
    27c8:	80 e6       	ldi	r24, 0x60	; 96
    27ca:	93 e0       	ldi	r25, 0x03	; 3
    27cc:	0e 94 db 16 	call	0x2db6	; 0x2db6 <_ZN7TwoWire4readEv>
    27d0:	8f 7d       	andi	r24, 0xDF	; 223
    27d2:	0e 94 de 12 	call	0x25bc	; 0x25bc <_ZN11MCP79412RTC7bcd2decEh>
    27d6:	8d 83       	std	Y+5, r24	; 0x05
    27d8:	80 e6       	ldi	r24, 0x60	; 96
    27da:	93 e0       	ldi	r25, 0x03	; 3
    27dc:	0e 94 db 16 	call	0x2db6	; 0x2db6 <_ZN7TwoWire4readEv>
    27e0:	0e 94 de 12 	call	0x25bc	; 0x25bc <_ZN11MCP79412RTC7bcd2decEh>
    27e4:	82 5e       	subi	r24, 0xE2	; 226
    27e6:	8e 83       	std	Y+6, r24	; 0x06
    27e8:	81 e0       	ldi	r24, 0x01	; 1
    27ea:	01 c0       	rjmp	.+2      	; 0x27ee <_ZN11MCP79412RTC4readER12tmElements_t+0xa6>
    27ec:	80 e0       	ldi	r24, 0x00	; 0
    27ee:	df 91       	pop	r29
    27f0:	cf 91       	pop	r28
    27f2:	08 95       	ret

000027f4 <_ZN11MCP79412RTC7ramReadEhPhh>:
    27f4:	ff 92       	push	r15
    27f6:	0f 93       	push	r16
    27f8:	1f 93       	push	r17
    27fa:	cf 93       	push	r28
    27fc:	df 93       	push	r29
    27fe:	c8 2f       	mov	r28, r24
    2800:	f6 2e       	mov	r15, r22
    2802:	07 2f       	mov	r16, r23
    2804:	14 2f       	mov	r17, r20
    2806:	6f e6       	ldi	r22, 0x6F	; 111
    2808:	70 e0       	ldi	r23, 0x00	; 0
    280a:	80 e6       	ldi	r24, 0x60	; 96
    280c:	93 e0       	ldi	r25, 0x03	; 3
    280e:	0e 94 7f 17 	call	0x2efe	; 0x2efe <_ZN7TwoWire17beginTransmissionEi>
    2812:	6c 2f       	mov	r22, r28
    2814:	80 e6       	ldi	r24, 0x60	; 96
    2816:	93 e0       	ldi	r25, 0x03	; 3
    2818:	0e 94 2c 17 	call	0x2e58	; 0x2e58 <_ZN7TwoWire5writeEh>
    281c:	80 e6       	ldi	r24, 0x60	; 96
    281e:	93 e0       	ldi	r25, 0x03	; 3
    2820:	0e 94 fe 17 	call	0x2ffc	; 0x2ffc <_ZN7TwoWire15endTransmissionEv>
    2824:	41 2f       	mov	r20, r17
    2826:	6f e6       	ldi	r22, 0x6F	; 111
    2828:	80 e6       	ldi	r24, 0x60	; 96
    282a:	93 e0       	ldi	r25, 0x03	; 3
    282c:	0e 94 f8 17 	call	0x2ff0	; 0x2ff0 <_ZN7TwoWire11requestFromEhh>
    2830:	cf 2d       	mov	r28, r15
    2832:	d0 2f       	mov	r29, r16
    2834:	ce 01       	movw	r24, r28
    2836:	81 0f       	add	r24, r17
    2838:	91 1d       	adc	r25, r1
    283a:	8c 01       	movw	r16, r24
    283c:	c0 17       	cp	r28, r16
    283e:	d1 07       	cpc	r29, r17
    2840:	31 f0       	breq	.+12     	; 0x284e <_ZN11MCP79412RTC7ramReadEhPhh+0x5a>
    2842:	80 e6       	ldi	r24, 0x60	; 96
    2844:	93 e0       	ldi	r25, 0x03	; 3
    2846:	0e 94 db 16 	call	0x2db6	; 0x2db6 <_ZN7TwoWire4readEv>
    284a:	89 93       	st	Y+, r24
    284c:	f7 cf       	rjmp	.-18     	; 0x283c <_ZN11MCP79412RTC7ramReadEhPhh+0x48>
    284e:	df 91       	pop	r29
    2850:	cf 91       	pop	r28
    2852:	1f 91       	pop	r17
    2854:	0f 91       	pop	r16
    2856:	ff 90       	pop	r15
    2858:	08 95       	ret

0000285a <_ZN11MCP79412RTC8setAlarmEhm>:
/*----------------------------------------------------------------------*
 * Set an alarm time. Sets the alarm registers only, does not enable    *
 * the alarm. See enableAlarm().                                        *
 *----------------------------------------------------------------------*/
void MCP79412RTC::setAlarm(uint8_t alarmNumber, time_t alarmTime)
{
    285a:	cf 92       	push	r12
    285c:	df 92       	push	r13
    285e:	ef 92       	push	r14
    2860:	ff 92       	push	r15
    2862:	1f 93       	push	r17
    2864:	cf 93       	push	r28
    2866:	df 93       	push	r29
    2868:	cd b7       	in	r28, 0x3d	; 61
    286a:	de b7       	in	r29, 0x3e	; 62
    286c:	28 97       	sbiw	r28, 0x08	; 8
    286e:	0f b6       	in	r0, 0x3f	; 63
    2870:	f8 94       	cli
    2872:	de bf       	out	0x3e, r29	; 62
    2874:	0f be       	out	0x3f, r0	; 63
    2876:	cd bf       	out	0x3d, r28	; 61
    2878:	69 01       	movw	r12, r18
    287a:	7a 01       	movw	r14, r20
    tmElements_t tm;
    uint8_t day;        //need to preserve bits in the day (of week) register

    alarmNumber &= 0x01;        //ensure a valid alarm number
    287c:	16 2f       	mov	r17, r22
    287e:	11 70       	andi	r17, 0x01	; 1
    ramRead( ALM0_DAY + alarmNumber * (ALM1_REG - ALM0_REG) , &day, 1);
    2880:	87 e0       	ldi	r24, 0x07	; 7
    2882:	18 9f       	mul	r17, r24
    2884:	80 2d       	mov	r24, r0
    2886:	11 24       	eor	r1, r1
    2888:	41 e0       	ldi	r20, 0x01	; 1
    288a:	be 01       	movw	r22, r28
    288c:	68 5f       	subi	r22, 0xF8	; 248
    288e:	7f 4f       	sbci	r23, 0xFF	; 255
    2890:	83 5f       	subi	r24, 0xF3	; 243
    2892:	0e 94 fa 13 	call	0x27f4	; 0x27f4 <_ZN11MCP79412RTC7ramReadEhPhh>
    breakTime(alarmTime, tm);
    2896:	ae 01       	movw	r20, r28
    2898:	4f 5f       	subi	r20, 0xFF	; 255
    289a:	5f 4f       	sbci	r21, 0xFF	; 255
    289c:	c7 01       	movw	r24, r14
    289e:	b6 01       	movw	r22, r12
    28a0:	0e 94 26 15 	call	0x2a4c	; 0x2a4c <_Z9breakTimemR12tmElements_t>
    i2cBeginTransmission(RTC_ADDR);
    28a4:	6f e6       	ldi	r22, 0x6F	; 111
    28a6:	70 e0       	ldi	r23, 0x00	; 0
    28a8:	80 e6       	ldi	r24, 0x60	; 96
    28aa:	93 e0       	ldi	r25, 0x03	; 3
    28ac:	0e 94 7f 17 	call	0x2efe	; 0x2efe <_ZN7TwoWire17beginTransmissionEi>
    i2cWrite( ALM0_REG + alarmNumber * (ALM1_REG - ALM0_REG) );
    28b0:	87 e0       	ldi	r24, 0x07	; 7
    28b2:	18 9f       	mul	r17, r24
    28b4:	b0 01       	movw	r22, r0
    28b6:	11 24       	eor	r1, r1
    28b8:	66 5f       	subi	r22, 0xF6	; 246
    28ba:	7f 4f       	sbci	r23, 0xFF	; 255
    28bc:	80 e6       	ldi	r24, 0x60	; 96
    28be:	93 e0       	ldi	r25, 0x03	; 3
    28c0:	0e 94 89 11 	call	0x2312	; 0x2312 <_ZN7TwoWire5writeEi>
    i2cWrite(dec2bcd(tm.Second));
    28c4:	29 81       	ldd	r18, Y+1	; 0x01
    28c6:	1a e0       	ldi	r17, 0x0A	; 10
    28c8:	82 2f       	mov	r24, r18
    28ca:	61 2f       	mov	r22, r17
    28cc:	0e 94 08 1b 	call	0x3610	; 0x3610 <__udivmodqi4>
    28d0:	68 2f       	mov	r22, r24
    28d2:	66 0f       	add	r22, r22
    28d4:	86 0f       	add	r24, r22
    28d6:	88 0f       	add	r24, r24
    28d8:	68 2f       	mov	r22, r24
    28da:	62 0f       	add	r22, r18
    28dc:	80 e6       	ldi	r24, 0x60	; 96
    28de:	93 e0       	ldi	r25, 0x03	; 3
    28e0:	0e 94 2c 17 	call	0x2e58	; 0x2e58 <_ZN7TwoWire5writeEh>
    i2cWrite(dec2bcd(tm.Minute));
    28e4:	2a 81       	ldd	r18, Y+2	; 0x02
    28e6:	82 2f       	mov	r24, r18
    28e8:	61 2f       	mov	r22, r17
    28ea:	0e 94 08 1b 	call	0x3610	; 0x3610 <__udivmodqi4>
    28ee:	68 2f       	mov	r22, r24
    28f0:	66 0f       	add	r22, r22
    28f2:	86 0f       	add	r24, r22
    28f4:	88 0f       	add	r24, r24
    28f6:	68 2f       	mov	r22, r24
    28f8:	62 0f       	add	r22, r18
    28fa:	80 e6       	ldi	r24, 0x60	; 96
    28fc:	93 e0       	ldi	r25, 0x03	; 3
    28fe:	0e 94 2c 17 	call	0x2e58	; 0x2e58 <_ZN7TwoWire5writeEh>
    i2cWrite(dec2bcd(tm.Hour));                  //sets 24 hour format (Bit 6 == 0)
    2902:	2b 81       	ldd	r18, Y+3	; 0x03
    2904:	82 2f       	mov	r24, r18
    2906:	61 2f       	mov	r22, r17
    2908:	0e 94 08 1b 	call	0x3610	; 0x3610 <__udivmodqi4>
    290c:	68 2f       	mov	r22, r24
    290e:	66 0f       	add	r22, r22
    2910:	86 0f       	add	r24, r22
    2912:	88 0f       	add	r24, r24
    2914:	68 2f       	mov	r22, r24
    2916:	62 0f       	add	r22, r18
    2918:	80 e6       	ldi	r24, 0x60	; 96
    291a:	93 e0       	ldi	r25, 0x03	; 3
    291c:	0e 94 2c 17 	call	0x2e58	; 0x2e58 <_ZN7TwoWire5writeEh>
    i2cWrite( (day & 0xF8) + tm.Wday );
    2920:	88 85       	ldd	r24, Y+8	; 0x08
    2922:	88 7f       	andi	r24, 0xF8	; 248
    2924:	6c 81       	ldd	r22, Y+4	; 0x04
    2926:	70 e0       	ldi	r23, 0x00	; 0
    2928:	68 0f       	add	r22, r24
    292a:	71 1d       	adc	r23, r1
    292c:	80 e6       	ldi	r24, 0x60	; 96
    292e:	93 e0       	ldi	r25, 0x03	; 3
    2930:	0e 94 89 11 	call	0x2312	; 0x2312 <_ZN7TwoWire5writeEi>
    i2cWrite(dec2bcd(tm.Day));
    2934:	2d 81       	ldd	r18, Y+5	; 0x05
    2936:	82 2f       	mov	r24, r18
    2938:	61 2f       	mov	r22, r17
    293a:	0e 94 08 1b 	call	0x3610	; 0x3610 <__udivmodqi4>
    293e:	68 2f       	mov	r22, r24
    2940:	66 0f       	add	r22, r22
    2942:	86 0f       	add	r24, r22
    2944:	88 0f       	add	r24, r24
    2946:	68 2f       	mov	r22, r24
    2948:	62 0f       	add	r22, r18
    294a:	80 e6       	ldi	r24, 0x60	; 96
    294c:	93 e0       	ldi	r25, 0x03	; 3
    294e:	0e 94 2c 17 	call	0x2e58	; 0x2e58 <_ZN7TwoWire5writeEh>
    i2cWrite(dec2bcd(tm.Month));
    2952:	2e 81       	ldd	r18, Y+6	; 0x06
    2954:	82 2f       	mov	r24, r18
    2956:	61 2f       	mov	r22, r17
    2958:	0e 94 08 1b 	call	0x3610	; 0x3610 <__udivmodqi4>
    295c:	68 2f       	mov	r22, r24
    295e:	66 0f       	add	r22, r22
    2960:	86 0f       	add	r24, r22
    2962:	88 0f       	add	r24, r24
    2964:	68 2f       	mov	r22, r24
    2966:	62 0f       	add	r22, r18
    2968:	80 e6       	ldi	r24, 0x60	; 96
    296a:	93 e0       	ldi	r25, 0x03	; 3
    296c:	0e 94 2c 17 	call	0x2e58	; 0x2e58 <_ZN7TwoWire5writeEh>
    i2cEndTransmission();
    2970:	80 e6       	ldi	r24, 0x60	; 96
    2972:	93 e0       	ldi	r25, 0x03	; 3
    2974:	0e 94 fe 17 	call	0x2ffc	; 0x2ffc <_ZN7TwoWire15endTransmissionEv>
}
    2978:	28 96       	adiw	r28, 0x08	; 8
    297a:	0f b6       	in	r0, 0x3f	; 63
    297c:	f8 94       	cli
    297e:	de bf       	out	0x3e, r29	; 62
    2980:	0f be       	out	0x3f, r0	; 63
    2982:	cd bf       	out	0x3d, r28	; 61
    2984:	df 91       	pop	r29
    2986:	cf 91       	pop	r28
    2988:	1f 91       	pop	r17
    298a:	ff 90       	pop	r15
    298c:	ef 90       	pop	r14
    298e:	df 90       	pop	r13
    2990:	cf 90       	pop	r12
    2992:	08 95       	ret

00002994 <_ZN11MCP79412RTC11enableAlarmEhh>:
/*----------------------------------------------------------------------*
 * Enable or disable an alarm, and set the trigger criteria,            *
 * e.g. match only seconds, only minutes, entire time and date, etc.    *
 *----------------------------------------------------------------------*/
void MCP79412RTC::enableAlarm(uint8_t alarmNumber, uint8_t alarmType)
{
    2994:	ef 92       	push	r14
    2996:	ff 92       	push	r15
    2998:	0f 93       	push	r16
    299a:	1f 93       	push	r17
    299c:	cf 93       	push	r28
    299e:	df 93       	push	r29
    29a0:	00 d0       	rcall	.+0      	; 0x29a2 <_ZN11MCP79412RTC11enableAlarmEhh+0xe>
    29a2:	cd b7       	in	r28, 0x3d	; 61
    29a4:	de b7       	in	r29, 0x3e	; 62
    29a6:	04 2f       	mov	r16, r20
    uint8_t day;                //alarm day register has config & flag bits
    uint8_t ctrl;               //control register has alarm enable bits

    alarmNumber &= 0x01;        //ensure a valid alarm number
    29a8:	16 2f       	mov	r17, r22
    29aa:	11 70       	andi	r17, 0x01	; 1
    ramRead(CTRL_REG, &ctrl, 1);
    29ac:	41 e0       	ldi	r20, 0x01	; 1
    29ae:	be 01       	movw	r22, r28
    29b0:	6f 5f       	subi	r22, 0xFF	; 255
    29b2:	7f 4f       	sbci	r23, 0xFF	; 255
    29b4:	87 e0       	ldi	r24, 0x07	; 7
    29b6:	0e 94 fa 13 	call	0x27f4	; 0x27f4 <_ZN11MCP79412RTC7ramReadEhPhh>
    29ba:	e1 2e       	mov	r14, r17
    29bc:	f1 2c       	mov	r15, r1
    if (alarmType < ALM_DISABLE) {
    29be:	08 30       	cpi	r16, 0x08	; 8
    29c0:	40 f5       	brcc	.+80     	; 0x2a12 <_ZN11MCP79412RTC11enableAlarmEhh+0x7e>
        ramRead(ALM0_DAY + alarmNumber * (ALM1_REG - ALM0_REG), &day, 1);
    29c2:	67 e0       	ldi	r22, 0x07	; 7
    29c4:	16 9f       	mul	r17, r22
    29c6:	10 2d       	mov	r17, r0
    29c8:	11 24       	eor	r1, r1
    29ca:	13 5f       	subi	r17, 0xF3	; 243
    29cc:	41 e0       	ldi	r20, 0x01	; 1
    29ce:	be 01       	movw	r22, r28
    29d0:	6e 5f       	subi	r22, 0xFE	; 254
    29d2:	7f 4f       	sbci	r23, 0xFF	; 255
    29d4:	81 2f       	mov	r24, r17
    29d6:	0e 94 fa 13 	call	0x27f4	; 0x27f4 <_ZN11MCP79412RTC7ramReadEhPhh>
        day = ( day & 0x87 ) | alarmType << 4;  //reset interrupt flag, OR in the config bits
    29da:	4a 81       	ldd	r20, Y+2	; 0x02
    29dc:	84 2f       	mov	r24, r20
    29de:	87 78       	andi	r24, 0x87	; 135
    29e0:	90 e1       	ldi	r25, 0x10	; 16
    29e2:	09 9f       	mul	r16, r25
    29e4:	a0 01       	movw	r20, r0
    29e6:	11 24       	eor	r1, r1
    29e8:	48 2b       	or	r20, r24
    29ea:	4a 83       	std	Y+2, r20	; 0x02
        ramWrite(ALM0_DAY + alarmNumber * (ALM1_REG - ALM0_REG), &day, 1);
    29ec:	41 e0       	ldi	r20, 0x01	; 1
    29ee:	be 01       	movw	r22, r28
    29f0:	6e 5f       	subi	r22, 0xFE	; 254
    29f2:	7f 4f       	sbci	r23, 0xFF	; 255
    29f4:	81 2f       	mov	r24, r17
    29f6:	0e 94 78 13 	call	0x26f0	; 0x26f0 <_ZN11MCP79412RTC8ramWriteEhPhh>
        ctrl |= _BV(ALM0 + alarmNumber);        //enable the alarm
    29fa:	84 e0       	ldi	r24, 0x04	; 4
    29fc:	e8 0e       	add	r14, r24
    29fe:	f1 1c       	adc	r15, r1
    2a00:	81 e0       	ldi	r24, 0x01	; 1
    2a02:	90 e0       	ldi	r25, 0x00	; 0
    2a04:	01 c0       	rjmp	.+2      	; 0x2a08 <_ZN11MCP79412RTC11enableAlarmEhh+0x74>
    2a06:	88 0f       	add	r24, r24
    2a08:	ea 94       	dec	r14
    2a0a:	ea f7       	brpl	.-6      	; 0x2a06 <_ZN11MCP79412RTC11enableAlarmEhh+0x72>
    2a0c:	99 81       	ldd	r25, Y+1	; 0x01
    2a0e:	89 2b       	or	r24, r25
    2a10:	0c c0       	rjmp	.+24     	; 0x2a2a <_ZN11MCP79412RTC11enableAlarmEhh+0x96>
    }
    else {
        ctrl &= ~(_BV(ALM0 + alarmNumber));     //disable the alarm
    2a12:	94 e0       	ldi	r25, 0x04	; 4
    2a14:	e9 0e       	add	r14, r25
    2a16:	f1 1c       	adc	r15, r1
    2a18:	81 e0       	ldi	r24, 0x01	; 1
    2a1a:	90 e0       	ldi	r25, 0x00	; 0
    2a1c:	01 c0       	rjmp	.+2      	; 0x2a20 <_ZN11MCP79412RTC11enableAlarmEhh+0x8c>
    2a1e:	88 0f       	add	r24, r24
    2a20:	ea 94       	dec	r14
    2a22:	ea f7       	brpl	.-6      	; 0x2a1e <_ZN11MCP79412RTC11enableAlarmEhh+0x8a>
    2a24:	80 95       	com	r24
    2a26:	99 81       	ldd	r25, Y+1	; 0x01
    2a28:	89 23       	and	r24, r25
    2a2a:	89 83       	std	Y+1, r24	; 0x01
    }
    ramWrite(CTRL_REG, &ctrl, 1);
    2a2c:	41 e0       	ldi	r20, 0x01	; 1
    2a2e:	be 01       	movw	r22, r28
    2a30:	6f 5f       	subi	r22, 0xFF	; 255
    2a32:	7f 4f       	sbci	r23, 0xFF	; 255
    2a34:	87 e0       	ldi	r24, 0x07	; 7
    2a36:	0e 94 78 13 	call	0x26f0	; 0x26f0 <_ZN11MCP79412RTC8ramWriteEhPhh>
}
    2a3a:	0f 90       	pop	r0
    2a3c:	0f 90       	pop	r0
    2a3e:	df 91       	pop	r29
    2a40:	cf 91       	pop	r28
    2a42:	1f 91       	pop	r17
    2a44:	0f 91       	pop	r16
    2a46:	ff 90       	pop	r15
    2a48:	ef 90       	pop	r14
    2a4a:	08 95       	ret

00002a4c <_Z9breakTimemR12tmElements_t>:
}

int year(time_t t) { // the year for the given time
  refreshCache(t);
  return tmYearToCalendar(tm.Year);
}
    2a4c:	6f 92       	push	r6
    2a4e:	7f 92       	push	r7
    2a50:	8f 92       	push	r8
    2a52:	9f 92       	push	r9
    2a54:	af 92       	push	r10
    2a56:	bf 92       	push	r11
    2a58:	cf 92       	push	r12
    2a5a:	df 92       	push	r13
    2a5c:	ef 92       	push	r14
    2a5e:	ff 92       	push	r15
    2a60:	0f 93       	push	r16
    2a62:	1f 93       	push	r17
    2a64:	cf 93       	push	r28
    2a66:	df 93       	push	r29
    2a68:	6b 01       	movw	r12, r22
    2a6a:	7c 01       	movw	r14, r24
    2a6c:	ea 01       	movw	r28, r20
    2a6e:	8c e3       	ldi	r24, 0x3C	; 60
    2a70:	88 2e       	mov	r8, r24
    2a72:	91 2c       	mov	r9, r1
    2a74:	a1 2c       	mov	r10, r1
    2a76:	b1 2c       	mov	r11, r1
    2a78:	c7 01       	movw	r24, r14
    2a7a:	b6 01       	movw	r22, r12
    2a7c:	a5 01       	movw	r20, r10
    2a7e:	94 01       	movw	r18, r8
    2a80:	0e 94 3c 1b 	call	0x3678	; 0x3678 <__udivmodsi4>
    2a84:	68 83       	st	Y, r22
    2a86:	ca 01       	movw	r24, r20
    2a88:	b9 01       	movw	r22, r18
    2a8a:	a5 01       	movw	r20, r10
    2a8c:	94 01       	movw	r18, r8
    2a8e:	0e 94 3c 1b 	call	0x3678	; 0x3678 <__udivmodsi4>
    2a92:	69 83       	std	Y+1, r22	; 0x01
    2a94:	c7 01       	movw	r24, r14
    2a96:	b6 01       	movw	r22, r12
    2a98:	20 e1       	ldi	r18, 0x10	; 16
    2a9a:	3e e0       	ldi	r19, 0x0E	; 14
    2a9c:	40 e0       	ldi	r20, 0x00	; 0
    2a9e:	50 e0       	ldi	r21, 0x00	; 0
    2aa0:	0e 94 3c 1b 	call	0x3678	; 0x3678 <__udivmodsi4>
    2aa4:	ca 01       	movw	r24, r20
    2aa6:	b9 01       	movw	r22, r18
    2aa8:	28 e1       	ldi	r18, 0x18	; 24
    2aaa:	30 e0       	ldi	r19, 0x00	; 0
    2aac:	40 e0       	ldi	r20, 0x00	; 0
    2aae:	50 e0       	ldi	r21, 0x00	; 0
    2ab0:	0e 94 3c 1b 	call	0x3678	; 0x3678 <__udivmodsi4>
    2ab4:	6a 83       	std	Y+2, r22	; 0x02
    2ab6:	c7 01       	movw	r24, r14
    2ab8:	b6 01       	movw	r22, r12
    2aba:	20 e8       	ldi	r18, 0x80	; 128
    2abc:	31 e5       	ldi	r19, 0x51	; 81
    2abe:	41 e0       	ldi	r20, 0x01	; 1
    2ac0:	50 e0       	ldi	r21, 0x00	; 0
    2ac2:	0e 94 3c 1b 	call	0x3678	; 0x3678 <__udivmodsi4>
    2ac6:	69 01       	movw	r12, r18
    2ac8:	7a 01       	movw	r14, r20
    2aca:	ca 01       	movw	r24, r20
    2acc:	b9 01       	movw	r22, r18
    2ace:	6c 5f       	subi	r22, 0xFC	; 252
    2ad0:	7f 4f       	sbci	r23, 0xFF	; 255
    2ad2:	8f 4f       	sbci	r24, 0xFF	; 255
    2ad4:	9f 4f       	sbci	r25, 0xFF	; 255
    2ad6:	27 e0       	ldi	r18, 0x07	; 7
    2ad8:	30 e0       	ldi	r19, 0x00	; 0
    2ada:	40 e0       	ldi	r20, 0x00	; 0
    2adc:	50 e0       	ldi	r21, 0x00	; 0
    2ade:	0e 94 3c 1b 	call	0x3678	; 0x3678 <__udivmodsi4>
    2ae2:	6f 5f       	subi	r22, 0xFF	; 255
    2ae4:	6b 83       	std	Y+3, r22	; 0x03
    2ae6:	81 2c       	mov	r8, r1
    2ae8:	91 2c       	mov	r9, r1
    2aea:	54 01       	movw	r10, r8
    2aec:	40 e0       	ldi	r20, 0x00	; 0
    2aee:	94 e6       	ldi	r25, 0x64	; 100
    2af0:	69 2e       	mov	r6, r25
    2af2:	71 2c       	mov	r7, r1
    2af4:	00 e9       	ldi	r16, 0x90	; 144
    2af6:	11 e0       	ldi	r17, 0x01	; 1
    2af8:	24 2f       	mov	r18, r20
    2afa:	30 e0       	ldi	r19, 0x00	; 0
    2afc:	2e 54       	subi	r18, 0x4E	; 78
    2afe:	38 4f       	sbci	r19, 0xF8	; 248
    2b00:	f9 01       	movw	r30, r18
    2b02:	e3 70       	andi	r30, 0x03	; 3
    2b04:	ff 27       	eor	r31, r31
    2b06:	30 97       	sbiw	r30, 0x00	; 0
    2b08:	89 f4       	brne	.+34     	; 0x2b2c <_Z9breakTimemR12tmElements_t+0xe0>
    2b0a:	c9 01       	movw	r24, r18
    2b0c:	b3 01       	movw	r22, r6
    2b0e:	0e 94 28 1b 	call	0x3650	; 0x3650 <__divmodhi4>
    2b12:	89 2b       	or	r24, r25
    2b14:	31 f4       	brne	.+12     	; 0x2b22 <_Z9breakTimemR12tmElements_t+0xd6>
    2b16:	c9 01       	movw	r24, r18
    2b18:	b8 01       	movw	r22, r16
    2b1a:	0e 94 28 1b 	call	0x3650	; 0x3650 <__divmodhi4>
    2b1e:	89 2b       	or	r24, r25
    2b20:	29 f4       	brne	.+10     	; 0x2b2c <_Z9breakTimemR12tmElements_t+0xe0>
    2b22:	8e e6       	ldi	r24, 0x6E	; 110
    2b24:	91 e0       	ldi	r25, 0x01	; 1
    2b26:	a0 e0       	ldi	r26, 0x00	; 0
    2b28:	b0 e0       	ldi	r27, 0x00	; 0
    2b2a:	04 c0       	rjmp	.+8      	; 0x2b34 <_Z9breakTimemR12tmElements_t+0xe8>
    2b2c:	8d e6       	ldi	r24, 0x6D	; 109
    2b2e:	91 e0       	ldi	r25, 0x01	; 1
    2b30:	a0 e0       	ldi	r26, 0x00	; 0
    2b32:	b0 e0       	ldi	r27, 0x00	; 0
    2b34:	88 0e       	add	r8, r24
    2b36:	99 1e       	adc	r9, r25
    2b38:	aa 1e       	adc	r10, r26
    2b3a:	bb 1e       	adc	r11, r27
    2b3c:	d5 01       	movw	r26, r10
    2b3e:	c4 01       	movw	r24, r8
    2b40:	aa 27       	eor	r26, r26
    2b42:	bb 27       	eor	r27, r27
    2b44:	c8 16       	cp	r12, r24
    2b46:	d9 06       	cpc	r13, r25
    2b48:	ea 06       	cpc	r14, r26
    2b4a:	fb 06       	cpc	r15, r27
    2b4c:	10 f0       	brcs	.+4      	; 0x2b52 <_Z9breakTimemR12tmElements_t+0x106>
    2b4e:	4f 5f       	subi	r20, 0xFF	; 255
    2b50:	d3 cf       	rjmp	.-90     	; 0x2af8 <_Z9breakTimemR12tmElements_t+0xac>
    2b52:	4e 83       	std	Y+6, r20	; 0x06
    2b54:	30 97       	sbiw	r30, 0x00	; 0
    2b56:	99 f4       	brne	.+38     	; 0x2b7e <_Z9breakTimemR12tmElements_t+0x132>
    2b58:	c9 01       	movw	r24, r18
    2b5a:	64 e6       	ldi	r22, 0x64	; 100
    2b5c:	70 e0       	ldi	r23, 0x00	; 0
    2b5e:	0e 94 28 1b 	call	0x3650	; 0x3650 <__divmodhi4>
    2b62:	89 2b       	or	r24, r25
    2b64:	39 f4       	brne	.+14     	; 0x2b74 <_Z9breakTimemR12tmElements_t+0x128>
    2b66:	c9 01       	movw	r24, r18
    2b68:	60 e9       	ldi	r22, 0x90	; 144
    2b6a:	71 e0       	ldi	r23, 0x01	; 1
    2b6c:	0e 94 28 1b 	call	0x3650	; 0x3650 <__divmodhi4>
    2b70:	89 2b       	or	r24, r25
    2b72:	29 f4       	brne	.+10     	; 0x2b7e <_Z9breakTimemR12tmElements_t+0x132>
    2b74:	8e e6       	ldi	r24, 0x6E	; 110
    2b76:	91 e0       	ldi	r25, 0x01	; 1
    2b78:	a0 e0       	ldi	r26, 0x00	; 0
    2b7a:	b0 e0       	ldi	r27, 0x00	; 0
    2b7c:	04 c0       	rjmp	.+8      	; 0x2b86 <_Z9breakTimemR12tmElements_t+0x13a>
    2b7e:	8d e6       	ldi	r24, 0x6D	; 109
    2b80:	91 e0       	ldi	r25, 0x01	; 1
    2b82:	a0 e0       	ldi	r26, 0x00	; 0
    2b84:	b0 e0       	ldi	r27, 0x00	; 0
    2b86:	88 1a       	sub	r8, r24
    2b88:	99 0a       	sbc	r9, r25
    2b8a:	aa 0a       	sbc	r10, r26
    2b8c:	bb 0a       	sbc	r11, r27
    2b8e:	c8 18       	sub	r12, r8
    2b90:	d9 08       	sbc	r13, r9
    2b92:	ea 08       	sbc	r14, r10
    2b94:	fb 08       	sbc	r15, r11
    2b96:	c9 01       	movw	r24, r18
    2b98:	64 e6       	ldi	r22, 0x64	; 100
    2b9a:	70 e0       	ldi	r23, 0x00	; 0
    2b9c:	0e 94 28 1b 	call	0x3650	; 0x3650 <__divmodhi4>
    2ba0:	8c 01       	movw	r16, r24
    2ba2:	c9 01       	movw	r24, r18
    2ba4:	60 e9       	ldi	r22, 0x90	; 144
    2ba6:	71 e0       	ldi	r23, 0x01	; 1
    2ba8:	0e 94 28 1b 	call	0x3650	; 0x3650 <__divmodhi4>
    2bac:	ac e3       	ldi	r26, 0x3C	; 60
    2bae:	b2 e0       	ldi	r27, 0x02	; 2
    2bb0:	20 e0       	ldi	r18, 0x00	; 0
    2bb2:	21 30       	cpi	r18, 0x01	; 1
    2bb4:	41 f4       	brne	.+16     	; 0x2bc6 <_Z9breakTimemR12tmElements_t+0x17a>
    2bb6:	30 97       	sbiw	r30, 0x00	; 0
    2bb8:	51 f4       	brne	.+20     	; 0x2bce <_Z9breakTimemR12tmElements_t+0x182>
    2bba:	01 15       	cp	r16, r1
    2bbc:	11 05       	cpc	r17, r1
    2bbe:	29 f4       	brne	.+10     	; 0x2bca <_Z9breakTimemR12tmElements_t+0x17e>
    2bc0:	00 97       	sbiw	r24, 0x00	; 0
    2bc2:	29 f4       	brne	.+10     	; 0x2bce <_Z9breakTimemR12tmElements_t+0x182>
    2bc4:	02 c0       	rjmp	.+4      	; 0x2bca <_Z9breakTimemR12tmElements_t+0x17e>
    2bc6:	4c 91       	ld	r20, X
    2bc8:	03 c0       	rjmp	.+6      	; 0x2bd0 <_Z9breakTimemR12tmElements_t+0x184>
    2bca:	4d e1       	ldi	r20, 0x1D	; 29
    2bcc:	01 c0       	rjmp	.+2      	; 0x2bd0 <_Z9breakTimemR12tmElements_t+0x184>
    2bce:	4c e1       	ldi	r20, 0x1C	; 28
    2bd0:	50 e0       	ldi	r21, 0x00	; 0
    2bd2:	60 e0       	ldi	r22, 0x00	; 0
    2bd4:	70 e0       	ldi	r23, 0x00	; 0
    2bd6:	c4 16       	cp	r12, r20
    2bd8:	d5 06       	cpc	r13, r21
    2bda:	e6 06       	cpc	r14, r22
    2bdc:	f7 06       	cpc	r15, r23
    2bde:	40 f0       	brcs	.+16     	; 0x2bf0 <_Z9breakTimemR12tmElements_t+0x1a4>
    2be0:	c4 1a       	sub	r12, r20
    2be2:	d5 0a       	sbc	r13, r21
    2be4:	e6 0a       	sbc	r14, r22
    2be6:	f7 0a       	sbc	r15, r23
    2be8:	2f 5f       	subi	r18, 0xFF	; 255
    2bea:	11 96       	adiw	r26, 0x01	; 1
    2bec:	2c 30       	cpi	r18, 0x0C	; 12
    2bee:	09 f7       	brne	.-62     	; 0x2bb2 <_Z9breakTimemR12tmElements_t+0x166>
    2bf0:	2f 5f       	subi	r18, 0xFF	; 255
    2bf2:	2d 83       	std	Y+5, r18	; 0x05
    2bf4:	c3 94       	inc	r12
    2bf6:	cc 82       	std	Y+4, r12	; 0x04
    2bf8:	df 91       	pop	r29
    2bfa:	cf 91       	pop	r28
    2bfc:	1f 91       	pop	r17
    2bfe:	0f 91       	pop	r16
    2c00:	ff 90       	pop	r15
    2c02:	ef 90       	pop	r14
    2c04:	df 90       	pop	r13
    2c06:	cf 90       	pop	r12
    2c08:	bf 90       	pop	r11
    2c0a:	af 90       	pop	r10
    2c0c:	9f 90       	pop	r9
    2c0e:	8f 90       	pop	r8
    2c10:	7f 90       	pop	r7
    2c12:	6f 90       	pop	r6
    2c14:	08 95       	ret

00002c16 <_Z8makeTimeR12tmElements_t>:
  }
  tm.Month = month + 1;  // jan is month 1  
  tm.Day = time + 1;     // day of month
}

time_t makeTime(tmElements_t &tm){   
    2c16:	4f 92       	push	r4
    2c18:	5f 92       	push	r5
    2c1a:	6f 92       	push	r6
    2c1c:	7f 92       	push	r7
    2c1e:	8f 92       	push	r8
    2c20:	9f 92       	push	r9
    2c22:	af 92       	push	r10
    2c24:	bf 92       	push	r11
    2c26:	cf 92       	push	r12
    2c28:	df 92       	push	r13
    2c2a:	ef 92       	push	r14
    2c2c:	ff 92       	push	r15
    2c2e:	0f 93       	push	r16
    2c30:	1f 93       	push	r17
    2c32:	cf 93       	push	r28
    2c34:	df 93       	push	r29
    2c36:	fc 01       	movw	r30, r24
  
  int i;
  uint32_t seconds;

  // seconds from 1970 till 1 jan 00:00:00 of the given year
  seconds= tm.Year*(SECS_PER_DAY * 365);
    2c38:	16 81       	ldd	r17, Z+6	; 0x06
    2c3a:	a1 2f       	mov	r26, r17
    2c3c:	b0 e0       	ldi	r27, 0x00	; 0
    2c3e:	20 e8       	ldi	r18, 0x80	; 128
    2c40:	33 e3       	ldi	r19, 0x33	; 51
    2c42:	41 ee       	ldi	r20, 0xE1	; 225
    2c44:	51 e0       	ldi	r21, 0x01	; 1
    2c46:	0e 94 73 1b 	call	0x36e6	; 0x36e6 <__muluhisi3>
    2c4a:	4b 01       	movw	r8, r22
    2c4c:	5c 01       	movw	r10, r24
    2c4e:	c2 eb       	ldi	r28, 0xB2	; 178
    2c50:	d7 e0       	ldi	r29, 0x07	; 7
  for (i = 0; i < tm.Year; i++) {
    2c52:	9d 01       	movw	r18, r26
    if (LEAP_YEAR(i)) {
    2c54:	04 e6       	ldi	r16, 0x64	; 100
    2c56:	10 e0       	ldi	r17, 0x00	; 0
    2c58:	80 e9       	ldi	r24, 0x90	; 144
    2c5a:	e8 2e       	mov	r14, r24
    2c5c:	ff 24       	eor	r15, r15
    2c5e:	f3 94       	inc	r15
  int i;
  uint32_t seconds;

  // seconds from 1970 till 1 jan 00:00:00 of the given year
  seconds= tm.Year*(SECS_PER_DAY * 365);
  for (i = 0; i < tm.Year; i++) {
    2c60:	ce 01       	movw	r24, r28
    2c62:	82 5b       	subi	r24, 0xB2	; 178
    2c64:	97 40       	sbci	r25, 0x07	; 7
    2c66:	82 17       	cp	r24, r18
    2c68:	93 07       	cpc	r25, r19
    2c6a:	d4 f4       	brge	.+52     	; 0x2ca0 <_Z8makeTimeR12tmElements_t+0x8a>
    if (LEAP_YEAR(i)) {
    2c6c:	ce 01       	movw	r24, r28
    2c6e:	83 70       	andi	r24, 0x03	; 3
    2c70:	99 27       	eor	r25, r25
    2c72:	89 2b       	or	r24, r25
    2c74:	99 f4       	brne	.+38     	; 0x2c9c <_Z8makeTimeR12tmElements_t+0x86>
    2c76:	ce 01       	movw	r24, r28
    2c78:	b8 01       	movw	r22, r16
    2c7a:	0e 94 28 1b 	call	0x3650	; 0x3650 <__divmodhi4>
    2c7e:	89 2b       	or	r24, r25
    2c80:	31 f4       	brne	.+12     	; 0x2c8e <_Z8makeTimeR12tmElements_t+0x78>
    2c82:	ce 01       	movw	r24, r28
    2c84:	b7 01       	movw	r22, r14
    2c86:	0e 94 28 1b 	call	0x3650	; 0x3650 <__divmodhi4>
    2c8a:	89 2b       	or	r24, r25
    2c8c:	39 f4       	brne	.+14     	; 0x2c9c <_Z8makeTimeR12tmElements_t+0x86>
      seconds +=  SECS_PER_DAY;   // add extra days for leap years
    2c8e:	80 e8       	ldi	r24, 0x80	; 128
    2c90:	88 0e       	add	r8, r24
    2c92:	81 e5       	ldi	r24, 0x51	; 81
    2c94:	98 1e       	adc	r9, r24
    2c96:	81 e0       	ldi	r24, 0x01	; 1
    2c98:	a8 1e       	adc	r10, r24
    2c9a:	b1 1c       	adc	r11, r1
    2c9c:	21 96       	adiw	r28, 0x01	; 1
  int i;
  uint32_t seconds;

  // seconds from 1970 till 1 jan 00:00:00 of the given year
  seconds= tm.Year*(SECS_PER_DAY * 365);
  for (i = 0; i < tm.Year; i++) {
    2c9e:	e0 cf       	rjmp	.-64     	; 0x2c60 <_Z8makeTimeR12tmElements_t+0x4a>
      seconds +=  SECS_PER_DAY;   // add extra days for leap years
    }
  }
  
  // add days for this year, months start from 1
  for (i = 1; i < tm.Month; i++) {
    2ca0:	45 80       	ldd	r4, Z+5	; 0x05
    2ca2:	51 2c       	mov	r5, r1
    if ( (i == 2) && LEAP_YEAR(tm.Year)) { 
    2ca4:	2e 54       	subi	r18, 0x4E	; 78
    2ca6:	38 4f       	sbci	r19, 0xF8	; 248
    2ca8:	c9 01       	movw	r24, r18
    2caa:	64 e6       	ldi	r22, 0x64	; 100
    2cac:	70 e0       	ldi	r23, 0x00	; 0
    2cae:	0e 94 28 1b 	call	0x3650	; 0x3650 <__divmodhi4>
    2cb2:	7c 01       	movw	r14, r24
    2cb4:	c9 01       	movw	r24, r18
    2cb6:	60 e9       	ldi	r22, 0x90	; 144
    2cb8:	71 e0       	ldi	r23, 0x01	; 1
    2cba:	0e 94 28 1b 	call	0x3650	; 0x3650 <__divmodhi4>
    2cbe:	6c 01       	movw	r12, r24
    2cc0:	0c e3       	ldi	r16, 0x3C	; 60
    2cc2:	12 e0       	ldi	r17, 0x02	; 2
    2cc4:	c1 e0       	ldi	r28, 0x01	; 1
    2cc6:	d0 e0       	ldi	r29, 0x00	; 0
    2cc8:	39 01       	movw	r6, r18
    2cca:	a3 e0       	ldi	r26, 0x03	; 3
    2ccc:	6a 22       	and	r6, r26
    2cce:	77 24       	eor	r7, r7
      seconds +=  SECS_PER_DAY;   // add extra days for leap years
    }
  }
  
  // add days for this year, months start from 1
  for (i = 1; i < tm.Month; i++) {
    2cd0:	c4 15       	cp	r28, r4
    2cd2:	d5 05       	cpc	r29, r5
    2cd4:	34 f5       	brge	.+76     	; 0x2d22 <_Z8makeTimeR12tmElements_t+0x10c>
    if ( (i == 2) && LEAP_YEAR(tm.Year)) { 
    2cd6:	c2 30       	cpi	r28, 0x02	; 2
    2cd8:	d1 05       	cpc	r29, r1
    2cda:	89 f4       	brne	.+34     	; 0x2cfe <_Z8makeTimeR12tmElements_t+0xe8>
    2cdc:	61 14       	cp	r6, r1
    2cde:	71 04       	cpc	r7, r1
    2ce0:	71 f4       	brne	.+28     	; 0x2cfe <_Z8makeTimeR12tmElements_t+0xe8>
    2ce2:	e1 14       	cp	r14, r1
    2ce4:	f1 04       	cpc	r15, r1
    2ce6:	19 f4       	brne	.+6      	; 0x2cee <_Z8makeTimeR12tmElements_t+0xd8>
    2ce8:	c1 14       	cp	r12, r1
    2cea:	d1 04       	cpc	r13, r1
    2cec:	41 f4       	brne	.+16     	; 0x2cfe <_Z8makeTimeR12tmElements_t+0xe8>
      seconds += SECS_PER_DAY * 29;
    2cee:	b0 e8       	ldi	r27, 0x80	; 128
    2cf0:	8b 0e       	add	r8, r27
    2cf2:	bb e3       	ldi	r27, 0x3B	; 59
    2cf4:	9b 1e       	adc	r9, r27
    2cf6:	b6 e2       	ldi	r27, 0x26	; 38
    2cf8:	ab 1e       	adc	r10, r27
    2cfa:	b1 1c       	adc	r11, r1
    2cfc:	0e c0       	rjmp	.+28     	; 0x2d1a <_Z8makeTimeR12tmElements_t+0x104>
    } else {
      seconds += SECS_PER_DAY * monthDays[i-1];  //monthDay array starts from 0
    2cfe:	d8 01       	movw	r26, r16
    2d00:	8c 91       	ld	r24, X
    2d02:	a8 2f       	mov	r26, r24
    2d04:	b0 e0       	ldi	r27, 0x00	; 0
    2d06:	20 e8       	ldi	r18, 0x80	; 128
    2d08:	31 e5       	ldi	r19, 0x51	; 81
    2d0a:	41 e0       	ldi	r20, 0x01	; 1
    2d0c:	50 e0       	ldi	r21, 0x00	; 0
    2d0e:	0e 94 73 1b 	call	0x36e6	; 0x36e6 <__muluhisi3>
    2d12:	86 0e       	add	r8, r22
    2d14:	97 1e       	adc	r9, r23
    2d16:	a8 1e       	adc	r10, r24
    2d18:	b9 1e       	adc	r11, r25
      seconds +=  SECS_PER_DAY;   // add extra days for leap years
    }
  }
  
  // add days for this year, months start from 1
  for (i = 1; i < tm.Month; i++) {
    2d1a:	21 96       	adiw	r28, 0x01	; 1
    2d1c:	0f 5f       	subi	r16, 0xFF	; 255
    2d1e:	1f 4f       	sbci	r17, 0xFF	; 255
    2d20:	d7 cf       	rjmp	.-82     	; 0x2cd0 <_Z8makeTimeR12tmElements_t+0xba>
      seconds += SECS_PER_DAY * monthDays[i-1];  //monthDay array starts from 0
    }
  }
  seconds+= (tm.Day-1) * SECS_PER_DAY;
  seconds+= tm.Hour * SECS_PER_HOUR;
  seconds+= tm.Minute * SECS_PER_MIN;
    2d22:	41 81       	ldd	r20, Z+1	; 0x01
  seconds+= tm.Second;
  return (time_t)seconds; 
    2d24:	22 81       	ldd	r18, Z+2	; 0x02
    2d26:	30 e0       	ldi	r19, 0x00	; 0
    2d28:	a0 e1       	ldi	r26, 0x10	; 16
    2d2a:	be e0       	ldi	r27, 0x0E	; 14
    2d2c:	0e 94 64 1b 	call	0x36c8	; 0x36c8 <__umulhisi3>
    2d30:	6b 01       	movw	r12, r22
    2d32:	7c 01       	movw	r14, r24
    2d34:	24 2f       	mov	r18, r20
    2d36:	30 e0       	ldi	r19, 0x00	; 0
    2d38:	ac e3       	ldi	r26, 0x3C	; 60
    2d3a:	b0 e0       	ldi	r27, 0x00	; 0
    2d3c:	0e 94 64 1b 	call	0x36c8	; 0x36c8 <__umulhisi3>
    2d40:	dc 01       	movw	r26, r24
    2d42:	cb 01       	movw	r24, r22
    2d44:	8c 0d       	add	r24, r12
    2d46:	9d 1d       	adc	r25, r13
    2d48:	ae 1d       	adc	r26, r14
    2d4a:	bf 1d       	adc	r27, r15
    2d4c:	20 81       	ld	r18, Z
    2d4e:	6c 01       	movw	r12, r24
    2d50:	7d 01       	movw	r14, r26
    2d52:	c2 0e       	add	r12, r18
    2d54:	d1 1c       	adc	r13, r1
    2d56:	e1 1c       	adc	r14, r1
    2d58:	f1 1c       	adc	r15, r1
    2d5a:	a4 81       	ldd	r26, Z+4	; 0x04
    2d5c:	b0 e0       	ldi	r27, 0x00	; 0
    2d5e:	11 97       	sbiw	r26, 0x01	; 1
    2d60:	20 e8       	ldi	r18, 0x80	; 128
    2d62:	31 e5       	ldi	r19, 0x51	; 81
    2d64:	41 e0       	ldi	r20, 0x01	; 1
    2d66:	50 e0       	ldi	r21, 0x00	; 0
    2d68:	0e 94 7e 1b 	call	0x36fc	; 0x36fc <__mulshisi3>
    2d6c:	dc 01       	movw	r26, r24
    2d6e:	cb 01       	movw	r24, r22
    2d70:	8c 0d       	add	r24, r12
    2d72:	9d 1d       	adc	r25, r13
    2d74:	ae 1d       	adc	r26, r14
    2d76:	bf 1d       	adc	r27, r15
    2d78:	bc 01       	movw	r22, r24
    2d7a:	cd 01       	movw	r24, r26
    2d7c:	68 0d       	add	r22, r8
    2d7e:	79 1d       	adc	r23, r9
    2d80:	8a 1d       	adc	r24, r10
    2d82:	9b 1d       	adc	r25, r11
}
    2d84:	df 91       	pop	r29
    2d86:	cf 91       	pop	r28
    2d88:	1f 91       	pop	r17
    2d8a:	0f 91       	pop	r16
    2d8c:	ff 90       	pop	r15
    2d8e:	ef 90       	pop	r14
    2d90:	df 90       	pop	r13
    2d92:	cf 90       	pop	r12
    2d94:	bf 90       	pop	r11
    2d96:	af 90       	pop	r10
    2d98:	9f 90       	pop	r9
    2d9a:	8f 90       	pop	r8
    2d9c:	7f 90       	pop	r7
    2d9e:	6f 90       	pop	r6
    2da0:	5f 90       	pop	r5
    2da2:	4f 90       	pop	r4
    2da4:	08 95       	ret

00002da6 <_ZN7TwoWire9availableEv>:
}

// sets function called on slave read
void TwoWire::onRequest( void (*function)(void) )
{
  user_onRequest = function;
    2da6:	80 91 90 03 	lds	r24, 0x0390	; 0x800390 <_ZN7TwoWire14rxBufferLengthE>
    2daa:	90 e0       	ldi	r25, 0x00	; 0
    2dac:	20 91 91 03 	lds	r18, 0x0391	; 0x800391 <_ZN7TwoWire13rxBufferIndexE>
    2db0:	82 1b       	sub	r24, r18
    2db2:	91 09       	sbc	r25, r1
    2db4:	08 95       	ret

00002db6 <_ZN7TwoWire4readEv>:
    2db6:	90 91 91 03 	lds	r25, 0x0391	; 0x800391 <_ZN7TwoWire13rxBufferIndexE>
    2dba:	80 91 90 03 	lds	r24, 0x0390	; 0x800390 <_ZN7TwoWire14rxBufferLengthE>
    2dbe:	98 17       	cp	r25, r24
    2dc0:	50 f4       	brcc	.+20     	; 0x2dd6 <_ZN7TwoWire4readEv+0x20>
    2dc2:	e9 2f       	mov	r30, r25
    2dc4:	f0 e0       	ldi	r31, 0x00	; 0
    2dc6:	ee 56       	subi	r30, 0x6E	; 110
    2dc8:	fc 4f       	sbci	r31, 0xFC	; 252
    2dca:	20 81       	ld	r18, Z
    2dcc:	30 e0       	ldi	r19, 0x00	; 0
    2dce:	9f 5f       	subi	r25, 0xFF	; 255
    2dd0:	90 93 91 03 	sts	0x0391, r25	; 0x800391 <_ZN7TwoWire13rxBufferIndexE>
    2dd4:	02 c0       	rjmp	.+4      	; 0x2dda <_ZN7TwoWire4readEv+0x24>
    2dd6:	2f ef       	ldi	r18, 0xFF	; 255
    2dd8:	3f ef       	ldi	r19, 0xFF	; 255
    2dda:	c9 01       	movw	r24, r18
    2ddc:	08 95       	ret

00002dde <_ZN7TwoWire4peekEv>:
    2dde:	e0 91 91 03 	lds	r30, 0x0391	; 0x800391 <_ZN7TwoWire13rxBufferIndexE>
    2de2:	80 91 90 03 	lds	r24, 0x0390	; 0x800390 <_ZN7TwoWire14rxBufferLengthE>
    2de6:	e8 17       	cp	r30, r24
    2de8:	30 f4       	brcc	.+12     	; 0x2df6 <_ZN7TwoWire4peekEv+0x18>
    2dea:	f0 e0       	ldi	r31, 0x00	; 0
    2dec:	ee 56       	subi	r30, 0x6E	; 110
    2dee:	fc 4f       	sbci	r31, 0xFC	; 252
    2df0:	80 81       	ld	r24, Z
    2df2:	90 e0       	ldi	r25, 0x00	; 0
    2df4:	08 95       	ret
    2df6:	8f ef       	ldi	r24, 0xFF	; 255
    2df8:	9f ef       	ldi	r25, 0xFF	; 255
    2dfa:	08 95       	ret

00002dfc <_ZN7TwoWire5flushEv>:
    2dfc:	08 95       	ret

00002dfe <_ZN7TwoWire5writeEPKhj>:
    2dfe:	cf 92       	push	r12
    2e00:	df 92       	push	r13
    2e02:	ef 92       	push	r14
    2e04:	ff 92       	push	r15
    2e06:	0f 93       	push	r16
    2e08:	1f 93       	push	r17
    2e0a:	cf 93       	push	r28
    2e0c:	df 93       	push	r29
    2e0e:	7c 01       	movw	r14, r24
    2e10:	cb 01       	movw	r24, r22
    2e12:	8a 01       	movw	r16, r20
    2e14:	20 91 6c 03 	lds	r18, 0x036C	; 0x80036c <_ZN7TwoWire12transmittingE>
    2e18:	22 23       	and	r18, r18
    2e1a:	89 f0       	breq	.+34     	; 0x2e3e <_ZN7TwoWire5writeEPKhj+0x40>
    2e1c:	eb 01       	movw	r28, r22
    2e1e:	6b 01       	movw	r12, r22
    2e20:	c4 0e       	add	r12, r20
    2e22:	d5 1e       	adc	r13, r21
    2e24:	cc 15       	cp	r28, r12
    2e26:	dd 05       	cpc	r29, r13
    2e28:	69 f0       	breq	.+26     	; 0x2e44 <_ZN7TwoWire5writeEPKhj+0x46>
    2e2a:	69 91       	ld	r22, Y+
    2e2c:	d7 01       	movw	r26, r14
    2e2e:	ed 91       	ld	r30, X+
    2e30:	fc 91       	ld	r31, X
    2e32:	01 90       	ld	r0, Z+
    2e34:	f0 81       	ld	r31, Z
    2e36:	e0 2d       	mov	r30, r0
    2e38:	c7 01       	movw	r24, r14
    2e3a:	09 95       	icall
    2e3c:	f3 cf       	rjmp	.-26     	; 0x2e24 <_ZN7TwoWire5writeEPKhj+0x26>
    2e3e:	64 2f       	mov	r22, r20
    2e40:	0e 94 b2 19 	call	0x3364	; 0x3364 <twi_transmit>
    2e44:	c8 01       	movw	r24, r16
    2e46:	df 91       	pop	r29
    2e48:	cf 91       	pop	r28
    2e4a:	1f 91       	pop	r17
    2e4c:	0f 91       	pop	r16
    2e4e:	ff 90       	pop	r15
    2e50:	ef 90       	pop	r14
    2e52:	df 90       	pop	r13
    2e54:	cf 90       	pop	r12
    2e56:	08 95       	ret

00002e58 <_ZN7TwoWire5writeEh>:
    2e58:	cf 93       	push	r28
    2e5a:	df 93       	push	r29
    2e5c:	1f 92       	push	r1
    2e5e:	cd b7       	in	r28, 0x3d	; 61
    2e60:	de b7       	in	r29, 0x3e	; 62
    2e62:	69 83       	std	Y+1, r22	; 0x01
    2e64:	20 91 6c 03 	lds	r18, 0x036C	; 0x80036c <_ZN7TwoWire12transmittingE>
    2e68:	22 23       	and	r18, r18
    2e6a:	d1 f0       	breq	.+52     	; 0x2ea0 <_ZN7TwoWire5writeEh+0x48>
    2e6c:	20 91 6d 03 	lds	r18, 0x036D	; 0x80036d <_ZN7TwoWire14txBufferLengthE>
    2e70:	20 32       	cpi	r18, 0x20	; 32
    2e72:	40 f0       	brcs	.+16     	; 0x2e84 <_ZN7TwoWire5writeEh+0x2c>
    2e74:	21 e0       	ldi	r18, 0x01	; 1
    2e76:	30 e0       	ldi	r19, 0x00	; 0
    2e78:	fc 01       	movw	r30, r24
    2e7a:	33 83       	std	Z+3, r19	; 0x03
    2e7c:	22 83       	std	Z+2, r18	; 0x02
    2e7e:	80 e0       	ldi	r24, 0x00	; 0
    2e80:	90 e0       	ldi	r25, 0x00	; 0
    2e82:	15 c0       	rjmp	.+42     	; 0x2eae <_ZN7TwoWire5writeEh+0x56>
    2e84:	80 91 6e 03 	lds	r24, 0x036E	; 0x80036e <_ZN7TwoWire13txBufferIndexE>
    2e88:	e8 2f       	mov	r30, r24
    2e8a:	f0 e0       	ldi	r31, 0x00	; 0
    2e8c:	e1 59       	subi	r30, 0x91	; 145
    2e8e:	fc 4f       	sbci	r31, 0xFC	; 252
    2e90:	99 81       	ldd	r25, Y+1	; 0x01
    2e92:	90 83       	st	Z, r25
    2e94:	8f 5f       	subi	r24, 0xFF	; 255
    2e96:	80 93 6e 03 	sts	0x036E, r24	; 0x80036e <_ZN7TwoWire13txBufferIndexE>
    2e9a:	80 93 6d 03 	sts	0x036D, r24	; 0x80036d <_ZN7TwoWire14txBufferLengthE>
    2e9e:	05 c0       	rjmp	.+10     	; 0x2eaa <_ZN7TwoWire5writeEh+0x52>
    2ea0:	61 e0       	ldi	r22, 0x01	; 1
    2ea2:	ce 01       	movw	r24, r28
    2ea4:	01 96       	adiw	r24, 0x01	; 1
    2ea6:	0e 94 b2 19 	call	0x3364	; 0x3364 <twi_transmit>
    2eaa:	81 e0       	ldi	r24, 0x01	; 1
    2eac:	90 e0       	ldi	r25, 0x00	; 0
    2eae:	0f 90       	pop	r0
    2eb0:	df 91       	pop	r29
    2eb2:	cf 91       	pop	r28
    2eb4:	08 95       	ret

00002eb6 <_ZN7TwoWireC1Ev>:
    2eb6:	fc 01       	movw	r30, r24
    2eb8:	13 82       	std	Z+3, r1	; 0x03
    2eba:	12 82       	std	Z+2, r1	; 0x02
    2ebc:	88 ee       	ldi	r24, 0xE8	; 232
    2ebe:	93 e0       	ldi	r25, 0x03	; 3
    2ec0:	a0 e0       	ldi	r26, 0x00	; 0
    2ec2:	b0 e0       	ldi	r27, 0x00	; 0
    2ec4:	84 83       	std	Z+4, r24	; 0x04
    2ec6:	95 83       	std	Z+5, r25	; 0x05
    2ec8:	a6 83       	std	Z+6, r26	; 0x06
    2eca:	b7 83       	std	Z+7, r27	; 0x07
    2ecc:	8c e4       	ldi	r24, 0x4C	; 76
    2ece:	92 e0       	ldi	r25, 0x02	; 2
    2ed0:	91 83       	std	Z+1, r25	; 0x01
    2ed2:	80 83       	st	Z, r24
    2ed4:	08 95       	ret

00002ed6 <_ZN7TwoWire5beginEv>:
    2ed6:	10 92 91 03 	sts	0x0391, r1	; 0x800391 <_ZN7TwoWire13rxBufferIndexE>
    2eda:	10 92 90 03 	sts	0x0390, r1	; 0x800390 <_ZN7TwoWire14rxBufferLengthE>
    2ede:	10 92 6e 03 	sts	0x036E, r1	; 0x80036e <_ZN7TwoWire13txBufferIndexE>
    2ee2:	10 92 6d 03 	sts	0x036D, r1	; 0x80036d <_ZN7TwoWire14txBufferLengthE>
    2ee6:	0c 94 f6 18 	jmp	0x31ec	; 0x31ec <twi_init>

00002eea <_ZN7TwoWire17beginTransmissionEh>:
    2eea:	81 e0       	ldi	r24, 0x01	; 1
    2eec:	80 93 6c 03 	sts	0x036C, r24	; 0x80036c <_ZN7TwoWire12transmittingE>
    2ef0:	60 93 8f 03 	sts	0x038F, r22	; 0x80038f <_ZN7TwoWire9txAddressE>
    2ef4:	10 92 6e 03 	sts	0x036E, r1	; 0x80036e <_ZN7TwoWire13txBufferIndexE>
    2ef8:	10 92 6d 03 	sts	0x036D, r1	; 0x80036d <_ZN7TwoWire14txBufferLengthE>
    2efc:	08 95       	ret

00002efe <_ZN7TwoWire17beginTransmissionEi>:
    2efe:	0c 94 75 17 	jmp	0x2eea	; 0x2eea <_ZN7TwoWire17beginTransmissionEh>

00002f02 <_ZN7TwoWire15endTransmissionEh>:
    2f02:	0f 93       	push	r16
    2f04:	06 2f       	mov	r16, r22
    2f06:	21 e0       	ldi	r18, 0x01	; 1
    2f08:	40 91 6d 03 	lds	r20, 0x036D	; 0x80036d <_ZN7TwoWire14txBufferLengthE>
    2f0c:	6f e6       	ldi	r22, 0x6F	; 111
    2f0e:	73 e0       	ldi	r23, 0x03	; 3
    2f10:	80 91 8f 03 	lds	r24, 0x038F	; 0x80038f <_ZN7TwoWire9txAddressE>
    2f14:	0e 94 5c 19 	call	0x32b8	; 0x32b8 <twi_writeTo>
    2f18:	10 92 6e 03 	sts	0x036E, r1	; 0x80036e <_ZN7TwoWire13txBufferIndexE>
    2f1c:	10 92 6d 03 	sts	0x036D, r1	; 0x80036d <_ZN7TwoWire14txBufferLengthE>
    2f20:	10 92 6c 03 	sts	0x036C, r1	; 0x80036c <_ZN7TwoWire12transmittingE>
    2f24:	0f 91       	pop	r16
    2f26:	08 95       	ret

00002f28 <_ZN7TwoWire11requestFromEhhmhh>:
    2f28:	4f 92       	push	r4
    2f2a:	5f 92       	push	r5
    2f2c:	6f 92       	push	r6
    2f2e:	7f 92       	push	r7
    2f30:	af 92       	push	r10
    2f32:	bf 92       	push	r11
    2f34:	cf 92       	push	r12
    2f36:	ef 92       	push	r14
    2f38:	ff 92       	push	r15
    2f3a:	0f 93       	push	r16
    2f3c:	1f 93       	push	r17
    2f3e:	cf 93       	push	r28
    2f40:	df 93       	push	r29
    2f42:	5c 01       	movw	r10, r24
    2f44:	f6 2e       	mov	r15, r22
    2f46:	d4 2f       	mov	r29, r20
    2f48:	28 01       	movw	r4, r16
    2f4a:	39 01       	movw	r6, r18
    2f4c:	ee 20       	and	r14, r14
    2f4e:	21 f1       	breq	.+72     	; 0x2f98 <_ZN7TwoWire11requestFromEhhmhh+0x70>
    2f50:	0e 94 75 17 	call	0x2eea	; 0x2eea <_ZN7TwoWire17beginTransmissionEh>
    2f54:	ce 2d       	mov	r28, r14
    2f56:	c4 30       	cpi	r28, 0x04	; 4
    2f58:	08 f0       	brcs	.+2      	; 0x2f5c <_ZN7TwoWire11requestFromEhhmhh+0x34>
    2f5a:	c3 e0       	ldi	r28, 0x03	; 3
    2f5c:	c1 50       	subi	r28, 0x01	; 1
    2f5e:	c0 f0       	brcs	.+48     	; 0x2f90 <_ZN7TwoWire11requestFromEhhmhh+0x68>
    2f60:	28 e0       	ldi	r18, 0x08	; 8
    2f62:	c2 9f       	mul	r28, r18
    2f64:	c0 01       	movw	r24, r0
    2f66:	11 24       	eor	r1, r1
    2f68:	a3 01       	movw	r20, r6
    2f6a:	92 01       	movw	r18, r4
    2f6c:	04 c0       	rjmp	.+8      	; 0x2f76 <_ZN7TwoWire11requestFromEhhmhh+0x4e>
    2f6e:	56 95       	lsr	r21
    2f70:	47 95       	ror	r20
    2f72:	37 95       	ror	r19
    2f74:	27 95       	ror	r18
    2f76:	8a 95       	dec	r24
    2f78:	d2 f7       	brpl	.-12     	; 0x2f6e <_ZN7TwoWire11requestFromEhhmhh+0x46>
    2f7a:	ca 01       	movw	r24, r20
    2f7c:	b9 01       	movw	r22, r18
    2f7e:	d5 01       	movw	r26, r10
    2f80:	ed 91       	ld	r30, X+
    2f82:	fc 91       	ld	r31, X
    2f84:	01 90       	ld	r0, Z+
    2f86:	f0 81       	ld	r31, Z
    2f88:	e0 2d       	mov	r30, r0
    2f8a:	c5 01       	movw	r24, r10
    2f8c:	09 95       	icall
    2f8e:	e6 cf       	rjmp	.-52     	; 0x2f5c <_ZN7TwoWire11requestFromEhhmhh+0x34>
    2f90:	60 e0       	ldi	r22, 0x00	; 0
    2f92:	c5 01       	movw	r24, r10
    2f94:	0e 94 81 17 	call	0x2f02	; 0x2f02 <_ZN7TwoWire15endTransmissionEh>
    2f98:	4d 2f       	mov	r20, r29
    2f9a:	d1 32       	cpi	r29, 0x21	; 33
    2f9c:	08 f0       	brcs	.+2      	; 0x2fa0 <_ZN7TwoWire11requestFromEhhmhh+0x78>
    2f9e:	40 e2       	ldi	r20, 0x20	; 32
    2fa0:	2c 2d       	mov	r18, r12
    2fa2:	62 e9       	ldi	r22, 0x92	; 146
    2fa4:	73 e0       	ldi	r23, 0x03	; 3
    2fa6:	8f 2d       	mov	r24, r15
    2fa8:	0e 94 14 19 	call	0x3228	; 0x3228 <twi_readFrom>
    2fac:	10 92 91 03 	sts	0x0391, r1	; 0x800391 <_ZN7TwoWire13rxBufferIndexE>
    2fb0:	80 93 90 03 	sts	0x0390, r24	; 0x800390 <_ZN7TwoWire14rxBufferLengthE>
    2fb4:	df 91       	pop	r29
    2fb6:	cf 91       	pop	r28
    2fb8:	1f 91       	pop	r17
    2fba:	0f 91       	pop	r16
    2fbc:	ff 90       	pop	r15
    2fbe:	ef 90       	pop	r14
    2fc0:	cf 90       	pop	r12
    2fc2:	bf 90       	pop	r11
    2fc4:	af 90       	pop	r10
    2fc6:	7f 90       	pop	r7
    2fc8:	6f 90       	pop	r6
    2fca:	5f 90       	pop	r5
    2fcc:	4f 90       	pop	r4
    2fce:	08 95       	ret

00002fd0 <_ZN7TwoWire11requestFromEhhh>:
    2fd0:	cf 92       	push	r12
    2fd2:	ef 92       	push	r14
    2fd4:	0f 93       	push	r16
    2fd6:	1f 93       	push	r17
    2fd8:	c2 2e       	mov	r12, r18
    2fda:	e1 2c       	mov	r14, r1
    2fdc:	00 e0       	ldi	r16, 0x00	; 0
    2fde:	10 e0       	ldi	r17, 0x00	; 0
    2fe0:	98 01       	movw	r18, r16
    2fe2:	0e 94 94 17 	call	0x2f28	; 0x2f28 <_ZN7TwoWire11requestFromEhhmhh>
    2fe6:	1f 91       	pop	r17
    2fe8:	0f 91       	pop	r16
    2fea:	ef 90       	pop	r14
    2fec:	cf 90       	pop	r12
    2fee:	08 95       	ret

00002ff0 <_ZN7TwoWire11requestFromEhh>:
    2ff0:	21 e0       	ldi	r18, 0x01	; 1
    2ff2:	0c 94 e8 17 	jmp	0x2fd0	; 0x2fd0 <_ZN7TwoWire11requestFromEhhh>

00002ff6 <_ZN7TwoWire11requestFromEii>:
    2ff6:	21 e0       	ldi	r18, 0x01	; 1
    2ff8:	0c 94 e8 17 	jmp	0x2fd0	; 0x2fd0 <_ZN7TwoWire11requestFromEhhh>

00002ffc <_ZN7TwoWire15endTransmissionEv>:
    2ffc:	61 e0       	ldi	r22, 0x01	; 1
    2ffe:	0c 94 81 17 	jmp	0x2f02	; 0x2f02 <_ZN7TwoWire15endTransmissionEh>

00003002 <_GLOBAL__sub_I__ZN7TwoWire8rxBufferE>:
}

// Preinstantiate Objects //////////////////////////////////////////////////////

TwoWire Wire = TwoWire();
    3002:	80 e6       	ldi	r24, 0x60	; 96
    3004:	93 e0       	ldi	r25, 0x03	; 3
    3006:	0c 94 5b 17 	jmp	0x2eb6	; 0x2eb6 <_ZN7TwoWireC1Ev>

0000300a <_ZN10I2C_eepromC1Ehj>:

int I2C_eeprom::writeBlock(const uint16_t memoryAddress, const uint8_t* buffer, const uint16_t length)
{
    int rv = _pageBlock(memoryAddress, buffer, length, true);
    return rv;
}
    300a:	fc 01       	movw	r30, r24
    300c:	60 83       	st	Z, r22
    300e:	41 30       	cpi	r20, 0x01	; 1
    3010:	81 e0       	ldi	r24, 0x01	; 1
    3012:	58 07       	cpc	r21, r24
    3014:	18 f4       	brcc	.+6      	; 0x301c <_ZN10I2C_eepromC1Ehj+0x12>
    3016:	16 82       	std	Z+6, r1	; 0x06
    3018:	88 e0       	ldi	r24, 0x08	; 8
    301a:	09 c0       	rjmp	.+18     	; 0x302e <_ZN10I2C_eepromC1Ehj+0x24>
    301c:	41 30       	cpi	r20, 0x01	; 1
    301e:	58 40       	sbci	r21, 0x08	; 8
    3020:	18 f4       	brcc	.+6      	; 0x3028 <_ZN10I2C_eepromC1Ehj+0x1e>
    3022:	16 82       	std	Z+6, r1	; 0x06
    3024:	80 e1       	ldi	r24, 0x10	; 16
    3026:	03 c0       	rjmp	.+6      	; 0x302e <_ZN10I2C_eepromC1Ehj+0x24>
    3028:	81 e0       	ldi	r24, 0x01	; 1
    302a:	86 83       	std	Z+6, r24	; 0x06
    302c:	80 e2       	ldi	r24, 0x20	; 32
    302e:	85 83       	std	Z+5, r24	; 0x05
    3030:	08 95       	ret

00003032 <_ZN10I2C_eeprom5beginEv>:
    3032:	cf 93       	push	r28
    3034:	df 93       	push	r29
    3036:	ec 01       	movw	r28, r24
    3038:	80 e6       	ldi	r24, 0x60	; 96
    303a:	93 e0       	ldi	r25, 0x03	; 3
    303c:	0e 94 6b 17 	call	0x2ed6	; 0x2ed6 <_ZN7TwoWire5beginEv>
    3040:	19 82       	std	Y+1, r1	; 0x01
    3042:	1a 82       	std	Y+2, r1	; 0x02
    3044:	1b 82       	std	Y+3, r1	; 0x03
    3046:	1c 82       	std	Y+4, r1	; 0x04
    3048:	88 e4       	ldi	r24, 0x48	; 72
    304a:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7e00b8>
    304e:	df 91       	pop	r29
    3050:	cf 91       	pop	r28
    3052:	08 95       	ret

00003054 <_ZN10I2C_eeprom11waitEEReadyEv>:
    3054:	0f 93       	push	r16
    3056:	1f 93       	push	r17
    3058:	cf 93       	push	r28
    305a:	df 93       	push	r29
    305c:	ec 01       	movw	r28, r24
    305e:	0e 94 59 10 	call	0x20b2	; 0x20b2 <micros>
    3062:	09 81       	ldd	r16, Y+1	; 0x01
    3064:	1a 81       	ldd	r17, Y+2	; 0x02
    3066:	2b 81       	ldd	r18, Y+3	; 0x03
    3068:	3c 81       	ldd	r19, Y+4	; 0x04
    306a:	dc 01       	movw	r26, r24
    306c:	cb 01       	movw	r24, r22
    306e:	80 1b       	sub	r24, r16
    3070:	91 0b       	sbc	r25, r17
    3072:	a2 0b       	sbc	r26, r18
    3074:	b3 0b       	sbc	r27, r19
    3076:	89 38       	cpi	r24, 0x89	; 137
    3078:	93 41       	sbci	r25, 0x13	; 19
    307a:	a1 05       	cpc	r26, r1
    307c:	b1 05       	cpc	r27, r1
    307e:	58 f4       	brcc	.+22     	; 0x3096 <_ZN10I2C_eeprom11waitEEReadyEv+0x42>
    3080:	68 81       	ld	r22, Y
    3082:	80 e6       	ldi	r24, 0x60	; 96
    3084:	93 e0       	ldi	r25, 0x03	; 3
    3086:	0e 94 75 17 	call	0x2eea	; 0x2eea <_ZN7TwoWire17beginTransmissionEh>
    308a:	80 e6       	ldi	r24, 0x60	; 96
    308c:	93 e0       	ldi	r25, 0x03	; 3
    308e:	0e 94 fe 17 	call	0x2ffc	; 0x2ffc <_ZN7TwoWire15endTransmissionEv>
    3092:	81 11       	cpse	r24, r1
    3094:	e4 cf       	rjmp	.-56     	; 0x305e <_ZN10I2C_eeprom11waitEEReadyEv+0xa>
    3096:	df 91       	pop	r29
    3098:	cf 91       	pop	r28
    309a:	1f 91       	pop	r17
    309c:	0f 91       	pop	r16
    309e:	08 95       	ret

000030a0 <_ZN10I2C_eeprom18_beginTransmissionEj>:
    30a0:	0f 93       	push	r16
    30a2:	1f 93       	push	r17
    30a4:	cf 93       	push	r28
    30a6:	df 93       	push	r29
    30a8:	ec 01       	movw	r28, r24
    30aa:	16 2f       	mov	r17, r22
    30ac:	07 2f       	mov	r16, r23
    30ae:	68 81       	ld	r22, Y
    30b0:	80 e6       	ldi	r24, 0x60	; 96
    30b2:	93 e0       	ldi	r25, 0x03	; 3
    30b4:	0e 94 75 17 	call	0x2eea	; 0x2eea <_ZN7TwoWire17beginTransmissionEh>
    30b8:	8e 81       	ldd	r24, Y+6	; 0x06
    30ba:	88 23       	and	r24, r24
    30bc:	29 f0       	breq	.+10     	; 0x30c8 <_ZN10I2C_eeprom18_beginTransmissionEj+0x28>
    30be:	60 2f       	mov	r22, r16
    30c0:	80 e6       	ldi	r24, 0x60	; 96
    30c2:	93 e0       	ldi	r25, 0x03	; 3
    30c4:	0e 94 2c 17 	call	0x2e58	; 0x2e58 <_ZN7TwoWire5writeEh>
    30c8:	61 2f       	mov	r22, r17
    30ca:	80 e6       	ldi	r24, 0x60	; 96
    30cc:	93 e0       	ldi	r25, 0x03	; 3
    30ce:	df 91       	pop	r29
    30d0:	cf 91       	pop	r28
    30d2:	1f 91       	pop	r17
    30d4:	0f 91       	pop	r16
    30d6:	0c 94 2c 17 	jmp	0x2e58	; 0x2e58 <_ZN7TwoWire5writeEh>

000030da <_ZN10I2C_eeprom11_WriteBlockEjPKhh>:
    30da:	cf 92       	push	r12
    30dc:	df 92       	push	r13
    30de:	ef 92       	push	r14
    30e0:	ff 92       	push	r15
    30e2:	1f 93       	push	r17
    30e4:	cf 93       	push	r28
    30e6:	df 93       	push	r29
    30e8:	ec 01       	movw	r28, r24
    30ea:	6b 01       	movw	r12, r22
    30ec:	7a 01       	movw	r14, r20
    30ee:	12 2f       	mov	r17, r18
    30f0:	0e 94 2a 18 	call	0x3054	; 0x3054 <_ZN10I2C_eeprom11waitEEReadyEv>
    30f4:	b6 01       	movw	r22, r12
    30f6:	ce 01       	movw	r24, r28
    30f8:	0e 94 50 18 	call	0x30a0	; 0x30a0 <_ZN10I2C_eeprom18_beginTransmissionEj>
    30fc:	41 2f       	mov	r20, r17
    30fe:	50 e0       	ldi	r21, 0x00	; 0
    3100:	b7 01       	movw	r22, r14
    3102:	80 e6       	ldi	r24, 0x60	; 96
    3104:	93 e0       	ldi	r25, 0x03	; 3
    3106:	0e 94 ff 16 	call	0x2dfe	; 0x2dfe <_ZN7TwoWire5writeEPKhj>
    310a:	80 e6       	ldi	r24, 0x60	; 96
    310c:	93 e0       	ldi	r25, 0x03	; 3
    310e:	0e 94 fe 17 	call	0x2ffc	; 0x2ffc <_ZN7TwoWire15endTransmissionEv>
    3112:	18 2f       	mov	r17, r24
    3114:	0e 94 59 10 	call	0x20b2	; 0x20b2 <micros>
    3118:	69 83       	std	Y+1, r22	; 0x01
    311a:	7a 83       	std	Y+2, r23	; 0x02
    311c:	8b 83       	std	Y+3, r24	; 0x03
    311e:	9c 83       	std	Y+4, r25	; 0x04
    3120:	81 2f       	mov	r24, r17
    3122:	90 e0       	ldi	r25, 0x00	; 0
    3124:	df 91       	pop	r29
    3126:	cf 91       	pop	r28
    3128:	1f 91       	pop	r17
    312a:	ff 90       	pop	r15
    312c:	ef 90       	pop	r14
    312e:	df 90       	pop	r13
    3130:	cf 90       	pop	r12
    3132:	08 95       	ret

00003134 <_ZN10I2C_eeprom9writeByteEjh>:
    3134:	cf 93       	push	r28
    3136:	df 93       	push	r29
    3138:	1f 92       	push	r1
    313a:	cd b7       	in	r28, 0x3d	; 61
    313c:	de b7       	in	r29, 0x3e	; 62
    313e:	49 83       	std	Y+1, r20	; 0x01
    3140:	21 e0       	ldi	r18, 0x01	; 1
    3142:	ae 01       	movw	r20, r28
    3144:	4f 5f       	subi	r20, 0xFF	; 255
    3146:	5f 4f       	sbci	r21, 0xFF	; 255
    3148:	0e 94 6d 18 	call	0x30da	; 0x30da <_ZN10I2C_eeprom11_WriteBlockEjPKhh>
    314c:	0f 90       	pop	r0
    314e:	df 91       	pop	r29
    3150:	cf 91       	pop	r28
    3152:	08 95       	ret

00003154 <_ZN10I2C_eeprom10_ReadBlockEjPhh>:
}

// pre: buffer is large enough to hold length bytes
// returns bytes read
uint8_t I2C_eeprom::_ReadBlock(const uint16_t memoryAddress, uint8_t* buffer, const uint8_t length)
{
    3154:	cf 92       	push	r12
    3156:	df 92       	push	r13
    3158:	ef 92       	push	r14
    315a:	ff 92       	push	r15
    315c:	0f 93       	push	r16
    315e:	1f 93       	push	r17
    3160:	cf 93       	push	r28
    3162:	df 93       	push	r29
    3164:	ec 01       	movw	r28, r24
    3166:	6b 01       	movw	r12, r22
    3168:	f4 2e       	mov	r15, r20
    316a:	e5 2e       	mov	r14, r21
    316c:	12 2f       	mov	r17, r18
    waitEEReady();
    316e:	0e 94 2a 18 	call	0x3054	; 0x3054 <_ZN10I2C_eeprom11waitEEReadyEv>

    this->_beginTransmission(memoryAddress);
    3172:	b6 01       	movw	r22, r12
    3174:	ce 01       	movw	r24, r28
    3176:	0e 94 50 18 	call	0x30a0	; 0x30a0 <_ZN10I2C_eeprom18_beginTransmissionEj>

    int rv = Wire.endTransmission();
    317a:	80 e6       	ldi	r24, 0x60	; 96
    317c:	93 e0       	ldi	r25, 0x03	; 3
    317e:	0e 94 fe 17 	call	0x2ffc	; 0x2ffc <_ZN7TwoWire15endTransmissionEv>
    if (rv != 0) return 0;  // error
    3182:	81 11       	cpse	r24, r1
    3184:	16 c0       	rjmp	.+44     	; 0x31b2 <_ZN10I2C_eeprom10_ReadBlockEjPhh+0x5e>

    // readbytes will always be equal or smaller to length
    uint8_t readBytes = Wire.requestFrom(_deviceAddress, length);
    3186:	41 2f       	mov	r20, r17
    3188:	68 81       	ld	r22, Y
    318a:	80 e6       	ldi	r24, 0x60	; 96
    318c:	93 e0       	ldi	r25, 0x03	; 3
    318e:	0e 94 f8 17 	call	0x2ff0	; 0x2ff0 <_ZN7TwoWire11requestFromEhh>
    3192:	c8 2f       	mov	r28, r24
    3194:	df 2d       	mov	r29, r15
    3196:	0f 2d       	mov	r16, r15
    3198:	1e 2d       	mov	r17, r14
    uint8_t cnt = 0;
    while (cnt < readBytes)
    319a:	80 2f       	mov	r24, r16
    319c:	8d 1b       	sub	r24, r29
    319e:	8c 17       	cp	r24, r28
    31a0:	50 f4       	brcc	.+20     	; 0x31b6 <_ZN10I2C_eeprom10_ReadBlockEjPhh+0x62>
    {
        buffer[cnt++] = WIRE_READ();
    31a2:	80 e6       	ldi	r24, 0x60	; 96
    31a4:	93 e0       	ldi	r25, 0x03	; 3
    31a6:	0e 94 db 16 	call	0x2db6	; 0x2db6 <_ZN7TwoWire4readEv>
    31aa:	f8 01       	movw	r30, r16
    31ac:	81 93       	st	Z+, r24
    31ae:	8f 01       	movw	r16, r30
    31b0:	f4 cf       	rjmp	.-24     	; 0x319a <_ZN10I2C_eeprom10_ReadBlockEjPhh+0x46>
    waitEEReady();

    this->_beginTransmission(memoryAddress);

    int rv = Wire.endTransmission();
    if (rv != 0) return 0;  // error
    31b2:	80 e0       	ldi	r24, 0x00	; 0
    31b4:	01 c0       	rjmp	.+2      	; 0x31b8 <_ZN10I2C_eeprom10_ReadBlockEjPhh+0x64>

    // readbytes will always be equal or smaller to length
    uint8_t readBytes = Wire.requestFrom(_deviceAddress, length);
    uint8_t cnt = 0;
    while (cnt < readBytes)
    31b6:	8c 2f       	mov	r24, r28
    {
        buffer[cnt++] = WIRE_READ();
    }
    return readBytes;
}
    31b8:	df 91       	pop	r29
    31ba:	cf 91       	pop	r28
    31bc:	1f 91       	pop	r17
    31be:	0f 91       	pop	r16
    31c0:	ff 90       	pop	r15
    31c2:	ef 90       	pop	r14
    31c4:	df 90       	pop	r13
    31c6:	cf 90       	pop	r12
    31c8:	08 95       	ret

000031ca <_ZN10I2C_eeprom8readByteEj>:
    int rv = _pageBlock(memoryAddress, buffer, length, true);
    return rv;
}

uint8_t I2C_eeprom::readByte(const uint16_t memoryAddress)
{
    31ca:	cf 93       	push	r28
    31cc:	df 93       	push	r29
    31ce:	1f 92       	push	r1
    31d0:	cd b7       	in	r28, 0x3d	; 61
    31d2:	de b7       	in	r29, 0x3e	; 62
    uint8_t rdata;
    _ReadBlock(memoryAddress, &rdata, 1);
    31d4:	21 e0       	ldi	r18, 0x01	; 1
    31d6:	ae 01       	movw	r20, r28
    31d8:	4f 5f       	subi	r20, 0xFF	; 255
    31da:	5f 4f       	sbci	r21, 0xFF	; 255
    31dc:	0e 94 aa 18 	call	0x3154	; 0x3154 <_ZN10I2C_eeprom10_ReadBlockEjPhh>
    return rdata;
}
    31e0:	89 81       	ldd	r24, Y+1	; 0x01
    31e2:	0f 90       	pop	r0
    31e4:	df 91       	pop	r29
    31e6:	cf 91       	pop	r28
    31e8:	08 95       	ret

000031ea <yield>:
    31ea:	08 95       	ret

000031ec <twi_init>:
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
  }else{
	  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    31ec:	10 92 1f 04 	sts	0x041F, r1	; 0x80041f <twi_state>
    31f0:	81 e0       	ldi	r24, 0x01	; 1
    31f2:	80 93 1d 04 	sts	0x041D, r24	; 0x80041d <twi_sendStop>
    31f6:	10 92 1c 04 	sts	0x041C, r1	; 0x80041c <twi_inRepStart>
    31fa:	61 e0       	ldi	r22, 0x01	; 1
    31fc:	82 e1       	ldi	r24, 0x12	; 18
    31fe:	0e 94 5a 11 	call	0x22b4	; 0x22b4 <digitalWrite>
    3202:	61 e0       	ldi	r22, 0x01	; 1
    3204:	83 e1       	ldi	r24, 0x13	; 19
    3206:	0e 94 5a 11 	call	0x22b4	; 0x22b4 <digitalWrite>
    320a:	e9 eb       	ldi	r30, 0xB9	; 185
    320c:	f0 e0       	ldi	r31, 0x00	; 0
    320e:	80 81       	ld	r24, Z
    3210:	8e 7f       	andi	r24, 0xFE	; 254
    3212:	80 83       	st	Z, r24
    3214:	80 81       	ld	r24, Z
    3216:	8d 7f       	andi	r24, 0xFD	; 253
    3218:	80 83       	st	Z, r24
    321a:	80 e2       	ldi	r24, 0x20	; 32
    321c:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7e00b8>
    3220:	85 e4       	ldi	r24, 0x45	; 69
    3222:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    3226:	08 95       	ret

00003228 <twi_readFrom>:
    3228:	41 32       	cpi	r20, 0x21	; 33
    322a:	08 f0       	brcs	.+2      	; 0x322e <twi_readFrom+0x6>
    322c:	43 c0       	rjmp	.+134    	; 0x32b4 <twi_readFrom+0x8c>
    322e:	90 91 1f 04 	lds	r25, 0x041F	; 0x80041f <twi_state>
    3232:	91 11       	cpse	r25, r1
    3234:	fc cf       	rjmp	.-8      	; 0x322e <twi_readFrom+0x6>
    3236:	91 e0       	ldi	r25, 0x01	; 1
    3238:	90 93 1f 04 	sts	0x041F, r25	; 0x80041f <twi_state>
    323c:	20 93 1d 04 	sts	0x041D, r18	; 0x80041d <twi_sendStop>
    3240:	2f ef       	ldi	r18, 0xFF	; 255
    3242:	20 93 b2 03 	sts	0x03B2, r18	; 0x8003b2 <twi_error>
    3246:	10 92 f7 03 	sts	0x03F7, r1	; 0x8003f7 <twi_masterBufferIndex>
    324a:	24 0f       	add	r18, r20
    324c:	20 93 f6 03 	sts	0x03F6, r18	; 0x8003f6 <twi_masterBufferLength>
    3250:	90 93 1e 04 	sts	0x041E, r25	; 0x80041e <twi_slarw>
    3254:	90 91 1e 04 	lds	r25, 0x041E	; 0x80041e <twi_slarw>
    3258:	88 0f       	add	r24, r24
    325a:	89 2b       	or	r24, r25
    325c:	80 93 1e 04 	sts	0x041E, r24	; 0x80041e <twi_slarw>
    3260:	80 91 1c 04 	lds	r24, 0x041C	; 0x80041c <twi_inRepStart>
    3264:	81 30       	cpi	r24, 0x01	; 1
    3266:	61 f4       	brne	.+24     	; 0x3280 <twi_readFrom+0x58>
    3268:	10 92 1c 04 	sts	0x041C, r1	; 0x80041c <twi_inRepStart>
    326c:	80 91 1e 04 	lds	r24, 0x041E	; 0x80041e <twi_slarw>
    3270:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    3274:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    3278:	83 fd       	sbrc	r24, 3
    327a:	f8 cf       	rjmp	.-16     	; 0x326c <twi_readFrom+0x44>
    327c:	85 ec       	ldi	r24, 0xC5	; 197
    327e:	01 c0       	rjmp	.+2      	; 0x3282 <twi_readFrom+0x5a>
    3280:	85 ee       	ldi	r24, 0xE5	; 229
    3282:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    3286:	80 91 1f 04 	lds	r24, 0x041F	; 0x80041f <twi_state>
    328a:	81 30       	cpi	r24, 0x01	; 1
    328c:	e1 f3       	breq	.-8      	; 0x3286 <twi_readFrom+0x5e>
    328e:	80 91 f7 03 	lds	r24, 0x03F7	; 0x8003f7 <twi_masterBufferIndex>
    3292:	84 17       	cp	r24, r20
    3294:	10 f4       	brcc	.+4      	; 0x329a <twi_readFrom+0x72>
    3296:	40 91 f7 03 	lds	r20, 0x03F7	; 0x8003f7 <twi_masterBufferIndex>
    329a:	a8 ef       	ldi	r26, 0xF8	; 248
    329c:	b3 e0       	ldi	r27, 0x03	; 3
    329e:	96 2f       	mov	r25, r22
    32a0:	fb 01       	movw	r30, r22
    32a2:	8e 2f       	mov	r24, r30
    32a4:	89 1b       	sub	r24, r25
    32a6:	84 17       	cp	r24, r20
    32a8:	18 f4       	brcc	.+6      	; 0x32b0 <twi_readFrom+0x88>
    32aa:	8d 91       	ld	r24, X+
    32ac:	81 93       	st	Z+, r24
    32ae:	f9 cf       	rjmp	.-14     	; 0x32a2 <twi_readFrom+0x7a>
    32b0:	84 2f       	mov	r24, r20
    32b2:	08 95       	ret
    32b4:	80 e0       	ldi	r24, 0x00	; 0
    32b6:	08 95       	ret

000032b8 <twi_writeTo>:
    32b8:	0f 93       	push	r16
    32ba:	41 32       	cpi	r20, 0x21	; 33
    32bc:	08 f0       	brcs	.+2      	; 0x32c0 <twi_writeTo+0x8>
    32be:	4a c0       	rjmp	.+148    	; 0x3354 <twi_writeTo+0x9c>
    32c0:	90 91 1f 04 	lds	r25, 0x041F	; 0x80041f <twi_state>
    32c4:	91 11       	cpse	r25, r1
    32c6:	fc cf       	rjmp	.-8      	; 0x32c0 <twi_writeTo+0x8>
    32c8:	32 e0       	ldi	r19, 0x02	; 2
    32ca:	30 93 1f 04 	sts	0x041F, r19	; 0x80041f <twi_state>
    32ce:	00 93 1d 04 	sts	0x041D, r16	; 0x80041d <twi_sendStop>
    32d2:	3f ef       	ldi	r19, 0xFF	; 255
    32d4:	30 93 b2 03 	sts	0x03B2, r19	; 0x8003b2 <twi_error>
    32d8:	10 92 f7 03 	sts	0x03F7, r1	; 0x8003f7 <twi_masterBufferIndex>
    32dc:	40 93 f6 03 	sts	0x03F6, r20	; 0x8003f6 <twi_masterBufferLength>
    32e0:	56 2f       	mov	r21, r22
    32e2:	a8 ef       	ldi	r26, 0xF8	; 248
    32e4:	b3 e0       	ldi	r27, 0x03	; 3
    32e6:	fb 01       	movw	r30, r22
    32e8:	3e 2f       	mov	r19, r30
    32ea:	35 1b       	sub	r19, r21
    32ec:	34 17       	cp	r19, r20
    32ee:	18 f4       	brcc	.+6      	; 0x32f6 <twi_writeTo+0x3e>
    32f0:	31 91       	ld	r19, Z+
    32f2:	3d 93       	st	X+, r19
    32f4:	f9 cf       	rjmp	.-14     	; 0x32e8 <twi_writeTo+0x30>
    32f6:	10 92 1e 04 	sts	0x041E, r1	; 0x80041e <twi_slarw>
    32fa:	30 91 1e 04 	lds	r19, 0x041E	; 0x80041e <twi_slarw>
    32fe:	88 0f       	add	r24, r24
    3300:	83 2b       	or	r24, r19
    3302:	80 93 1e 04 	sts	0x041E, r24	; 0x80041e <twi_slarw>
    3306:	80 91 1c 04 	lds	r24, 0x041C	; 0x80041c <twi_inRepStart>
    330a:	81 30       	cpi	r24, 0x01	; 1
    330c:	61 f4       	brne	.+24     	; 0x3326 <twi_writeTo+0x6e>
    330e:	10 92 1c 04 	sts	0x041C, r1	; 0x80041c <twi_inRepStart>
    3312:	80 91 1e 04 	lds	r24, 0x041E	; 0x80041e <twi_slarw>
    3316:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    331a:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    331e:	83 fd       	sbrc	r24, 3
    3320:	f8 cf       	rjmp	.-16     	; 0x3312 <twi_writeTo+0x5a>
    3322:	85 ec       	ldi	r24, 0xC5	; 197
    3324:	01 c0       	rjmp	.+2      	; 0x3328 <twi_writeTo+0x70>
    3326:	85 ee       	ldi	r24, 0xE5	; 229
    3328:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    332c:	22 23       	and	r18, r18
    332e:	21 f0       	breq	.+8      	; 0x3338 <twi_writeTo+0x80>
    3330:	80 91 1f 04 	lds	r24, 0x041F	; 0x80041f <twi_state>
    3334:	82 30       	cpi	r24, 0x02	; 2
    3336:	d1 f3       	breq	.-12     	; 0x332c <twi_writeTo+0x74>
    3338:	80 91 b2 03 	lds	r24, 0x03B2	; 0x8003b2 <twi_error>
    333c:	8f 3f       	cpi	r24, 0xFF	; 255
    333e:	79 f0       	breq	.+30     	; 0x335e <twi_writeTo+0xa6>
    3340:	80 91 b2 03 	lds	r24, 0x03B2	; 0x8003b2 <twi_error>
    3344:	80 32       	cpi	r24, 0x20	; 32
    3346:	41 f0       	breq	.+16     	; 0x3358 <twi_writeTo+0xa0>
    3348:	80 91 b2 03 	lds	r24, 0x03B2	; 0x8003b2 <twi_error>
    334c:	80 33       	cpi	r24, 0x30	; 48
    334e:	31 f0       	breq	.+12     	; 0x335c <twi_writeTo+0xa4>
    3350:	94 e0       	ldi	r25, 0x04	; 4
    3352:	05 c0       	rjmp	.+10     	; 0x335e <twi_writeTo+0xa6>
    3354:	91 e0       	ldi	r25, 0x01	; 1
    3356:	03 c0       	rjmp	.+6      	; 0x335e <twi_writeTo+0xa6>
    3358:	92 e0       	ldi	r25, 0x02	; 2
    335a:	01 c0       	rjmp	.+2      	; 0x335e <twi_writeTo+0xa6>
    335c:	93 e0       	ldi	r25, 0x03	; 3
    335e:	89 2f       	mov	r24, r25
    3360:	0f 91       	pop	r16
    3362:	08 95       	ret

00003364 <twi_transmit>:
    3364:	61 32       	cpi	r22, 0x21	; 33
    3366:	98 f4       	brcc	.+38     	; 0x338e <twi_transmit+0x2a>
    3368:	20 91 1f 04 	lds	r18, 0x041F	; 0x80041f <twi_state>
    336c:	24 30       	cpi	r18, 0x04	; 4
    336e:	89 f4       	brne	.+34     	; 0x3392 <twi_transmit+0x2e>
    3370:	60 93 d4 03 	sts	0x03D4, r22	; 0x8003d4 <twi_txBufferLength>
    3374:	28 2f       	mov	r18, r24
    3376:	a6 ed       	ldi	r26, 0xD6	; 214
    3378:	b3 e0       	ldi	r27, 0x03	; 3
    337a:	fc 01       	movw	r30, r24
    337c:	8e 2f       	mov	r24, r30
    337e:	82 1b       	sub	r24, r18
    3380:	86 17       	cp	r24, r22
    3382:	18 f4       	brcc	.+6      	; 0x338a <twi_transmit+0x26>
    3384:	81 91       	ld	r24, Z+
    3386:	8d 93       	st	X+, r24
    3388:	f9 cf       	rjmp	.-14     	; 0x337c <twi_transmit+0x18>
    338a:	80 e0       	ldi	r24, 0x00	; 0
    338c:	08 95       	ret
    338e:	81 e0       	ldi	r24, 0x01	; 1
    3390:	08 95       	ret
    3392:	82 e0       	ldi	r24, 0x02	; 2
    3394:	08 95       	ret

00003396 <twi_stop>:
 * Output   none
 */
void twi_stop(void)
{
  // send stop condition
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTO);
    3396:	85 ed       	ldi	r24, 0xD5	; 213
    3398:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>

  // wait for stop condition to be exectued on bus
  // TWINT is not set after a stop condition!
  while(TWCR & _BV(TWSTO)){
    339c:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    33a0:	84 fd       	sbrc	r24, 4
    33a2:	fc cf       	rjmp	.-8      	; 0x339c <twi_stop+0x6>
    continue;
  }

  // update twi state
  twi_state = TWI_READY;
    33a4:	10 92 1f 04 	sts	0x041F, r1	; 0x80041f <twi_state>
    33a8:	08 95       	ret

000033aa <twi_releaseBus>:
 * Output   none
 */
void twi_releaseBus(void)
{
  // release bus
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT);
    33aa:	85 ec       	ldi	r24, 0xC5	; 197
    33ac:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>

  // update twi state
  twi_state = TWI_READY;
    33b0:	10 92 1f 04 	sts	0x041F, r1	; 0x80041f <twi_state>
    33b4:	08 95       	ret

000033b6 <__vector_24>:
}

ISR(TWI_vect)
{
    33b6:	1f 92       	push	r1
    33b8:	0f 92       	push	r0
    33ba:	0f b6       	in	r0, 0x3f	; 63
    33bc:	0f 92       	push	r0
    33be:	11 24       	eor	r1, r1
    33c0:	2f 93       	push	r18
    33c2:	3f 93       	push	r19
    33c4:	4f 93       	push	r20
    33c6:	5f 93       	push	r21
    33c8:	6f 93       	push	r22
    33ca:	7f 93       	push	r23
    33cc:	8f 93       	push	r24
    33ce:	9f 93       	push	r25
    33d0:	af 93       	push	r26
    33d2:	bf 93       	push	r27
    33d4:	ef 93       	push	r30
    33d6:	ff 93       	push	r31
  switch(TW_STATUS){
    33d8:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
    33dc:	88 7f       	andi	r24, 0xF8	; 248
    33de:	80 36       	cpi	r24, 0x60	; 96
    33e0:	09 f4       	brne	.+2      	; 0x33e4 <__vector_24+0x2e>
    33e2:	9e c0       	rjmp	.+316    	; 0x3520 <__vector_24+0x16a>
    33e4:	78 f5       	brcc	.+94     	; 0x3444 <__vector_24+0x8e>
    33e6:	88 32       	cpi	r24, 0x28	; 40
    33e8:	09 f4       	brne	.+2      	; 0x33ec <__vector_24+0x36>
    33ea:	5d c0       	rjmp	.+186    	; 0x34a6 <__vector_24+0xf0>
    33ec:	90 f4       	brcc	.+36     	; 0x3412 <__vector_24+0x5c>
    33ee:	80 31       	cpi	r24, 0x10	; 16
    33f0:	09 f4       	brne	.+2      	; 0x33f4 <__vector_24+0x3e>
    33f2:	56 c0       	rjmp	.+172    	; 0x34a0 <__vector_24+0xea>
    33f4:	38 f4       	brcc	.+14     	; 0x3404 <__vector_24+0x4e>
    33f6:	88 23       	and	r24, r24
    33f8:	09 f4       	brne	.+2      	; 0x33fc <__vector_24+0x46>
    33fa:	f5 c0       	rjmp	.+490    	; 0x35e6 <__vector_24+0x230>
    33fc:	88 30       	cpi	r24, 0x08	; 8
    33fe:	09 f4       	brne	.+2      	; 0x3402 <__vector_24+0x4c>
    3400:	4f c0       	rjmp	.+158    	; 0x34a0 <__vector_24+0xea>
    3402:	f5 c0       	rjmp	.+490    	; 0x35ee <__vector_24+0x238>
    3404:	88 31       	cpi	r24, 0x18	; 24
    3406:	09 f4       	brne	.+2      	; 0x340a <__vector_24+0x54>
    3408:	4e c0       	rjmp	.+156    	; 0x34a6 <__vector_24+0xf0>
    340a:	80 32       	cpi	r24, 0x20	; 32
    340c:	09 f4       	brne	.+2      	; 0x3410 <__vector_24+0x5a>
    340e:	5f c0       	rjmp	.+190    	; 0x34ce <__vector_24+0x118>
    3410:	ee c0       	rjmp	.+476    	; 0x35ee <__vector_24+0x238>
    3412:	80 34       	cpi	r24, 0x40	; 64
    3414:	09 f4       	brne	.+2      	; 0x3418 <__vector_24+0x62>
    3416:	6a c0       	rjmp	.+212    	; 0x34ec <__vector_24+0x136>
    3418:	58 f4       	brcc	.+22     	; 0x3430 <__vector_24+0x7a>
    341a:	80 33       	cpi	r24, 0x30	; 48
    341c:	09 f4       	brne	.+2      	; 0x3420 <__vector_24+0x6a>
    341e:	57 c0       	rjmp	.+174    	; 0x34ce <__vector_24+0x118>
    3420:	88 33       	cpi	r24, 0x38	; 56
    3422:	09 f0       	breq	.+2      	; 0x3426 <__vector_24+0x70>
    3424:	e4 c0       	rjmp	.+456    	; 0x35ee <__vector_24+0x238>
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
      twi_stop();
      break;
    case TW_MT_ARB_LOST: // lost bus arbitration
      twi_error = TW_MT_ARB_LOST;
    3426:	80 93 b2 03 	sts	0x03B2, r24	; 0x8003b2 <twi_error>
      twi_releaseBus();
    342a:	0e 94 d5 19 	call	0x33aa	; 0x33aa <twi_releaseBus>
      break;
    342e:	df c0       	rjmp	.+446    	; 0x35ee <__vector_24+0x238>
  twi_state = TWI_READY;
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
    3430:	80 35       	cpi	r24, 0x50	; 80
    3432:	09 f4       	brne	.+2      	; 0x3436 <__vector_24+0x80>
    3434:	4f c0       	rjmp	.+158    	; 0x34d4 <__vector_24+0x11e>
    3436:	88 35       	cpi	r24, 0x58	; 88
    3438:	09 f4       	brne	.+2      	; 0x343c <__vector_24+0x86>
    343a:	5d c0       	rjmp	.+186    	; 0x34f6 <__vector_24+0x140>
    343c:	88 34       	cpi	r24, 0x48	; 72
    343e:	09 f0       	breq	.+2      	; 0x3442 <__vector_24+0x8c>
    3440:	d6 c0       	rjmp	.+428    	; 0x35ee <__vector_24+0x238>
    3442:	d3 c0       	rjmp	.+422    	; 0x35ea <__vector_24+0x234>
    3444:	88 39       	cpi	r24, 0x98	; 152
    3446:	09 f4       	brne	.+2      	; 0x344a <__vector_24+0x94>
    3448:	c4 c0       	rjmp	.+392    	; 0x35d2 <__vector_24+0x21c>
    344a:	a8 f4       	brcc	.+42     	; 0x3476 <__vector_24+0xc0>
    344c:	88 37       	cpi	r24, 0x78	; 120
    344e:	09 f4       	brne	.+2      	; 0x3452 <__vector_24+0x9c>
    3450:	67 c0       	rjmp	.+206    	; 0x3520 <__vector_24+0x16a>
    3452:	38 f4       	brcc	.+14     	; 0x3462 <__vector_24+0xac>
    3454:	88 36       	cpi	r24, 0x68	; 104
    3456:	09 f4       	brne	.+2      	; 0x345a <__vector_24+0xa4>
    3458:	63 c0       	rjmp	.+198    	; 0x3520 <__vector_24+0x16a>
    345a:	80 37       	cpi	r24, 0x70	; 112
    345c:	09 f4       	brne	.+2      	; 0x3460 <__vector_24+0xaa>
    345e:	60 c0       	rjmp	.+192    	; 0x3520 <__vector_24+0x16a>
    3460:	c6 c0       	rjmp	.+396    	; 0x35ee <__vector_24+0x238>
    3462:	88 38       	cpi	r24, 0x88	; 136
    3464:	09 f4       	brne	.+2      	; 0x3468 <__vector_24+0xb2>
    3466:	b5 c0       	rjmp	.+362    	; 0x35d2 <__vector_24+0x21c>
    3468:	80 39       	cpi	r24, 0x90	; 144
    346a:	09 f4       	brne	.+2      	; 0x346e <__vector_24+0xb8>
    346c:	5f c0       	rjmp	.+190    	; 0x352c <__vector_24+0x176>
    346e:	80 38       	cpi	r24, 0x80	; 128
    3470:	09 f0       	breq	.+2      	; 0x3474 <__vector_24+0xbe>
    3472:	bd c0       	rjmp	.+378    	; 0x35ee <__vector_24+0x238>
    3474:	5b c0       	rjmp	.+182    	; 0x352c <__vector_24+0x176>
    3476:	80 3b       	cpi	r24, 0xB0	; 176
    3478:	09 f4       	brne	.+2      	; 0x347c <__vector_24+0xc6>
    347a:	83 c0       	rjmp	.+262    	; 0x3582 <__vector_24+0x1cc>
    347c:	38 f4       	brcc	.+14     	; 0x348c <__vector_24+0xd6>
    347e:	80 3a       	cpi	r24, 0xA0	; 160
    3480:	09 f4       	brne	.+2      	; 0x3484 <__vector_24+0xce>
    3482:	66 c0       	rjmp	.+204    	; 0x3550 <__vector_24+0x19a>
    3484:	88 3a       	cpi	r24, 0xA8	; 168
    3486:	09 f4       	brne	.+2      	; 0x348a <__vector_24+0xd4>
    3488:	7c c0       	rjmp	.+248    	; 0x3582 <__vector_24+0x1cc>
    348a:	b1 c0       	rjmp	.+354    	; 0x35ee <__vector_24+0x238>
    348c:	80 3c       	cpi	r24, 0xC0	; 192
    348e:	09 f4       	brne	.+2      	; 0x3492 <__vector_24+0xdc>
    3490:	a4 c0       	rjmp	.+328    	; 0x35da <__vector_24+0x224>
    3492:	88 3c       	cpi	r24, 0xC8	; 200
    3494:	09 f4       	brne	.+2      	; 0x3498 <__vector_24+0xe2>
    3496:	a1 c0       	rjmp	.+322    	; 0x35da <__vector_24+0x224>
    3498:	88 3b       	cpi	r24, 0xB8	; 184
    349a:	09 f4       	brne	.+2      	; 0x349e <__vector_24+0xe8>
    349c:	87 c0       	rjmp	.+270    	; 0x35ac <__vector_24+0x1f6>
    349e:	a7 c0       	rjmp	.+334    	; 0x35ee <__vector_24+0x238>
    // All Master
    case TW_START:     // sent start condition
    case TW_REP_START: // sent repeated start condition
      // copy device address and r/w bit to output register and ack
      TWDR = twi_slarw;
    34a0:	80 91 1e 04 	lds	r24, 0x041E	; 0x80041e <twi_slarw>
    34a4:	10 c0       	rjmp	.+32     	; 0x34c6 <__vector_24+0x110>

    // Master Transmitter
    case TW_MT_SLA_ACK:  // slave receiver acked address
    case TW_MT_DATA_ACK: // slave receiver acked data
      // if there is data to send, send it, otherwise stop 
      if(twi_masterBufferIndex < twi_masterBufferLength){
    34a6:	90 91 f7 03 	lds	r25, 0x03F7	; 0x8003f7 <twi_masterBufferIndex>
    34aa:	80 91 f6 03 	lds	r24, 0x03F6	; 0x8003f6 <twi_masterBufferLength>
    34ae:	98 17       	cp	r25, r24
    34b0:	70 f5       	brcc	.+92     	; 0x350e <__vector_24+0x158>
        // copy data to output register and ack
        TWDR = twi_masterBuffer[twi_masterBufferIndex++];
    34b2:	e0 91 f7 03 	lds	r30, 0x03F7	; 0x8003f7 <twi_masterBufferIndex>
    34b6:	81 e0       	ldi	r24, 0x01	; 1
    34b8:	8e 0f       	add	r24, r30
    34ba:	80 93 f7 03 	sts	0x03F7, r24	; 0x8003f7 <twi_masterBufferIndex>
    34be:	f0 e0       	ldi	r31, 0x00	; 0
    34c0:	e8 50       	subi	r30, 0x08	; 8
    34c2:	fc 4f       	sbci	r31, 0xFC	; 252
    34c4:	80 81       	ld	r24, Z
    34c6:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    34ca:	85 ec       	ldi	r24, 0xC5	; 197
    34cc:	83 c0       	rjmp	.+262    	; 0x35d4 <__vector_24+0x21e>
    case TW_MT_SLA_NACK:  // address sent, nack received
      twi_error = TW_MT_SLA_NACK;
      twi_stop();
      break;
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
    34ce:	80 93 b2 03 	sts	0x03B2, r24	; 0x8003b2 <twi_error>
    34d2:	8b c0       	rjmp	.+278    	; 0x35ea <__vector_24+0x234>
      break;

    // Master Receiver
    case TW_MR_DATA_ACK: // data received, ack sent
      // put byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    34d4:	e0 91 f7 03 	lds	r30, 0x03F7	; 0x8003f7 <twi_masterBufferIndex>
    34d8:	81 e0       	ldi	r24, 0x01	; 1
    34da:	8e 0f       	add	r24, r30
    34dc:	80 93 f7 03 	sts	0x03F7, r24	; 0x8003f7 <twi_masterBufferIndex>
    34e0:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    34e4:	f0 e0       	ldi	r31, 0x00	; 0
    34e6:	e8 50       	subi	r30, 0x08	; 8
    34e8:	fc 4f       	sbci	r31, 0xFC	; 252
    34ea:	80 83       	st	Z, r24
    case TW_MR_SLA_ACK:  // address sent, ack received
      // ack if more bytes are expected, otherwise nack
      if(twi_masterBufferIndex < twi_masterBufferLength){
    34ec:	90 91 f7 03 	lds	r25, 0x03F7	; 0x8003f7 <twi_masterBufferIndex>
    34f0:	80 91 f6 03 	lds	r24, 0x03F6	; 0x8003f6 <twi_masterBufferLength>
    34f4:	6b c0       	rjmp	.+214    	; 0x35cc <__vector_24+0x216>
        twi_reply(0);
      }
      break;
    case TW_MR_DATA_NACK: // data received, nack sent
      // put final byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    34f6:	e0 91 f7 03 	lds	r30, 0x03F7	; 0x8003f7 <twi_masterBufferIndex>
    34fa:	81 e0       	ldi	r24, 0x01	; 1
    34fc:	8e 0f       	add	r24, r30
    34fe:	80 93 f7 03 	sts	0x03F7, r24	; 0x8003f7 <twi_masterBufferIndex>
    3502:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    3506:	f0 e0       	ldi	r31, 0x00	; 0
    3508:	e8 50       	subi	r30, 0x08	; 8
    350a:	fc 4f       	sbci	r31, 0xFC	; 252
    350c:	80 83       	st	Z, r24
	if (twi_sendStop)
    350e:	80 91 1d 04 	lds	r24, 0x041D	; 0x80041d <twi_sendStop>
    3512:	81 11       	cpse	r24, r1
    3514:	6a c0       	rjmp	.+212    	; 0x35ea <__vector_24+0x234>
          twi_stop();
	else {
	  twi_inRepStart = true;	// we're gonna send the START
    3516:	81 e0       	ldi	r24, 0x01	; 1
    3518:	80 93 1c 04 	sts	0x041C, r24	; 0x80041c <twi_inRepStart>
	  // don't enable the interrupt. We'll generate the start, but we 
	  // avoid handling the interrupt until we're in the next transaction,
	  // at the point where we would normally issue the start.
	  TWCR = _BV(TWINT) | _BV(TWSTA)| _BV(TWEN) ;
    351c:	84 ea       	ldi	r24, 0xA4	; 164
    351e:	5e c0       	rjmp	.+188    	; 0x35dc <__vector_24+0x226>
    case TW_SR_SLA_ACK:   // addressed, returned ack
    case TW_SR_GCALL_ACK: // addressed generally, returned ack
    case TW_SR_ARB_LOST_SLA_ACK:   // lost arbitration, returned ack
    case TW_SR_ARB_LOST_GCALL_ACK: // lost arbitration, returned ack
      // enter slave receiver mode
      twi_state = TWI_SRX;
    3520:	83 e0       	ldi	r24, 0x03	; 3
    3522:	80 93 1f 04 	sts	0x041F, r24	; 0x80041f <twi_state>
      // indicate that rx buffer can be overwritten and ack
      twi_rxBufferIndex = 0;
    3526:	10 92 b3 03 	sts	0x03B3, r1	; 0x8003b3 <twi_rxBufferIndex>
    352a:	cf cf       	rjmp	.-98     	; 0x34ca <__vector_24+0x114>
      twi_reply(1);
      break;
    case TW_SR_DATA_ACK:       // data received, returned ack
    case TW_SR_GCALL_DATA_ACK: // data received generally, returned ack
      // if there is still room in the rx buffer
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
    352c:	80 91 b3 03 	lds	r24, 0x03B3	; 0x8003b3 <twi_rxBufferIndex>
    3530:	80 32       	cpi	r24, 0x20	; 32
    3532:	08 f0       	brcs	.+2      	; 0x3536 <__vector_24+0x180>
    3534:	4e c0       	rjmp	.+156    	; 0x35d2 <__vector_24+0x21c>
        // put byte in buffer and ack
        twi_rxBuffer[twi_rxBufferIndex++] = TWDR;
    3536:	e0 91 b3 03 	lds	r30, 0x03B3	; 0x8003b3 <twi_rxBufferIndex>
    353a:	81 e0       	ldi	r24, 0x01	; 1
    353c:	8e 0f       	add	r24, r30
    353e:	80 93 b3 03 	sts	0x03B3, r24	; 0x8003b3 <twi_rxBufferIndex>
    3542:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    3546:	f0 e0       	ldi	r31, 0x00	; 0
    3548:	ec 54       	subi	r30, 0x4C	; 76
    354a:	fc 4f       	sbci	r31, 0xFC	; 252
    354c:	80 83       	st	Z, r24
    354e:	bd cf       	rjmp	.-134    	; 0x34ca <__vector_24+0x114>
        twi_reply(0);
      }
      break;
    case TW_SR_STOP: // stop or repeated start condition received
      // ack future responses and leave slave receiver state
      twi_releaseBus();
    3550:	0e 94 d5 19 	call	0x33aa	; 0x33aa <twi_releaseBus>
      // put a null char after data if there's room
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
    3554:	80 91 b3 03 	lds	r24, 0x03B3	; 0x8003b3 <twi_rxBufferIndex>
    3558:	80 32       	cpi	r24, 0x20	; 32
    355a:	30 f4       	brcc	.+12     	; 0x3568 <__vector_24+0x1b2>
        twi_rxBuffer[twi_rxBufferIndex] = '\0';
    355c:	e0 91 b3 03 	lds	r30, 0x03B3	; 0x8003b3 <twi_rxBufferIndex>
    3560:	f0 e0       	ldi	r31, 0x00	; 0
    3562:	ec 54       	subi	r30, 0x4C	; 76
    3564:	fc 4f       	sbci	r31, 0xFC	; 252
    3566:	10 82       	st	Z, r1
      }
      // callback to user defined callback
      twi_onSlaveReceive(twi_rxBuffer, twi_rxBufferIndex);
    3568:	60 91 b3 03 	lds	r22, 0x03B3	; 0x8003b3 <twi_rxBufferIndex>
    356c:	70 e0       	ldi	r23, 0x00	; 0
    356e:	e0 91 18 04 	lds	r30, 0x0418	; 0x800418 <twi_onSlaveReceive>
    3572:	f0 91 19 04 	lds	r31, 0x0419	; 0x800419 <twi_onSlaveReceive+0x1>
    3576:	84 eb       	ldi	r24, 0xB4	; 180
    3578:	93 e0       	ldi	r25, 0x03	; 3
    357a:	09 95       	icall
      // since we submit rx buffer to "wire" library, we can reset it
      twi_rxBufferIndex = 0;
    357c:	10 92 b3 03 	sts	0x03B3, r1	; 0x8003b3 <twi_rxBufferIndex>
      break;
    3580:	36 c0       	rjmp	.+108    	; 0x35ee <__vector_24+0x238>
    
    // Slave Transmitter
    case TW_ST_SLA_ACK:          // addressed, returned ack
    case TW_ST_ARB_LOST_SLA_ACK: // arbitration lost, returned ack
      // enter slave transmitter mode
      twi_state = TWI_STX;
    3582:	84 e0       	ldi	r24, 0x04	; 4
    3584:	80 93 1f 04 	sts	0x041F, r24	; 0x80041f <twi_state>
      // ready the tx buffer index for iteration
      twi_txBufferIndex = 0;
    3588:	10 92 d5 03 	sts	0x03D5, r1	; 0x8003d5 <twi_txBufferIndex>
      // set tx buffer length to be zero, to verify if user changes it
      twi_txBufferLength = 0;
    358c:	10 92 d4 03 	sts	0x03D4, r1	; 0x8003d4 <twi_txBufferLength>
      // request for txBuffer to be filled and length to be set
      // note: user must call twi_transmit(bytes, length) to do this
      twi_onSlaveTransmit();
    3590:	e0 91 1a 04 	lds	r30, 0x041A	; 0x80041a <twi_onSlaveTransmit>
    3594:	f0 91 1b 04 	lds	r31, 0x041B	; 0x80041b <twi_onSlaveTransmit+0x1>
    3598:	09 95       	icall
      // if they didn't change buffer & length, initialize it
      if(0 == twi_txBufferLength){
    359a:	80 91 d4 03 	lds	r24, 0x03D4	; 0x8003d4 <twi_txBufferLength>
    359e:	81 11       	cpse	r24, r1
    35a0:	05 c0       	rjmp	.+10     	; 0x35ac <__vector_24+0x1f6>
        twi_txBufferLength = 1;
    35a2:	81 e0       	ldi	r24, 0x01	; 1
    35a4:	80 93 d4 03 	sts	0x03D4, r24	; 0x8003d4 <twi_txBufferLength>
        twi_txBuffer[0] = 0x00;
    35a8:	10 92 d6 03 	sts	0x03D6, r1	; 0x8003d6 <twi_txBuffer>
      }
      // transmit first byte from buffer, fall
    case TW_ST_DATA_ACK: // byte sent, ack returned
      // copy data to output register
      TWDR = twi_txBuffer[twi_txBufferIndex++];
    35ac:	e0 91 d5 03 	lds	r30, 0x03D5	; 0x8003d5 <twi_txBufferIndex>
    35b0:	81 e0       	ldi	r24, 0x01	; 1
    35b2:	8e 0f       	add	r24, r30
    35b4:	80 93 d5 03 	sts	0x03D5, r24	; 0x8003d5 <twi_txBufferIndex>
    35b8:	f0 e0       	ldi	r31, 0x00	; 0
    35ba:	ea 52       	subi	r30, 0x2A	; 42
    35bc:	fc 4f       	sbci	r31, 0xFC	; 252
    35be:	80 81       	ld	r24, Z
    35c0:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
      // if there is more to send, ack, otherwise nack
      if(twi_txBufferIndex < twi_txBufferLength){
    35c4:	90 91 d5 03 	lds	r25, 0x03D5	; 0x8003d5 <twi_txBufferIndex>
    35c8:	80 91 d4 03 	lds	r24, 0x03D4	; 0x8003d4 <twi_txBufferLength>
    35cc:	98 17       	cp	r25, r24
    35ce:	08 f4       	brcc	.+2      	; 0x35d2 <__vector_24+0x21c>
    35d0:	7c cf       	rjmp	.-264    	; 0x34ca <__vector_24+0x114>
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
  }else{
	  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    35d2:	85 e8       	ldi	r24, 0x85	; 133
    35d4:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    35d8:	0a c0       	rjmp	.+20     	; 0x35ee <__vector_24+0x238>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    35da:	85 ec       	ldi	r24, 0xC5	; 197
    35dc:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    case TW_ST_DATA_NACK: // received nack, we are done 
    case TW_ST_LAST_DATA: // received ack, but we are done already!
      // ack future responses
      twi_reply(1);
      // leave slave receiver state
      twi_state = TWI_READY;
    35e0:	10 92 1f 04 	sts	0x041F, r1	; 0x80041f <twi_state>
      break;
    35e4:	04 c0       	rjmp	.+8      	; 0x35ee <__vector_24+0x238>

    // All
    case TW_NO_INFO:   // no state information
      break;
    case TW_BUS_ERROR: // bus error, illegal stop/start
      twi_error = TW_BUS_ERROR;
    35e6:	10 92 b2 03 	sts	0x03B2, r1	; 0x8003b2 <twi_error>
      twi_stop();
    35ea:	0e 94 cb 19 	call	0x3396	; 0x3396 <twi_stop>
      break;
  }
}
    35ee:	ff 91       	pop	r31
    35f0:	ef 91       	pop	r30
    35f2:	bf 91       	pop	r27
    35f4:	af 91       	pop	r26
    35f6:	9f 91       	pop	r25
    35f8:	8f 91       	pop	r24
    35fa:	7f 91       	pop	r23
    35fc:	6f 91       	pop	r22
    35fe:	5f 91       	pop	r21
    3600:	4f 91       	pop	r20
    3602:	3f 91       	pop	r19
    3604:	2f 91       	pop	r18
    3606:	0f 90       	pop	r0
    3608:	0f be       	out	0x3f, r0	; 63
    360a:	0f 90       	pop	r0
    360c:	1f 90       	pop	r1
    360e:	18 95       	reti

00003610 <__udivmodqi4>:
    3610:	99 1b       	sub	r25, r25
    3612:	79 e0       	ldi	r23, 0x09	; 9
    3614:	04 c0       	rjmp	.+8      	; 0x361e <__udivmodqi4_ep>

00003616 <__udivmodqi4_loop>:
    3616:	99 1f       	adc	r25, r25
    3618:	96 17       	cp	r25, r22
    361a:	08 f0       	brcs	.+2      	; 0x361e <__udivmodqi4_ep>
    361c:	96 1b       	sub	r25, r22

0000361e <__udivmodqi4_ep>:
    361e:	88 1f       	adc	r24, r24
    3620:	7a 95       	dec	r23
    3622:	c9 f7       	brne	.-14     	; 0x3616 <__udivmodqi4_loop>
    3624:	80 95       	com	r24
    3626:	08 95       	ret

00003628 <__udivmodhi4>:
    3628:	aa 1b       	sub	r26, r26
    362a:	bb 1b       	sub	r27, r27
    362c:	51 e1       	ldi	r21, 0x11	; 17
    362e:	07 c0       	rjmp	.+14     	; 0x363e <__udivmodhi4_ep>

00003630 <__udivmodhi4_loop>:
    3630:	aa 1f       	adc	r26, r26
    3632:	bb 1f       	adc	r27, r27
    3634:	a6 17       	cp	r26, r22
    3636:	b7 07       	cpc	r27, r23
    3638:	10 f0       	brcs	.+4      	; 0x363e <__udivmodhi4_ep>
    363a:	a6 1b       	sub	r26, r22
    363c:	b7 0b       	sbc	r27, r23

0000363e <__udivmodhi4_ep>:
    363e:	88 1f       	adc	r24, r24
    3640:	99 1f       	adc	r25, r25
    3642:	5a 95       	dec	r21
    3644:	a9 f7       	brne	.-22     	; 0x3630 <__udivmodhi4_loop>
    3646:	80 95       	com	r24
    3648:	90 95       	com	r25
    364a:	bc 01       	movw	r22, r24
    364c:	cd 01       	movw	r24, r26
    364e:	08 95       	ret

00003650 <__divmodhi4>:
    3650:	97 fb       	bst	r25, 7
    3652:	07 2e       	mov	r0, r23
    3654:	16 f4       	brtc	.+4      	; 0x365a <__divmodhi4+0xa>
    3656:	00 94       	com	r0
    3658:	07 d0       	rcall	.+14     	; 0x3668 <__divmodhi4_neg1>
    365a:	77 fd       	sbrc	r23, 7
    365c:	09 d0       	rcall	.+18     	; 0x3670 <__divmodhi4_neg2>
    365e:	0e 94 14 1b 	call	0x3628	; 0x3628 <__udivmodhi4>
    3662:	07 fc       	sbrc	r0, 7
    3664:	05 d0       	rcall	.+10     	; 0x3670 <__divmodhi4_neg2>
    3666:	3e f4       	brtc	.+14     	; 0x3676 <__divmodhi4_exit>

00003668 <__divmodhi4_neg1>:
    3668:	90 95       	com	r25
    366a:	81 95       	neg	r24
    366c:	9f 4f       	sbci	r25, 0xFF	; 255
    366e:	08 95       	ret

00003670 <__divmodhi4_neg2>:
    3670:	70 95       	com	r23
    3672:	61 95       	neg	r22
    3674:	7f 4f       	sbci	r23, 0xFF	; 255

00003676 <__divmodhi4_exit>:
    3676:	08 95       	ret

00003678 <__udivmodsi4>:
    3678:	a1 e2       	ldi	r26, 0x21	; 33
    367a:	1a 2e       	mov	r1, r26
    367c:	aa 1b       	sub	r26, r26
    367e:	bb 1b       	sub	r27, r27
    3680:	fd 01       	movw	r30, r26
    3682:	0d c0       	rjmp	.+26     	; 0x369e <__udivmodsi4_ep>

00003684 <__udivmodsi4_loop>:
    3684:	aa 1f       	adc	r26, r26
    3686:	bb 1f       	adc	r27, r27
    3688:	ee 1f       	adc	r30, r30
    368a:	ff 1f       	adc	r31, r31
    368c:	a2 17       	cp	r26, r18
    368e:	b3 07       	cpc	r27, r19
    3690:	e4 07       	cpc	r30, r20
    3692:	f5 07       	cpc	r31, r21
    3694:	20 f0       	brcs	.+8      	; 0x369e <__udivmodsi4_ep>
    3696:	a2 1b       	sub	r26, r18
    3698:	b3 0b       	sbc	r27, r19
    369a:	e4 0b       	sbc	r30, r20
    369c:	f5 0b       	sbc	r31, r21

0000369e <__udivmodsi4_ep>:
    369e:	66 1f       	adc	r22, r22
    36a0:	77 1f       	adc	r23, r23
    36a2:	88 1f       	adc	r24, r24
    36a4:	99 1f       	adc	r25, r25
    36a6:	1a 94       	dec	r1
    36a8:	69 f7       	brne	.-38     	; 0x3684 <__udivmodsi4_loop>
    36aa:	60 95       	com	r22
    36ac:	70 95       	com	r23
    36ae:	80 95       	com	r24
    36b0:	90 95       	com	r25
    36b2:	9b 01       	movw	r18, r22
    36b4:	ac 01       	movw	r20, r24
    36b6:	bd 01       	movw	r22, r26
    36b8:	cf 01       	movw	r24, r30
    36ba:	08 95       	ret

000036bc <__tablejump2__>:
    36bc:	ee 0f       	add	r30, r30
    36be:	ff 1f       	adc	r31, r31
    36c0:	05 90       	lpm	r0, Z+
    36c2:	f4 91       	lpm	r31, Z
    36c4:	e0 2d       	mov	r30, r0
    36c6:	09 94       	ijmp

000036c8 <__umulhisi3>:
    36c8:	a2 9f       	mul	r26, r18
    36ca:	b0 01       	movw	r22, r0
    36cc:	b3 9f       	mul	r27, r19
    36ce:	c0 01       	movw	r24, r0
    36d0:	a3 9f       	mul	r26, r19
    36d2:	70 0d       	add	r23, r0
    36d4:	81 1d       	adc	r24, r1
    36d6:	11 24       	eor	r1, r1
    36d8:	91 1d       	adc	r25, r1
    36da:	b2 9f       	mul	r27, r18
    36dc:	70 0d       	add	r23, r0
    36de:	81 1d       	adc	r24, r1
    36e0:	11 24       	eor	r1, r1
    36e2:	91 1d       	adc	r25, r1
    36e4:	08 95       	ret

000036e6 <__muluhisi3>:
    36e6:	0e 94 64 1b 	call	0x36c8	; 0x36c8 <__umulhisi3>
    36ea:	a5 9f       	mul	r26, r21
    36ec:	90 0d       	add	r25, r0
    36ee:	b4 9f       	mul	r27, r20
    36f0:	90 0d       	add	r25, r0
    36f2:	a4 9f       	mul	r26, r20
    36f4:	80 0d       	add	r24, r0
    36f6:	91 1d       	adc	r25, r1
    36f8:	11 24       	eor	r1, r1
    36fa:	08 95       	ret

000036fc <__mulshisi3>:
    36fc:	b7 ff       	sbrs	r27, 7
    36fe:	0c 94 73 1b 	jmp	0x36e6	; 0x36e6 <__muluhisi3>

00003702 <__mulohisi3>:
    3702:	0e 94 73 1b 	call	0x36e6	; 0x36e6 <__muluhisi3>
    3706:	82 1b       	sub	r24, r18
    3708:	93 0b       	sbc	r25, r19
    370a:	08 95       	ret

0000370c <malloc>:
    370c:	0f 93       	push	r16
    370e:	1f 93       	push	r17
    3710:	cf 93       	push	r28
    3712:	df 93       	push	r29
    3714:	82 30       	cpi	r24, 0x02	; 2
    3716:	91 05       	cpc	r25, r1
    3718:	10 f4       	brcc	.+4      	; 0x371e <malloc+0x12>
    371a:	82 e0       	ldi	r24, 0x02	; 2
    371c:	90 e0       	ldi	r25, 0x00	; 0
    371e:	e0 91 22 04 	lds	r30, 0x0422	; 0x800422 <__flp>
    3722:	f0 91 23 04 	lds	r31, 0x0423	; 0x800423 <__flp+0x1>
    3726:	20 e0       	ldi	r18, 0x00	; 0
    3728:	30 e0       	ldi	r19, 0x00	; 0
    372a:	a0 e0       	ldi	r26, 0x00	; 0
    372c:	b0 e0       	ldi	r27, 0x00	; 0
    372e:	30 97       	sbiw	r30, 0x00	; 0
    3730:	19 f1       	breq	.+70     	; 0x3778 <malloc+0x6c>
    3732:	40 81       	ld	r20, Z
    3734:	51 81       	ldd	r21, Z+1	; 0x01
    3736:	02 81       	ldd	r16, Z+2	; 0x02
    3738:	13 81       	ldd	r17, Z+3	; 0x03
    373a:	48 17       	cp	r20, r24
    373c:	59 07       	cpc	r21, r25
    373e:	c8 f0       	brcs	.+50     	; 0x3772 <malloc+0x66>
    3740:	84 17       	cp	r24, r20
    3742:	95 07       	cpc	r25, r21
    3744:	69 f4       	brne	.+26     	; 0x3760 <malloc+0x54>
    3746:	10 97       	sbiw	r26, 0x00	; 0
    3748:	31 f0       	breq	.+12     	; 0x3756 <malloc+0x4a>
    374a:	12 96       	adiw	r26, 0x02	; 2
    374c:	0c 93       	st	X, r16
    374e:	12 97       	sbiw	r26, 0x02	; 2
    3750:	13 96       	adiw	r26, 0x03	; 3
    3752:	1c 93       	st	X, r17
    3754:	27 c0       	rjmp	.+78     	; 0x37a4 <malloc+0x98>
    3756:	00 93 22 04 	sts	0x0422, r16	; 0x800422 <__flp>
    375a:	10 93 23 04 	sts	0x0423, r17	; 0x800423 <__flp+0x1>
    375e:	22 c0       	rjmp	.+68     	; 0x37a4 <malloc+0x98>
    3760:	21 15       	cp	r18, r1
    3762:	31 05       	cpc	r19, r1
    3764:	19 f0       	breq	.+6      	; 0x376c <malloc+0x60>
    3766:	42 17       	cp	r20, r18
    3768:	53 07       	cpc	r21, r19
    376a:	18 f4       	brcc	.+6      	; 0x3772 <malloc+0x66>
    376c:	9a 01       	movw	r18, r20
    376e:	bd 01       	movw	r22, r26
    3770:	ef 01       	movw	r28, r30
    3772:	df 01       	movw	r26, r30
    3774:	f8 01       	movw	r30, r16
    3776:	db cf       	rjmp	.-74     	; 0x372e <malloc+0x22>
    3778:	21 15       	cp	r18, r1
    377a:	31 05       	cpc	r19, r1
    377c:	f9 f0       	breq	.+62     	; 0x37bc <malloc+0xb0>
    377e:	28 1b       	sub	r18, r24
    3780:	39 0b       	sbc	r19, r25
    3782:	24 30       	cpi	r18, 0x04	; 4
    3784:	31 05       	cpc	r19, r1
    3786:	80 f4       	brcc	.+32     	; 0x37a8 <malloc+0x9c>
    3788:	8a 81       	ldd	r24, Y+2	; 0x02
    378a:	9b 81       	ldd	r25, Y+3	; 0x03
    378c:	61 15       	cp	r22, r1
    378e:	71 05       	cpc	r23, r1
    3790:	21 f0       	breq	.+8      	; 0x379a <malloc+0x8e>
    3792:	fb 01       	movw	r30, r22
    3794:	93 83       	std	Z+3, r25	; 0x03
    3796:	82 83       	std	Z+2, r24	; 0x02
    3798:	04 c0       	rjmp	.+8      	; 0x37a2 <malloc+0x96>
    379a:	90 93 23 04 	sts	0x0423, r25	; 0x800423 <__flp+0x1>
    379e:	80 93 22 04 	sts	0x0422, r24	; 0x800422 <__flp>
    37a2:	fe 01       	movw	r30, r28
    37a4:	32 96       	adiw	r30, 0x02	; 2
    37a6:	44 c0       	rjmp	.+136    	; 0x3830 <malloc+0x124>
    37a8:	fe 01       	movw	r30, r28
    37aa:	e2 0f       	add	r30, r18
    37ac:	f3 1f       	adc	r31, r19
    37ae:	81 93       	st	Z+, r24
    37b0:	91 93       	st	Z+, r25
    37b2:	22 50       	subi	r18, 0x02	; 2
    37b4:	31 09       	sbc	r19, r1
    37b6:	39 83       	std	Y+1, r19	; 0x01
    37b8:	28 83       	st	Y, r18
    37ba:	3a c0       	rjmp	.+116    	; 0x3830 <malloc+0x124>
    37bc:	20 91 20 04 	lds	r18, 0x0420	; 0x800420 <__brkval>
    37c0:	30 91 21 04 	lds	r19, 0x0421	; 0x800421 <__brkval+0x1>
    37c4:	23 2b       	or	r18, r19
    37c6:	41 f4       	brne	.+16     	; 0x37d8 <malloc+0xcc>
    37c8:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
    37cc:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
    37d0:	30 93 21 04 	sts	0x0421, r19	; 0x800421 <__brkval+0x1>
    37d4:	20 93 20 04 	sts	0x0420, r18	; 0x800420 <__brkval>
    37d8:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
    37dc:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
    37e0:	21 15       	cp	r18, r1
    37e2:	31 05       	cpc	r19, r1
    37e4:	41 f4       	brne	.+16     	; 0x37f6 <malloc+0xea>
    37e6:	2d b7       	in	r18, 0x3d	; 61
    37e8:	3e b7       	in	r19, 0x3e	; 62
    37ea:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
    37ee:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
    37f2:	24 1b       	sub	r18, r20
    37f4:	35 0b       	sbc	r19, r21
    37f6:	e0 91 20 04 	lds	r30, 0x0420	; 0x800420 <__brkval>
    37fa:	f0 91 21 04 	lds	r31, 0x0421	; 0x800421 <__brkval+0x1>
    37fe:	e2 17       	cp	r30, r18
    3800:	f3 07       	cpc	r31, r19
    3802:	a0 f4       	brcc	.+40     	; 0x382c <malloc+0x120>
    3804:	2e 1b       	sub	r18, r30
    3806:	3f 0b       	sbc	r19, r31
    3808:	28 17       	cp	r18, r24
    380a:	39 07       	cpc	r19, r25
    380c:	78 f0       	brcs	.+30     	; 0x382c <malloc+0x120>
    380e:	ac 01       	movw	r20, r24
    3810:	4e 5f       	subi	r20, 0xFE	; 254
    3812:	5f 4f       	sbci	r21, 0xFF	; 255
    3814:	24 17       	cp	r18, r20
    3816:	35 07       	cpc	r19, r21
    3818:	48 f0       	brcs	.+18     	; 0x382c <malloc+0x120>
    381a:	4e 0f       	add	r20, r30
    381c:	5f 1f       	adc	r21, r31
    381e:	50 93 21 04 	sts	0x0421, r21	; 0x800421 <__brkval+0x1>
    3822:	40 93 20 04 	sts	0x0420, r20	; 0x800420 <__brkval>
    3826:	81 93       	st	Z+, r24
    3828:	91 93       	st	Z+, r25
    382a:	02 c0       	rjmp	.+4      	; 0x3830 <malloc+0x124>
    382c:	e0 e0       	ldi	r30, 0x00	; 0
    382e:	f0 e0       	ldi	r31, 0x00	; 0
    3830:	cf 01       	movw	r24, r30
    3832:	df 91       	pop	r29
    3834:	cf 91       	pop	r28
    3836:	1f 91       	pop	r17
    3838:	0f 91       	pop	r16
    383a:	08 95       	ret

0000383c <free>:
    383c:	cf 93       	push	r28
    383e:	df 93       	push	r29
    3840:	00 97       	sbiw	r24, 0x00	; 0
    3842:	09 f4       	brne	.+2      	; 0x3846 <free+0xa>
    3844:	81 c0       	rjmp	.+258    	; 0x3948 <free+0x10c>
    3846:	fc 01       	movw	r30, r24
    3848:	32 97       	sbiw	r30, 0x02	; 2
    384a:	13 82       	std	Z+3, r1	; 0x03
    384c:	12 82       	std	Z+2, r1	; 0x02
    384e:	a0 91 22 04 	lds	r26, 0x0422	; 0x800422 <__flp>
    3852:	b0 91 23 04 	lds	r27, 0x0423	; 0x800423 <__flp+0x1>
    3856:	10 97       	sbiw	r26, 0x00	; 0
    3858:	81 f4       	brne	.+32     	; 0x387a <free+0x3e>
    385a:	20 81       	ld	r18, Z
    385c:	31 81       	ldd	r19, Z+1	; 0x01
    385e:	82 0f       	add	r24, r18
    3860:	93 1f       	adc	r25, r19
    3862:	20 91 20 04 	lds	r18, 0x0420	; 0x800420 <__brkval>
    3866:	30 91 21 04 	lds	r19, 0x0421	; 0x800421 <__brkval+0x1>
    386a:	28 17       	cp	r18, r24
    386c:	39 07       	cpc	r19, r25
    386e:	51 f5       	brne	.+84     	; 0x38c4 <free+0x88>
    3870:	f0 93 21 04 	sts	0x0421, r31	; 0x800421 <__brkval+0x1>
    3874:	e0 93 20 04 	sts	0x0420, r30	; 0x800420 <__brkval>
    3878:	67 c0       	rjmp	.+206    	; 0x3948 <free+0x10c>
    387a:	ed 01       	movw	r28, r26
    387c:	20 e0       	ldi	r18, 0x00	; 0
    387e:	30 e0       	ldi	r19, 0x00	; 0
    3880:	ce 17       	cp	r28, r30
    3882:	df 07       	cpc	r29, r31
    3884:	40 f4       	brcc	.+16     	; 0x3896 <free+0x5a>
    3886:	4a 81       	ldd	r20, Y+2	; 0x02
    3888:	5b 81       	ldd	r21, Y+3	; 0x03
    388a:	9e 01       	movw	r18, r28
    388c:	41 15       	cp	r20, r1
    388e:	51 05       	cpc	r21, r1
    3890:	f1 f0       	breq	.+60     	; 0x38ce <free+0x92>
    3892:	ea 01       	movw	r28, r20
    3894:	f5 cf       	rjmp	.-22     	; 0x3880 <free+0x44>
    3896:	d3 83       	std	Z+3, r29	; 0x03
    3898:	c2 83       	std	Z+2, r28	; 0x02
    389a:	40 81       	ld	r20, Z
    389c:	51 81       	ldd	r21, Z+1	; 0x01
    389e:	84 0f       	add	r24, r20
    38a0:	95 1f       	adc	r25, r21
    38a2:	c8 17       	cp	r28, r24
    38a4:	d9 07       	cpc	r29, r25
    38a6:	59 f4       	brne	.+22     	; 0x38be <free+0x82>
    38a8:	88 81       	ld	r24, Y
    38aa:	99 81       	ldd	r25, Y+1	; 0x01
    38ac:	84 0f       	add	r24, r20
    38ae:	95 1f       	adc	r25, r21
    38b0:	02 96       	adiw	r24, 0x02	; 2
    38b2:	91 83       	std	Z+1, r25	; 0x01
    38b4:	80 83       	st	Z, r24
    38b6:	8a 81       	ldd	r24, Y+2	; 0x02
    38b8:	9b 81       	ldd	r25, Y+3	; 0x03
    38ba:	93 83       	std	Z+3, r25	; 0x03
    38bc:	82 83       	std	Z+2, r24	; 0x02
    38be:	21 15       	cp	r18, r1
    38c0:	31 05       	cpc	r19, r1
    38c2:	29 f4       	brne	.+10     	; 0x38ce <free+0x92>
    38c4:	f0 93 23 04 	sts	0x0423, r31	; 0x800423 <__flp+0x1>
    38c8:	e0 93 22 04 	sts	0x0422, r30	; 0x800422 <__flp>
    38cc:	3d c0       	rjmp	.+122    	; 0x3948 <free+0x10c>
    38ce:	e9 01       	movw	r28, r18
    38d0:	fb 83       	std	Y+3, r31	; 0x03
    38d2:	ea 83       	std	Y+2, r30	; 0x02
    38d4:	49 91       	ld	r20, Y+
    38d6:	59 91       	ld	r21, Y+
    38d8:	c4 0f       	add	r28, r20
    38da:	d5 1f       	adc	r29, r21
    38dc:	ec 17       	cp	r30, r28
    38de:	fd 07       	cpc	r31, r29
    38e0:	61 f4       	brne	.+24     	; 0x38fa <free+0xbe>
    38e2:	80 81       	ld	r24, Z
    38e4:	91 81       	ldd	r25, Z+1	; 0x01
    38e6:	84 0f       	add	r24, r20
    38e8:	95 1f       	adc	r25, r21
    38ea:	02 96       	adiw	r24, 0x02	; 2
    38ec:	e9 01       	movw	r28, r18
    38ee:	99 83       	std	Y+1, r25	; 0x01
    38f0:	88 83       	st	Y, r24
    38f2:	82 81       	ldd	r24, Z+2	; 0x02
    38f4:	93 81       	ldd	r25, Z+3	; 0x03
    38f6:	9b 83       	std	Y+3, r25	; 0x03
    38f8:	8a 83       	std	Y+2, r24	; 0x02
    38fa:	e0 e0       	ldi	r30, 0x00	; 0
    38fc:	f0 e0       	ldi	r31, 0x00	; 0
    38fe:	12 96       	adiw	r26, 0x02	; 2
    3900:	8d 91       	ld	r24, X+
    3902:	9c 91       	ld	r25, X
    3904:	13 97       	sbiw	r26, 0x03	; 3
    3906:	00 97       	sbiw	r24, 0x00	; 0
    3908:	19 f0       	breq	.+6      	; 0x3910 <free+0xd4>
    390a:	fd 01       	movw	r30, r26
    390c:	dc 01       	movw	r26, r24
    390e:	f7 cf       	rjmp	.-18     	; 0x38fe <free+0xc2>
    3910:	8d 91       	ld	r24, X+
    3912:	9c 91       	ld	r25, X
    3914:	11 97       	sbiw	r26, 0x01	; 1
    3916:	9d 01       	movw	r18, r26
    3918:	2e 5f       	subi	r18, 0xFE	; 254
    391a:	3f 4f       	sbci	r19, 0xFF	; 255
    391c:	82 0f       	add	r24, r18
    391e:	93 1f       	adc	r25, r19
    3920:	20 91 20 04 	lds	r18, 0x0420	; 0x800420 <__brkval>
    3924:	30 91 21 04 	lds	r19, 0x0421	; 0x800421 <__brkval+0x1>
    3928:	28 17       	cp	r18, r24
    392a:	39 07       	cpc	r19, r25
    392c:	69 f4       	brne	.+26     	; 0x3948 <free+0x10c>
    392e:	30 97       	sbiw	r30, 0x00	; 0
    3930:	29 f4       	brne	.+10     	; 0x393c <free+0x100>
    3932:	10 92 23 04 	sts	0x0423, r1	; 0x800423 <__flp+0x1>
    3936:	10 92 22 04 	sts	0x0422, r1	; 0x800422 <__flp>
    393a:	02 c0       	rjmp	.+4      	; 0x3940 <free+0x104>
    393c:	13 82       	std	Z+3, r1	; 0x03
    393e:	12 82       	std	Z+2, r1	; 0x02
    3940:	b0 93 21 04 	sts	0x0421, r27	; 0x800421 <__brkval+0x1>
    3944:	a0 93 20 04 	sts	0x0420, r26	; 0x800420 <__brkval>
    3948:	df 91       	pop	r29
    394a:	cf 91       	pop	r28
    394c:	08 95       	ret

0000394e <strncpy>:
    394e:	fb 01       	movw	r30, r22
    3950:	dc 01       	movw	r26, r24
    3952:	41 50       	subi	r20, 0x01	; 1
    3954:	50 40       	sbci	r21, 0x00	; 0
    3956:	48 f0       	brcs	.+18     	; 0x396a <strncpy+0x1c>
    3958:	01 90       	ld	r0, Z+
    395a:	0d 92       	st	X+, r0
    395c:	00 20       	and	r0, r0
    395e:	c9 f7       	brne	.-14     	; 0x3952 <strncpy+0x4>
    3960:	01 c0       	rjmp	.+2      	; 0x3964 <strncpy+0x16>
    3962:	1d 92       	st	X+, r1
    3964:	41 50       	subi	r20, 0x01	; 1
    3966:	50 40       	sbci	r21, 0x00	; 0
    3968:	e0 f7       	brcc	.-8      	; 0x3962 <strncpy+0x14>
    396a:	08 95       	ret

0000396c <_exit>:
    396c:	f8 94       	cli

0000396e <__stop_program>:
    396e:	ff cf       	rjmp	.-2      	; 0x396e <__stop_program>
